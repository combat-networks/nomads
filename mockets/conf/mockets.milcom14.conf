# Default Mockets Configuration File
# File needs to be named as mockets.conf and located in c:\temp, \temp, /tmp, or in the current directory
# Mockets will look for the file in that sequence and will load the first one found
# (That is, c:\temp\mockets.conf will override a mockets.conf in the current directory)
#
#
# Enables two way handshake (fast handshake) instead of default four way handshake
UseTwoWayHandshake=true
#
#####
#
# MTU. Max value=2048 (Maximum MTU), min value=14 (header size)
MTU=1000
#
#####
#
# Enables logging of the actions of the transmitter
#EnableXMitLogging=false
#
#####
#
# Enables bandwidth estimation based on acknowledged packets.
# An appropriate value for InitialAssumedBandwidth should be set.
#UseBandwidthEstimation=true
#
#####
#
# Initial assumed bandwidth value (in KBps) used in BandwidthEstimator
#InitialAssumedBandwidth=20
#
#####
#
# Enables congestion control. Need to specify what congestion controller to initialize: CongestionController | TransmissionRateModulation
#UseCongestionControl=TransmissionRateModulation
#
#####
#
# Initial threshold (Bytes per second) used by transmission rate modulation. This is also set as the initial assumed bandwidth.
#TransmissionRateModulationInitialThreshold=5000
#
#####
#
# Activate fast retransmit: when the SACK signals missing packets between intervals of acknowledged packets send them immediately
#FastRetransmit=true
#
#####
#
# Activates a transmit rate limit (bandwidth limit). Bytes per second. Maximum value=512000Bps=500KBps.
TransmitRateLimit=61440
#
#####
#
# Activate receiver side bandwidth estimation. Needs to be set on the receiver or on both communication peers.
#UseReceiverSideBandwidthEstimation=true
#
#####
#
# Parameters for easy configuration of satellite links (and not only)
DisableKeepAlive=true
#
# Even when keepAlive are disabled this timeout is used to trigger peerUnreachable callbacks
# Ft. Dix SRW Radio - Change it to 5000 to reduce number of packets generated when idle
KeepAliveTimeout=5000
#
# InitialAssumedRTT is used to calculate the retransmission timeout (RTO) of packets
InitialAssumedRTT=1000
#
# The value of the maximum Retransmission TimeOut (RTO) is zero by default. A value of zero means no maximum RTO
#MaximumRTO=0
#
# The minimum RTO should be at least equal to the value set for the SAck transmit timeout to avoid retransmission
# before the Ack could even reach the sender.
#MinimumRTO=10
#
# RTO factor and RTO constant are used in the calculation of the RTO for the packet according to this formula:
# (_fSRTT + RTOConstant) * RTOFactor * (1 + pWrapper->getRetransmitCount())
#RTOFactor=2
#RTOConstant=0
#
# Disables the factor (1 + pWrapper->getRetransmitCount()) from RTO calculation
#DisableRetransmitCountFactorInRTO=true
#
#MaximumWindowSize=262144
#
# Timeout value to send SAck information (milliseconds). Acks are not sent unless new data has been received.
# Minimum suggested value=5, yeald the transmission of a SAck every 10 ms <= possibly dependent on the
# performance of the system hosting the mocket.
#SAckTransmitTimeout=30
#
# Connection and socket timeouts
# Timeout for establishing a connection (in milliseconds)
#ConnectTimeout=30000
# Low level socket timeout at connection time -Timeout for receiving a reply to a connect request (in milliseconds)
#UDPReceiveConnectionTimeout=250
# Low level socket timeout after connection is open (-1 means wait indefinitely)
#UDPReceiveTimeout=1200
#
