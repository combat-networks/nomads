// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_TopologyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Node_NetworkHealthEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadableNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadableNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadableNode_TopologyEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadableNode_NetworkHealthEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_2eproto() {
  protobuf_AddDesc_node_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, grump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, traffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, topology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, networkhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, timestamp_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Node_TopologyEntry_descriptor_ = Node_descriptor_->nested_type(0);
  Node_NetworkHealthEntry_descriptor_ = Node_descriptor_->nested_type(1);
  ReadableNode_descriptor_ = file->message_type(1);
  static const int ReadableNode_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, grump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, traffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, topology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, networkhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, timestamp_),
  };
  ReadableNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadableNode_descriptor_,
      ReadableNode::default_instance_,
      ReadableNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadableNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableNode, _is_default_instance_));
  ReadableNode_TopologyEntry_descriptor_ = ReadableNode_descriptor_->nested_type(0);
  ReadableNode_NetworkHealthEntry_descriptor_ = ReadableNode_descriptor_->nested_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_TopologyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::Topology,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Node_TopologyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Node_NetworkHealthEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::NetworkHealth,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Node_NetworkHealthEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadableNode_descriptor_, &ReadableNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ReadableNode_TopologyEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::ReadableTopology,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ReadableNode_TopologyEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ReadableNode_NetworkHealthEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::NetworkHealth,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ReadableNode_NetworkHealthEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_node_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete ReadableNode::default_instance_;
  delete ReadableNode_reflection_;
}

void protobuf_AddDesc_node_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::ddam::protobuf_AddDesc_grump_2eproto();
  ::ddam::protobuf_AddDesc_info_2eproto();
  ::ddam::protobuf_AddDesc_traffic_2eproto();
  ::ddam::protobuf_AddDesc_topology_2eproto();
  ::ddam::protobuf_AddDesc_networkhealth_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnode.proto\022\004ddam\032\037google/protobuf/time"
    "stamp.proto\032\013grump.proto\032\ninfo.proto\032\rtr"
    "affic.proto\032\016topology.proto\032\023networkheal"
    "th.proto\"\223\003\n\004Node\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
    "\001(\t\022\030\n\004info\030\003 \001(\0132\n.ddam.Info\022\032\n\005grump\030\004"
    " \001(\0132\013.ddam.Grump\022\036\n\007traffic\030\005 \001(\0132\r.dda"
    "m.Traffic\022*\n\010topology\030\006 \003(\0132\030.ddam.Node."
    "TopologyEntry\0224\n\rnetworkHealth\030\007 \003(\0132\035.d"
    "dam.Node.NetworkHealthEntry\022-\n\ttimestamp"
    "\030\010 \001(\0132\032.google.protobuf.Timestamp\032\?\n\rTo"
    "pologyEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132"
    "\016.ddam.Topology:\0028\001\032I\n\022NetworkHealthEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.ddam.Net"
    "workHealth:\0028\001\"\273\003\n\014ReadableNode\022\n\n\002id\030\001 "
    "\001(\t\022\014\n\004name\030\002 \001(\t\022\030\n\004info\030\003 \001(\0132\n.ddam.I"
    "nfo\022\032\n\005grump\030\004 \001(\0132\013.ddam.Grump\022&\n\007traff"
    "ic\030\005 \001(\0132\025.ddam.ReadableTraffic\0222\n\010topol"
    "ogy\030\006 \003(\0132 .ddam.ReadableNode.TopologyEn"
    "try\022<\n\rnetworkHealth\030\007 \003(\0132%.ddam.Readab"
    "leNode.NetworkHealthEntry\022-\n\ttimestamp\030\010"
    " \001(\0132\032.google.protobuf.Timestamp\032G\n\rTopo"
    "logyEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132\026."
    "ddam.ReadableTopology:\0028\001\032I\n\022NetworkHeal"
    "thEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.dd"
    "am.NetworkHealth:\0028\001B\"\n\020us.ihmc.aci.ddam"
    "B\tNodeProtoP\001\240\001\001b\006proto3", 1024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  ReadableNode::default_instance_ = new ReadableNode();
  Node::default_instance_->InitAsDefaultInstance();
  ReadableNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_2eproto {
  StaticDescriptorInitializer_node_2eproto() {
    protobuf_AddDesc_node_2eproto();
  }
} static_descriptor_initializer_node_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kInfoFieldNumber;
const int Node::kGrumpFieldNumber;
const int Node::kTrafficFieldNumber;
const int Node::kTopologyFieldNumber;
const int Node::kNetworkHealthFieldNumber;
const int Node::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::ddam::Info*>(&::ddam::Info::default_instance());
  grump_ = const_cast< ::ddam::Grump*>(&::ddam::Grump::default_instance());
  traffic_ = const_cast< ::ddam::Traffic*>(&::ddam::Traffic::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  grump_ = NULL;
  traffic_ = NULL;
  topology_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  topology_.SetEntryDescriptor(
      &::ddam::Node_TopologyEntry_descriptor_);
  networkhealth_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  networkhealth_.SetEntryDescriptor(
      &::ddam::Node_NetworkHealthEntry_descriptor_);
  timestamp_ = NULL;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:ddam.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
    delete grump_;
    delete traffic_;
    delete timestamp_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  topology_.Clear();
  networkhealth_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Node.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .ddam.Info info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_grump;
        break;
      }

      // optional .ddam.Grump grump = 4;
      case 4: {
        if (tag == 34) {
         parse_grump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grump()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_traffic;
        break;
      }

      // optional .ddam.Traffic traffic = 5;
      case 5: {
        if (tag == 42) {
         parse_traffic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_topology;
        break;
      }

      // map<string, .ddam.Topology> topology = 6;
      case 6: {
        if (tag == 50) {
         parse_topology:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topology:
          ::google::protobuf::scoped_ptr<Node_TopologyEntry> entry(topology_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_topology())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Node.TopologyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_topology;
        if (input->ExpectTag(58)) goto parse_loop_networkHealth;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .ddam.NetworkHealth> networkHealth = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_networkHealth:
          ::google::protobuf::scoped_ptr<Node_NetworkHealthEntry> entry(networkhealth_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_networkhealth())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Node.NetworkHealthEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_networkHealth;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 8;
      case 8: {
        if (tag == 66) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Node)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->grump_, output);
  }

  // optional .ddam.Traffic traffic = 5;
  if (this->has_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->traffic_, output);
  }

  // map<string, .ddam.Topology> topology = 6;
  {
    ::google::protobuf::scoped_ptr<Node_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Topology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Node.TopologyEntry.key");
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  {
    ::google::protobuf::scoped_ptr<Node_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          7, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Node.NetworkHealthEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Node)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->info_, target);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->grump_, target);
  }

  // optional .ddam.Traffic traffic = 5;
  if (this->has_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->traffic_, target);
  }

  // map<string, .ddam.Topology> topology = 6;
  {
    ::google::protobuf::scoped_ptr<Node_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Topology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Node.TopologyEntry.key");
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  {
    ::google::protobuf::scoped_ptr<Node_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              7, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Node.NetworkHealthEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grump_);
  }

  // optional .ddam.Traffic traffic = 5;
  if (this->has_traffic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->traffic_);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // map<string, .ddam.Topology> topology = 6;
  total_size += 1 * this->topology_size();
  {
    ::google::protobuf::scoped_ptr<Node_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Topology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  total_size += 1 * this->networkhealth_size();
  {
    ::google::protobuf::scoped_ptr<Node_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  topology_.MergeFrom(from.topology_);
  networkhealth_.MergeFrom(from.networkhealth_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info()) {
    mutable_info()->::ddam::Info::MergeFrom(from.info());
  }
  if (from.has_grump()) {
    mutable_grump()->::ddam::Grump::MergeFrom(from.grump());
  }
  if (from.has_traffic()) {
    mutable_traffic()->::ddam::Traffic::MergeFrom(from.traffic());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(info_, other->info_);
  std::swap(grump_, other->grump_);
  std::swap(traffic_, other->traffic_);
  topology_.Swap(&other->topology_);
  networkhealth_.Swap(&other->networkhealth_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string id = 1;
void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:ddam.Node.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Node.id)
}
 void Node::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Node.id)
}
 void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Node.id)
}
 ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.id)
}

// optional string name = 2;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:ddam.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.name)
}

// optional .ddam.Info info = 3;
bool Node::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void Node::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ddam::Info& Node::info() const {
  // @@protoc_insertion_point(field_get:ddam.Node.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::ddam::Info* Node::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ddam::Info;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.info)
  return info_;
}
::ddam::Info* Node::release_info() {
  
  ::ddam::Info* temp = info_;
  info_ = NULL;
  return temp;
}
void Node::set_allocated_info(::ddam::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.info)
}

// optional .ddam.Grump grump = 4;
bool Node::has_grump() const {
  return !_is_default_instance_ && grump_ != NULL;
}
void Node::clear_grump() {
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
}
const ::ddam::Grump& Node::grump() const {
  // @@protoc_insertion_point(field_get:ddam.Node.grump)
  return grump_ != NULL ? *grump_ : *default_instance_->grump_;
}
::ddam::Grump* Node::mutable_grump() {
  
  if (grump_ == NULL) {
    grump_ = new ::ddam::Grump;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.grump)
  return grump_;
}
::ddam::Grump* Node::release_grump() {
  
  ::ddam::Grump* temp = grump_;
  grump_ = NULL;
  return temp;
}
void Node::set_allocated_grump(::ddam::Grump* grump) {
  delete grump_;
  grump_ = grump;
  if (grump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.grump)
}

// optional .ddam.Traffic traffic = 5;
bool Node::has_traffic() const {
  return !_is_default_instance_ && traffic_ != NULL;
}
void Node::clear_traffic() {
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
}
const ::ddam::Traffic& Node::traffic() const {
  // @@protoc_insertion_point(field_get:ddam.Node.traffic)
  return traffic_ != NULL ? *traffic_ : *default_instance_->traffic_;
}
::ddam::Traffic* Node::mutable_traffic() {
  
  if (traffic_ == NULL) {
    traffic_ = new ::ddam::Traffic;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.traffic)
  return traffic_;
}
::ddam::Traffic* Node::release_traffic() {
  
  ::ddam::Traffic* temp = traffic_;
  traffic_ = NULL;
  return temp;
}
void Node::set_allocated_traffic(::ddam::Traffic* traffic) {
  delete traffic_;
  traffic_ = traffic;
  if (traffic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.traffic)
}

// map<string, .ddam.Topology> topology = 6;
int Node::topology_size() const {
  return topology_.size();
}
void Node::clear_topology() {
  topology_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::Topology >&
Node::topology() const {
  // @@protoc_insertion_point(field_map:ddam.Node.topology)
  return topology_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::Topology >*
Node::mutable_topology() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Node.topology)
  return topology_.MutableMap();
}

// map<string, .ddam.NetworkHealth> networkHealth = 7;
int Node::networkhealth_size() const {
  return networkhealth_.size();
}
void Node::clear_networkhealth() {
  networkhealth_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
Node::networkhealth() const {
  // @@protoc_insertion_point(field_map:ddam.Node.networkHealth)
  return networkhealth_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
Node::mutable_networkhealth() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Node.networkHealth)
  return networkhealth_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 8;
bool Node::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Node::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Node::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Node.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Node::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Node::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Node::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadableNode::kIdFieldNumber;
const int ReadableNode::kNameFieldNumber;
const int ReadableNode::kInfoFieldNumber;
const int ReadableNode::kGrumpFieldNumber;
const int ReadableNode::kTrafficFieldNumber;
const int ReadableNode::kTopologyFieldNumber;
const int ReadableNode::kNetworkHealthFieldNumber;
const int ReadableNode::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadableNode::ReadableNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.ReadableNode)
}

void ReadableNode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::ddam::Info*>(&::ddam::Info::default_instance());
  grump_ = const_cast< ::ddam::Grump*>(&::ddam::Grump::default_instance());
  traffic_ = const_cast< ::ddam::ReadableTraffic*>(&::ddam::ReadableTraffic::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

ReadableNode::ReadableNode(const ReadableNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.ReadableNode)
}

void ReadableNode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  grump_ = NULL;
  traffic_ = NULL;
  topology_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  topology_.SetEntryDescriptor(
      &::ddam::ReadableNode_TopologyEntry_descriptor_);
  networkhealth_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  networkhealth_.SetEntryDescriptor(
      &::ddam::ReadableNode_NetworkHealthEntry_descriptor_);
  timestamp_ = NULL;
}

ReadableNode::~ReadableNode() {
  // @@protoc_insertion_point(destructor:ddam.ReadableNode)
  SharedDtor();
}

void ReadableNode::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
    delete grump_;
    delete traffic_;
    delete timestamp_;
  }
}

void ReadableNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadableNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadableNode_descriptor_;
}

const ReadableNode& ReadableNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

ReadableNode* ReadableNode::default_instance_ = NULL;

ReadableNode* ReadableNode::New(::google::protobuf::Arena* arena) const {
  ReadableNode* n = new ReadableNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadableNode::Clear() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  topology_.Clear();
  networkhealth_.Clear();
}

bool ReadableNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.ReadableNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableNode.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableNode.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .ddam.Info info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_grump;
        break;
      }

      // optional .ddam.Grump grump = 4;
      case 4: {
        if (tag == 34) {
         parse_grump:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grump()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_traffic;
        break;
      }

      // optional .ddam.ReadableTraffic traffic = 5;
      case 5: {
        if (tag == 42) {
         parse_traffic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_topology;
        break;
      }

      // map<string, .ddam.ReadableTopology> topology = 6;
      case 6: {
        if (tag == 50) {
         parse_topology:
          DO_(input->IncrementRecursionDepth());
         parse_loop_topology:
          ::google::protobuf::scoped_ptr<ReadableNode_TopologyEntry> entry(topology_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_topology())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableNode.TopologyEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_topology;
        if (input->ExpectTag(58)) goto parse_loop_networkHealth;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .ddam.NetworkHealth> networkHealth = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_networkHealth:
          ::google::protobuf::scoped_ptr<ReadableNode_NetworkHealthEntry> entry(networkhealth_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_networkhealth())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableNode.NetworkHealthEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_networkHealth;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 8;
      case 8: {
        if (tag == 66) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.ReadableNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.ReadableNode)
  return false;
#undef DO_
}

void ReadableNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.ReadableNode)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableNode.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->grump_, output);
  }

  // optional .ddam.ReadableTraffic traffic = 5;
  if (this->has_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->traffic_, output);
  }

  // map<string, .ddam.ReadableTopology> topology = 6;
  {
    ::google::protobuf::scoped_ptr<ReadableNode_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableNode.TopologyEntry.key");
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  {
    ::google::protobuf::scoped_ptr<ReadableNode_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          7, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableNode.NetworkHealthEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.ReadableNode)
}

::google::protobuf::uint8* ReadableNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.ReadableNode)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableNode.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->info_, target);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->grump_, target);
  }

  // optional .ddam.ReadableTraffic traffic = 5;
  if (this->has_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->traffic_, target);
  }

  // map<string, .ddam.ReadableTopology> topology = 6;
  {
    ::google::protobuf::scoped_ptr<ReadableNode_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableNode.TopologyEntry.key");
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  {
    ::google::protobuf::scoped_ptr<ReadableNode_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              7, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableNode.NetworkHealthEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.ReadableNode)
  return target;
}

int ReadableNode::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .ddam.Info info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional .ddam.Grump grump = 4;
  if (this->has_grump()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grump_);
  }

  // optional .ddam.ReadableTraffic traffic = 5;
  if (this->has_traffic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->traffic_);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // map<string, .ddam.ReadableTopology> topology = 6;
  total_size += 1 * this->topology_size();
  {
    ::google::protobuf::scoped_ptr<ReadableNode_TopologyEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >::const_iterator
        it = this->topology().begin();
        it != this->topology().end(); ++it) {
      entry.reset(topology_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  total_size += 1 * this->networkhealth_size();
  {
    ::google::protobuf::scoped_ptr<ReadableNode_NetworkHealthEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >::const_iterator
        it = this->networkhealth().begin();
        it != this->networkhealth().end(); ++it) {
      entry.reset(networkhealth_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadableNode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadableNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadableNode>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadableNode::MergeFrom(const ReadableNode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  topology_.MergeFrom(from.topology_);
  networkhealth_.MergeFrom(from.networkhealth_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info()) {
    mutable_info()->::ddam::Info::MergeFrom(from.info());
  }
  if (from.has_grump()) {
    mutable_grump()->::ddam::Grump::MergeFrom(from.grump());
  }
  if (from.has_traffic()) {
    mutable_traffic()->::ddam::ReadableTraffic::MergeFrom(from.traffic());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void ReadableNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadableNode::CopyFrom(const ReadableNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadableNode::IsInitialized() const {

  return true;
}

void ReadableNode::Swap(ReadableNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadableNode::InternalSwap(ReadableNode* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(info_, other->info_);
  std::swap(grump_, other->grump_);
  std::swap(traffic_, other->traffic_);
  topology_.Swap(&other->topology_);
  networkhealth_.Swap(&other->networkhealth_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadableNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadableNode_descriptor_;
  metadata.reflection = ReadableNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadableNode

// optional string id = 1;
void ReadableNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadableNode::id() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableNode.id)
}
 void ReadableNode::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableNode.id)
}
 void ReadableNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableNode.id)
}
 ::std::string* ReadableNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadableNode::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.id)
}

// optional string name = 2;
void ReadableNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadableNode::name() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableNode.name)
}
 void ReadableNode::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableNode.name)
}
 void ReadableNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableNode.name)
}
 ::std::string* ReadableNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadableNode::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.name)
}

// optional .ddam.Info info = 3;
bool ReadableNode::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void ReadableNode::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ddam::Info& ReadableNode::info() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::ddam::Info* ReadableNode::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ddam::Info;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.info)
  return info_;
}
::ddam::Info* ReadableNode::release_info() {
  
  ::ddam::Info* temp = info_;
  info_ = NULL;
  return temp;
}
void ReadableNode::set_allocated_info(::ddam::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.info)
}

// optional .ddam.Grump grump = 4;
bool ReadableNode::has_grump() const {
  return !_is_default_instance_ && grump_ != NULL;
}
void ReadableNode::clear_grump() {
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
}
const ::ddam::Grump& ReadableNode::grump() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.grump)
  return grump_ != NULL ? *grump_ : *default_instance_->grump_;
}
::ddam::Grump* ReadableNode::mutable_grump() {
  
  if (grump_ == NULL) {
    grump_ = new ::ddam::Grump;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.grump)
  return grump_;
}
::ddam::Grump* ReadableNode::release_grump() {
  
  ::ddam::Grump* temp = grump_;
  grump_ = NULL;
  return temp;
}
void ReadableNode::set_allocated_grump(::ddam::Grump* grump) {
  delete grump_;
  grump_ = grump;
  if (grump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.grump)
}

// optional .ddam.ReadableTraffic traffic = 5;
bool ReadableNode::has_traffic() const {
  return !_is_default_instance_ && traffic_ != NULL;
}
void ReadableNode::clear_traffic() {
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
}
const ::ddam::ReadableTraffic& ReadableNode::traffic() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.traffic)
  return traffic_ != NULL ? *traffic_ : *default_instance_->traffic_;
}
::ddam::ReadableTraffic* ReadableNode::mutable_traffic() {
  
  if (traffic_ == NULL) {
    traffic_ = new ::ddam::ReadableTraffic;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.traffic)
  return traffic_;
}
::ddam::ReadableTraffic* ReadableNode::release_traffic() {
  
  ::ddam::ReadableTraffic* temp = traffic_;
  traffic_ = NULL;
  return temp;
}
void ReadableNode::set_allocated_traffic(::ddam::ReadableTraffic* traffic) {
  delete traffic_;
  traffic_ = traffic;
  if (traffic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.traffic)
}

// map<string, .ddam.ReadableTopology> topology = 6;
int ReadableNode::topology_size() const {
  return topology_.size();
}
void ReadableNode::clear_topology() {
  topology_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >&
ReadableNode::topology() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableNode.topology)
  return topology_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >*
ReadableNode::mutable_topology() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableNode.topology)
  return topology_.MutableMap();
}

// map<string, .ddam.NetworkHealth> networkHealth = 7;
int ReadableNode::networkhealth_size() const {
  return networkhealth_.size();
}
void ReadableNode::clear_networkhealth() {
  networkhealth_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
ReadableNode::networkhealth() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableNode.networkHealth)
  return networkhealth_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
ReadableNode::mutable_networkhealth() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableNode.networkHealth)
  return networkhealth_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 8;
bool ReadableNode::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void ReadableNode::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ReadableNode::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* ReadableNode::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* ReadableNode::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ReadableNode::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
