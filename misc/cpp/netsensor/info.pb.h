// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#ifndef PROTOBUF_info_2eproto__INCLUDED
#define PROTOBUF_info_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_info_2eproto();
void protobuf_AssignDesc_info_2eproto();
void protobuf_ShutdownFile_info_2eproto();

class CPU;
class Info;
class Network;
class OperatingSystem;

// ===================================================================

class CPU : public ::google::protobuf::Message {
 public:
  CPU();
  virtual ~CPU();

  CPU(const CPU& from);

  inline CPU& operator=(const CPU& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPU& default_instance();

  void Swap(CPU* other);

  // implements Message ----------------------------------------------

  inline CPU* New() const { return New(NULL); }

  CPU* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPU& from);
  void MergeFrom(const CPU& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CPU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vendor = 1;
  void clear_vendor();
  static const int kVendorFieldNumber = 1;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional sint32 freq = 3;
  void clear_freq();
  static const int kFreqFieldNumber = 3;
  ::google::protobuf::int32 freq() const;
  void set_freq(::google::protobuf::int32 value);

  // optional sint32 totalCores = 4;
  void clear_totalcores();
  static const int kTotalCoresFieldNumber = 4;
  ::google::protobuf::int32 totalcores() const;
  void set_totalcores(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ddam.CPU)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::int32 freq_;
  ::google::protobuf::int32 totalcores_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static CPU* default_instance_;
};
// -------------------------------------------------------------------

class Network : public ::google::protobuf::Message {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Network& default_instance();

  void Swap(Network* other);

  // implements Message ----------------------------------------------

  inline Network* New() const { return New(NULL); }

  Network* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Network* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string interfaceName = 1;
  void clear_interfacename();
  static const int kInterfaceNameFieldNumber = 1;
  const ::std::string& interfacename() const;
  void set_interfacename(const ::std::string& value);
  void set_interfacename(const char* value);
  void set_interfacename(const char* value, size_t size);
  ::std::string* mutable_interfacename();
  ::std::string* release_interfacename();
  void set_allocated_interfacename(::std::string* interfacename);

  // optional string ipAddress = 2;
  void clear_ipaddress();
  static const int kIpAddressFieldNumber = 2;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // optional string macAddress = 3;
  void clear_macaddress();
  static const int kMacAddressFieldNumber = 3;
  const ::std::string& macaddress() const;
  void set_macaddress(const ::std::string& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  ::std::string* mutable_macaddress();
  ::std::string* release_macaddress();
  void set_allocated_macaddress(::std::string* macaddress);

  // optional string netmask = 4;
  void clear_netmask();
  static const int kNetmaskFieldNumber = 4;
  const ::std::string& netmask() const;
  void set_netmask(const ::std::string& value);
  void set_netmask(const char* value);
  void set_netmask(const char* value, size_t size);
  ::std::string* mutable_netmask();
  ::std::string* release_netmask();
  void set_allocated_netmask(::std::string* netmask);

  // optional string broadcast = 5;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 5;
  const ::std::string& broadcast() const;
  void set_broadcast(const ::std::string& value);
  void set_broadcast(const char* value);
  void set_broadcast(const char* value, size_t size);
  ::std::string* mutable_broadcast();
  ::std::string* release_broadcast();
  void set_allocated_broadcast(::std::string* broadcast);

  // optional sint64 mtu = 6;
  void clear_mtu();
  static const int kMtuFieldNumber = 6;
  ::google::protobuf::int64 mtu() const;
  void set_mtu(::google::protobuf::int64 value);

  // optional bool isPrimary = 7;
  void clear_isprimary();
  static const int kIsPrimaryFieldNumber = 7;
  bool isprimary() const;
  void set_isprimary(bool value);

  // @@protoc_insertion_point(class_scope:ddam.Network)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr interfacename_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr macaddress_;
  ::google::protobuf::internal::ArenaStringPtr netmask_;
  ::google::protobuf::internal::ArenaStringPtr broadcast_;
  ::google::protobuf::int64 mtu_;
  bool isprimary_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static Network* default_instance_;
};
// -------------------------------------------------------------------

class OperatingSystem : public ::google::protobuf::Message {
 public:
  OperatingSystem();
  virtual ~OperatingSystem();

  OperatingSystem(const OperatingSystem& from);

  inline OperatingSystem& operator=(const OperatingSystem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperatingSystem& default_instance();

  void Swap(OperatingSystem* other);

  // implements Message ----------------------------------------------

  inline OperatingSystem* New() const { return New(NULL); }

  OperatingSystem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperatingSystem& from);
  void MergeFrom(const OperatingSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperatingSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string arch = 3;
  void clear_arch();
  static const int kArchFieldNumber = 3;
  const ::std::string& arch() const;
  void set_arch(const ::std::string& value);
  void set_arch(const char* value);
  void set_arch(const char* value, size_t size);
  ::std::string* mutable_arch();
  ::std::string* release_arch();
  void set_allocated_arch(::std::string* arch);

  // optional string machine = 4;
  void clear_machine();
  static const int kMachineFieldNumber = 4;
  const ::std::string& machine() const;
  void set_machine(const ::std::string& value);
  void set_machine(const char* value);
  void set_machine(const char* value, size_t size);
  ::std::string* mutable_machine();
  ::std::string* release_machine();
  void set_allocated_machine(::std::string* machine);

  // optional string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string vendor = 6;
  void clear_vendor();
  static const int kVendorFieldNumber = 6;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional string vendorVersion = 7;
  void clear_vendorversion();
  static const int kVendorVersionFieldNumber = 7;
  const ::std::string& vendorversion() const;
  void set_vendorversion(const ::std::string& value);
  void set_vendorversion(const char* value);
  void set_vendorversion(const char* value, size_t size);
  ::std::string* mutable_vendorversion();
  ::std::string* release_vendorversion();
  void set_allocated_vendorversion(::std::string* vendorversion);

  // @@protoc_insertion_point(class_scope:ddam.OperatingSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr arch_;
  ::google::protobuf::internal::ArenaStringPtr machine_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr vendorversion_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static OperatingSystem* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  inline Info* New() const { return New(NULL); }

  Info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ddam.OperatingSystem os = 1;
  bool has_os() const;
  void clear_os();
  static const int kOsFieldNumber = 1;
  const ::ddam::OperatingSystem& os() const;
  ::ddam::OperatingSystem* mutable_os();
  ::ddam::OperatingSystem* release_os();
  void set_allocated_os(::ddam::OperatingSystem* os);

  // repeated .ddam.CPU cpus = 2;
  int cpus_size() const;
  void clear_cpus();
  static const int kCpusFieldNumber = 2;
  const ::ddam::CPU& cpus(int index) const;
  ::ddam::CPU* mutable_cpus(int index);
  ::ddam::CPU* add_cpus();
  ::google::protobuf::RepeatedPtrField< ::ddam::CPU >*
      mutable_cpus();
  const ::google::protobuf::RepeatedPtrField< ::ddam::CPU >&
      cpus() const;

  // repeated .ddam.Network nics = 3;
  int nics_size() const;
  void clear_nics();
  static const int kNicsFieldNumber = 3;
  const ::ddam::Network& nics(int index) const;
  ::ddam::Network* mutable_nics(int index);
  ::ddam::Network* add_nics();
  ::google::protobuf::RepeatedPtrField< ::ddam::Network >*
      mutable_nics();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Network >&
      nics() const;

  // optional .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ddam::OperatingSystem* os_;
  ::google::protobuf::RepeatedPtrField< ::ddam::CPU > cpus_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Network > nics_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_info_2eproto();
  friend void protobuf_AssignDesc_info_2eproto();
  friend void protobuf_ShutdownFile_info_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CPU

// optional string vendor = 1;
inline void CPU::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPU::vendor() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.CPU.vendor)
}
inline void CPU::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.CPU.vendor)
}
inline void CPU::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.CPU.vendor)
}
inline ::std::string* CPU::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:ddam.CPU.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPU::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ddam.CPU.vendor)
}

// optional string model = 2;
inline void CPU::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPU::model() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.CPU.model)
}
inline void CPU::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.CPU.model)
}
inline void CPU::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.CPU.model)
}
inline ::std::string* CPU::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:ddam.CPU.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPU::release_model() {
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPU::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:ddam.CPU.model)
}

// optional sint32 freq = 3;
inline void CPU::clear_freq() {
  freq_ = 0;
}
inline ::google::protobuf::int32 CPU::freq() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.freq)
  return freq_;
}
inline void CPU::set_freq(::google::protobuf::int32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:ddam.CPU.freq)
}

// optional sint32 totalCores = 4;
inline void CPU::clear_totalcores() {
  totalcores_ = 0;
}
inline ::google::protobuf::int32 CPU::totalcores() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.totalCores)
  return totalcores_;
}
inline void CPU::set_totalcores(::google::protobuf::int32 value) {
  
  totalcores_ = value;
  // @@protoc_insertion_point(field_set:ddam.CPU.totalCores)
}

// -------------------------------------------------------------------

// Network

// optional string interfaceName = 1;
inline void Network::clear_interfacename() {
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::interfacename() const {
  // @@protoc_insertion_point(field_get:ddam.Network.interfaceName)
  return interfacename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_interfacename(const ::std::string& value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.interfaceName)
}
inline void Network::set_interfacename(const char* value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.interfaceName)
}
inline void Network::set_interfacename(const char* value, size_t size) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.interfaceName)
}
inline ::std::string* Network::mutable_interfacename() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.interfaceName)
  return interfacename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_interfacename() {
  
  return interfacename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_interfacename(::std::string* interfacename) {
  if (interfacename != NULL) {
    
  } else {
    
  }
  interfacename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfacename);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.interfaceName)
}

// optional string ipAddress = 2;
inline void Network::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::ipaddress() const {
  // @@protoc_insertion_point(field_get:ddam.Network.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.ipAddress)
}
inline void Network::set_ipaddress(const char* value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.ipAddress)
}
inline void Network::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.ipAddress)
}
inline ::std::string* Network::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_ipaddress() {
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.ipAddress)
}

// optional string macAddress = 3;
inline void Network::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::macaddress() const {
  // @@protoc_insertion_point(field_get:ddam.Network.macAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.macAddress)
}
inline void Network::set_macaddress(const char* value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.macAddress)
}
inline void Network::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.macAddress)
}
inline ::std::string* Network::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.macAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_macaddress() {
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.macAddress)
}

// optional string netmask = 4;
inline void Network::clear_netmask() {
  netmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::netmask() const {
  // @@protoc_insertion_point(field_get:ddam.Network.netmask)
  return netmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_netmask(const ::std::string& value) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.netmask)
}
inline void Network::set_netmask(const char* value) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.netmask)
}
inline void Network::set_netmask(const char* value, size_t size) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.netmask)
}
inline ::std::string* Network::mutable_netmask() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.netmask)
  return netmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_netmask() {
  
  return netmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_netmask(::std::string* netmask) {
  if (netmask != NULL) {
    
  } else {
    
  }
  netmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmask);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.netmask)
}

// optional string broadcast = 5;
inline void Network::clear_broadcast() {
  broadcast_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::broadcast() const {
  // @@protoc_insertion_point(field_get:ddam.Network.broadcast)
  return broadcast_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_broadcast(const ::std::string& value) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.broadcast)
}
inline void Network::set_broadcast(const char* value) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.broadcast)
}
inline void Network::set_broadcast(const char* value, size_t size) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.broadcast)
}
inline ::std::string* Network::mutable_broadcast() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.broadcast)
  return broadcast_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_broadcast() {
  
  return broadcast_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_broadcast(::std::string* broadcast) {
  if (broadcast != NULL) {
    
  } else {
    
  }
  broadcast_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broadcast);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.broadcast)
}

// optional sint64 mtu = 6;
inline void Network::clear_mtu() {
  mtu_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Network::mtu() const {
  // @@protoc_insertion_point(field_get:ddam.Network.mtu)
  return mtu_;
}
inline void Network::set_mtu(::google::protobuf::int64 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:ddam.Network.mtu)
}

// optional bool isPrimary = 7;
inline void Network::clear_isprimary() {
  isprimary_ = false;
}
inline bool Network::isprimary() const {
  // @@protoc_insertion_point(field_get:ddam.Network.isPrimary)
  return isprimary_;
}
inline void Network::set_isprimary(bool value) {
  
  isprimary_ = value;
  // @@protoc_insertion_point(field_set:ddam.Network.isPrimary)
}

// -------------------------------------------------------------------

// OperatingSystem

// optional string description = 1;
inline void OperatingSystem::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::description() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.description)
}
inline void OperatingSystem::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.description)
}
inline void OperatingSystem::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.description)
}
inline ::std::string* OperatingSystem::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.description)
}

// optional string name = 2;
inline void OperatingSystem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::name() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.name)
}
inline void OperatingSystem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.name)
}
inline void OperatingSystem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.name)
}
inline ::std::string* OperatingSystem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.name)
}

// optional string arch = 3;
inline void OperatingSystem::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::arch() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.arch)
  return arch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.arch)
}
inline void OperatingSystem::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.arch)
}
inline void OperatingSystem::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.arch)
}
inline ::std::string* OperatingSystem::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_arch() {
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.arch)
}

// optional string machine = 4;
inline void OperatingSystem::clear_machine() {
  machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::machine() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.machine)
  return machine_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_machine(const ::std::string& value) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.machine)
}
inline void OperatingSystem::set_machine(const char* value) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.machine)
}
inline void OperatingSystem::set_machine(const char* value, size_t size) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.machine)
}
inline ::std::string* OperatingSystem::mutable_machine() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.machine)
  return machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_machine() {
  
  return machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    
  } else {
    
  }
  machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.machine)
}

// optional string version = 5;
inline void OperatingSystem::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::version() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.version)
}
inline void OperatingSystem::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.version)
}
inline void OperatingSystem::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.version)
}
inline ::std::string* OperatingSystem::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.version)
}

// optional string vendor = 6;
inline void OperatingSystem::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::vendor() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.vendor)
}
inline void OperatingSystem::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.vendor)
}
inline void OperatingSystem::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.vendor)
}
inline ::std::string* OperatingSystem::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.vendor)
}

// optional string vendorVersion = 7;
inline void OperatingSystem::clear_vendorversion() {
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::vendorversion() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.vendorVersion)
  return vendorversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_vendorversion(const ::std::string& value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.vendorVersion)
}
inline void OperatingSystem::set_vendorversion(const char* value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.vendorVersion)
}
inline void OperatingSystem::set_vendorversion(const char* value, size_t size) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.vendorVersion)
}
inline ::std::string* OperatingSystem::mutable_vendorversion() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.vendorVersion)
  return vendorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_vendorversion() {
  
  return vendorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_vendorversion(::std::string* vendorversion) {
  if (vendorversion != NULL) {
    
  } else {
    
  }
  vendorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorversion);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.vendorVersion)
}

// -------------------------------------------------------------------

// Info

// optional .ddam.OperatingSystem os = 1;
inline bool Info::has_os() const {
  return !_is_default_instance_ && os_ != NULL;
}
inline void Info::clear_os() {
  if (GetArenaNoVirtual() == NULL && os_ != NULL) delete os_;
  os_ = NULL;
}
inline const ::ddam::OperatingSystem& Info::os() const {
  // @@protoc_insertion_point(field_get:ddam.Info.os)
  return os_ != NULL ? *os_ : *default_instance_->os_;
}
inline ::ddam::OperatingSystem* Info::mutable_os() {
  
  if (os_ == NULL) {
    os_ = new ::ddam::OperatingSystem;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Info.os)
  return os_;
}
inline ::ddam::OperatingSystem* Info::release_os() {
  
  ::ddam::OperatingSystem* temp = os_;
  os_ = NULL;
  return temp;
}
inline void Info::set_allocated_os(::ddam::OperatingSystem* os) {
  delete os_;
  os_ = os;
  if (os) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Info.os)
}

// repeated .ddam.CPU cpus = 2;
inline int Info::cpus_size() const {
  return cpus_.size();
}
inline void Info::clear_cpus() {
  cpus_.Clear();
}
inline const ::ddam::CPU& Info::cpus(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Info.cpus)
  return cpus_.Get(index);
}
inline ::ddam::CPU* Info::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Info.cpus)
  return cpus_.Mutable(index);
}
inline ::ddam::CPU* Info::add_cpus() {
  // @@protoc_insertion_point(field_add:ddam.Info.cpus)
  return cpus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::CPU >*
Info::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Info.cpus)
  return &cpus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::CPU >&
Info::cpus() const {
  // @@protoc_insertion_point(field_list:ddam.Info.cpus)
  return cpus_;
}

// repeated .ddam.Network nics = 3;
inline int Info::nics_size() const {
  return nics_.size();
}
inline void Info::clear_nics() {
  nics_.Clear();
}
inline const ::ddam::Network& Info::nics(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Info.nics)
  return nics_.Get(index);
}
inline ::ddam::Network* Info::mutable_nics(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Info.nics)
  return nics_.Mutable(index);
}
inline ::ddam::Network* Info::add_nics() {
  // @@protoc_insertion_point(field_add:ddam.Info.nics)
  return nics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Network >*
Info::mutable_nics() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Info.nics)
  return &nics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Network >&
Info::nics() const {
  // @@protoc_insertion_point(field_list:ddam.Info.nics)
  return nics_;
}

// optional .google.protobuf.Timestamp timestamp = 4;
inline bool Info::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Info::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Info::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Info.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Info::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Info.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Info::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Info::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Info.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_info_2eproto__INCLUDED
