// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* CPU_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPU_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperatingSystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperatingSystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_info_2eproto() {
  protobuf_AddDesc_info_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "info.proto");
  GOOGLE_CHECK(file != NULL);
  CPU_descriptor_ = file->message_type(0);
  static const int CPU_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, totalcores_),
  };
  CPU_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CPU_descriptor_,
      CPU::default_instance_,
      CPU_offsets_,
      -1,
      -1,
      -1,
      sizeof(CPU),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPU, _is_default_instance_));
  Network_descriptor_ = file->message_type(1);
  static const int Network_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, interfacename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, netmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, mtu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, isprimary_),
  };
  Network_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      -1,
      -1,
      -1,
      sizeof(Network),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _is_default_instance_));
  OperatingSystem_descriptor_ = file->message_type(2);
  static const int OperatingSystem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, arch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, vendorversion_),
  };
  OperatingSystem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperatingSystem_descriptor_,
      OperatingSystem::default_instance_,
      OperatingSystem_offsets_,
      -1,
      -1,
      -1,
      sizeof(OperatingSystem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatingSystem, _is_default_instance_));
  Info_descriptor_ = file->message_type(3);
  static const int Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, nics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, timestamp_),
  };
  Info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      -1,
      -1,
      -1,
      sizeof(Info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_info_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CPU_descriptor_, &CPU::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperatingSystem_descriptor_, &OperatingSystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Info_descriptor_, &Info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_info_2eproto() {
  delete CPU::default_instance_;
  delete CPU_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete OperatingSystem::default_instance_;
  delete OperatingSystem_reflection_;
  delete Info::default_instance_;
  delete Info_reflection_;
}

void protobuf_AddDesc_info_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ninfo.proto\022\004ddam\032\037google/protobuf/time"
    "stamp.proto\"F\n\003CPU\022\016\n\006vendor\030\001 \001(\t\022\r\n\005mo"
    "del\030\002 \001(\t\022\014\n\004freq\030\003 \001(\021\022\022\n\ntotalCores\030\004 "
    "\001(\021\"\213\001\n\007Network\022\025\n\rinterfaceName\030\001 \001(\t\022\021"
    "\n\tipAddress\030\002 \001(\t\022\022\n\nmacAddress\030\003 \001(\t\022\017\n"
    "\007netmask\030\004 \001(\t\022\021\n\tbroadcast\030\005 \001(\t\022\013\n\003mtu"
    "\030\006 \001(\022\022\021\n\tisPrimary\030\007 \001(\010\"\213\001\n\017OperatingS"
    "ystem\022\023\n\013description\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
    "\022\014\n\004arch\030\003 \001(\t\022\017\n\007machine\030\004 \001(\t\022\017\n\007versi"
    "on\030\005 \001(\t\022\016\n\006vendor\030\006 \001(\t\022\025\n\rvendorVersio"
    "n\030\007 \001(\t\"\216\001\n\004Info\022!\n\002os\030\001 \001(\0132\025.ddam.Oper"
    "atingSystem\022\027\n\004cpus\030\002 \003(\0132\t.ddam.CPU\022\033\n\004"
    "nics\030\003 \003(\0132\r.ddam.Network\022-\n\ttimestamp\030\004"
    " \001(\0132\032.google.protobuf.TimestampB\"\n\020us.i"
    "hmc.aci.ddamB\tInfoProtoP\001\240\001\001b\006proto3", 596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "info.proto", &protobuf_RegisterTypes);
  CPU::default_instance_ = new CPU();
  Network::default_instance_ = new Network();
  OperatingSystem::default_instance_ = new OperatingSystem();
  Info::default_instance_ = new Info();
  CPU::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  OperatingSystem::default_instance_->InitAsDefaultInstance();
  Info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_info_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_info_2eproto {
  StaticDescriptorInitializer_info_2eproto() {
    protobuf_AddDesc_info_2eproto();
  }
} static_descriptor_initializer_info_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPU::kVendorFieldNumber;
const int CPU::kModelFieldNumber;
const int CPU::kFreqFieldNumber;
const int CPU::kTotalCoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPU::CPU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.CPU)
}

void CPU::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CPU::CPU(const CPU& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.CPU)
}

void CPU::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_ = 0;
  totalcores_ = 0;
}

CPU::~CPU() {
  // @@protoc_insertion_point(destructor:ddam.CPU)
  SharedDtor();
}

void CPU::SharedDtor() {
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CPU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPU::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPU_descriptor_;
}

const CPU& CPU::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

CPU* CPU::default_instance_ = NULL;

CPU* CPU::New(::google::protobuf::Arena* arena) const {
  CPU* n = new CPU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPU::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CPU*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(freq_, totalcores_);
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.CPU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vendor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.CPU.vendor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.CPU.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_freq;
        break;
      }

      // optional sint32 freq = 3;
      case 3: {
        if (tag == 24) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalCores;
        break;
      }

      // optional sint32 totalCores = 4;
      case 4: {
        if (tag == 32) {
         parse_totalCores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &totalcores_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.CPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.CPU)
  return false;
#undef DO_
}

void CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.CPU)
  // optional string vendor = 1;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.CPU.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.CPU.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional sint32 freq = 3;
  if (this->freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->freq(), output);
  }

  // optional sint32 totalCores = 4;
  if (this->totalcores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->totalcores(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.CPU)
}

::google::protobuf::uint8* CPU::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.CPU)
  // optional string vendor = 1;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.CPU.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vendor(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.CPU.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional sint32 freq = 3;
  if (this->freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->freq(), target);
  }

  // optional sint32 totalCores = 4;
  if (this->totalcores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->totalcores(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.CPU)
  return target;
}

int CPU::ByteSize() const {
  int total_size = 0;

  // optional string vendor = 1;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional sint32 freq = 3;
  if (this->freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->freq());
  }

  // optional sint32 totalCores = 4;
  if (this->totalcores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->totalcores());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPU::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CPU* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CPU>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPU::MergeFrom(const CPU& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
  if (from.totalcores() != 0) {
    set_totalcores(from.totalcores());
  }
}

void CPU::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPU::CopyFrom(const CPU& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPU::IsInitialized() const {

  return true;
}

void CPU::Swap(CPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPU::InternalSwap(CPU* other) {
  vendor_.Swap(&other->vendor_);
  model_.Swap(&other->model_);
  std::swap(freq_, other->freq_);
  std::swap(totalcores_, other->totalcores_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPU::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPU_descriptor_;
  metadata.reflection = CPU_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPU

// optional string vendor = 1;
void CPU::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CPU::vendor() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CPU::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.CPU.vendor)
}
 void CPU::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.CPU.vendor)
}
 void CPU::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.CPU.vendor)
}
 ::std::string* CPU::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:ddam.CPU.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CPU::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CPU::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ddam.CPU.vendor)
}

// optional string model = 2;
void CPU::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CPU::model() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CPU::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.CPU.model)
}
 void CPU::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.CPU.model)
}
 void CPU::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.CPU.model)
}
 ::std::string* CPU::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:ddam.CPU.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CPU::release_model() {
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CPU::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:ddam.CPU.model)
}

// optional sint32 freq = 3;
void CPU::clear_freq() {
  freq_ = 0;
}
 ::google::protobuf::int32 CPU::freq() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.freq)
  return freq_;
}
 void CPU::set_freq(::google::protobuf::int32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:ddam.CPU.freq)
}

// optional sint32 totalCores = 4;
void CPU::clear_totalcores() {
  totalcores_ = 0;
}
 ::google::protobuf::int32 CPU::totalcores() const {
  // @@protoc_insertion_point(field_get:ddam.CPU.totalCores)
  return totalcores_;
}
 void CPU::set_totalcores(::google::protobuf::int32 value) {
  
  totalcores_ = value;
  // @@protoc_insertion_point(field_set:ddam.CPU.totalCores)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Network::kInterfaceNameFieldNumber;
const int Network::kIpAddressFieldNumber;
const int Network::kMacAddressFieldNumber;
const int Network::kNetmaskFieldNumber;
const int Network::kBroadcastFieldNumber;
const int Network::kMtuFieldNumber;
const int Network::kIsPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Network::Network()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Network)
}

void Network::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Network::Network(const Network& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Network)
}

void Network::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  interfacename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mtu_ = GOOGLE_LONGLONG(0);
  isprimary_ = false;
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:ddam.Network)
  SharedDtor();
}

void Network::SharedDtor() {
  interfacename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New(::google::protobuf::Arena* arena) const {
  Network* n = new Network;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Network::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Network*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mtu_, isprimary_);
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interfaceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interfacename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->interfacename().data(), this->interfacename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Network.interfaceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipAddress;
        break;
      }

      // optional string ipAddress = 2;
      case 2: {
        if (tag == 18) {
         parse_ipAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Network.ipAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_macAddress;
        break;
      }

      // optional string macAddress = 3;
      case 3: {
        if (tag == 26) {
         parse_macAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Network.macAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_netmask;
        break;
      }

      // optional string netmask = 4;
      case 4: {
        if (tag == 34) {
         parse_netmask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->netmask().data(), this->netmask().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Network.netmask"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_broadcast;
        break;
      }

      // optional string broadcast = 5;
      case 5: {
        if (tag == 42) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broadcast().data(), this->broadcast().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Network.broadcast"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mtu;
        break;
      }

      // optional sint64 mtu = 6;
      case 6: {
        if (tag == 48) {
         parse_mtu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &mtu_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isPrimary;
        break;
      }

      // optional bool isPrimary = 7;
      case 7: {
        if (tag == 56) {
         parse_isPrimary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprimary_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Network)
  // optional string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.interfaceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interfacename(), output);
  }

  // optional string ipAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipaddress(), output);
  }

  // optional string macAddress = 3;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.macAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->macaddress(), output);
  }

  // optional string netmask = 4;
  if (this->netmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmask().data(), this->netmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.netmask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->netmask(), output);
  }

  // optional string broadcast = 5;
  if (this->broadcast().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broadcast().data(), this->broadcast().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.broadcast");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broadcast(), output);
  }

  // optional sint64 mtu = 6;
  if (this->mtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->mtu(), output);
  }

  // optional bool isPrimary = 7;
  if (this->isprimary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isprimary(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Network)
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Network)
  // optional string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->interfacename().data(), this->interfacename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.interfaceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interfacename(), target);
  }

  // optional string ipAddress = 2;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ipaddress(), target);
  }

  // optional string macAddress = 3;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.macAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->macaddress(), target);
  }

  // optional string netmask = 4;
  if (this->netmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->netmask().data(), this->netmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.netmask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->netmask(), target);
  }

  // optional string broadcast = 5;
  if (this->broadcast().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broadcast().data(), this->broadcast().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Network.broadcast");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broadcast(), target);
  }

  // optional sint64 mtu = 6;
  if (this->mtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->mtu(), target);
  }

  // optional bool isPrimary = 7;
  if (this->isprimary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isprimary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Network)
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;

  // optional string interfaceName = 1;
  if (this->interfacename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->interfacename());
  }

  // optional string ipAddress = 2;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // optional string macAddress = 3;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->macaddress());
  }

  // optional string netmask = 4;
  if (this->netmask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->netmask());
  }

  // optional string broadcast = 5;
  if (this->broadcast().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broadcast());
  }

  // optional sint64 mtu = 6;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->mtu());
  }

  // optional bool isPrimary = 7;
  if (this->isprimary() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Network* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Network>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.interfacename().size() > 0) {

    interfacename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interfacename_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.macaddress().size() > 0) {

    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  if (from.netmask().size() > 0) {

    netmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  if (from.broadcast().size() > 0) {

    broadcast_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broadcast_);
  }
  if (from.mtu() != 0) {
    set_mtu(from.mtu());
  }
  if (from.isprimary() != 0) {
    set_isprimary(from.isprimary());
  }
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {

  return true;
}

void Network::Swap(Network* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Network::InternalSwap(Network* other) {
  interfacename_.Swap(&other->interfacename_);
  ipaddress_.Swap(&other->ipaddress_);
  macaddress_.Swap(&other->macaddress_);
  netmask_.Swap(&other->netmask_);
  broadcast_.Swap(&other->broadcast_);
  std::swap(mtu_, other->mtu_);
  std::swap(isprimary_, other->isprimary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Network

// optional string interfaceName = 1;
void Network::clear_interfacename() {
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Network::interfacename() const {
  // @@protoc_insertion_point(field_get:ddam.Network.interfaceName)
  return interfacename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_interfacename(const ::std::string& value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.interfaceName)
}
 void Network::set_interfacename(const char* value) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.interfaceName)
}
 void Network::set_interfacename(const char* value, size_t size) {
  
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.interfaceName)
}
 ::std::string* Network::mutable_interfacename() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.interfaceName)
  return interfacename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_interfacename() {
  
  return interfacename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_interfacename(::std::string* interfacename) {
  if (interfacename != NULL) {
    
  } else {
    
  }
  interfacename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfacename);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.interfaceName)
}

// optional string ipAddress = 2;
void Network::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Network::ipaddress() const {
  // @@protoc_insertion_point(field_get:ddam.Network.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.ipAddress)
}
 void Network::set_ipaddress(const char* value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.ipAddress)
}
 void Network::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.ipAddress)
}
 ::std::string* Network::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_ipaddress() {
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.ipAddress)
}

// optional string macAddress = 3;
void Network::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Network::macaddress() const {
  // @@protoc_insertion_point(field_get:ddam.Network.macAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.macAddress)
}
 void Network::set_macaddress(const char* value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.macAddress)
}
 void Network::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.macAddress)
}
 ::std::string* Network::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.macAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_macaddress() {
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.macAddress)
}

// optional string netmask = 4;
void Network::clear_netmask() {
  netmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Network::netmask() const {
  // @@protoc_insertion_point(field_get:ddam.Network.netmask)
  return netmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_netmask(const ::std::string& value) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.netmask)
}
 void Network::set_netmask(const char* value) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.netmask)
}
 void Network::set_netmask(const char* value, size_t size) {
  
  netmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.netmask)
}
 ::std::string* Network::mutable_netmask() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.netmask)
  return netmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_netmask() {
  
  return netmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_netmask(::std::string* netmask) {
  if (netmask != NULL) {
    
  } else {
    
  }
  netmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), netmask);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.netmask)
}

// optional string broadcast = 5;
void Network::clear_broadcast() {
  broadcast_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Network::broadcast() const {
  // @@protoc_insertion_point(field_get:ddam.Network.broadcast)
  return broadcast_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_broadcast(const ::std::string& value) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Network.broadcast)
}
 void Network::set_broadcast(const char* value) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Network.broadcast)
}
 void Network::set_broadcast(const char* value, size_t size) {
  
  broadcast_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Network.broadcast)
}
 ::std::string* Network::mutable_broadcast() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Network.broadcast)
  return broadcast_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_broadcast() {
  
  return broadcast_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_broadcast(::std::string* broadcast) {
  if (broadcast != NULL) {
    
  } else {
    
  }
  broadcast_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broadcast);
  // @@protoc_insertion_point(field_set_allocated:ddam.Network.broadcast)
}

// optional sint64 mtu = 6;
void Network::clear_mtu() {
  mtu_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Network::mtu() const {
  // @@protoc_insertion_point(field_get:ddam.Network.mtu)
  return mtu_;
}
 void Network::set_mtu(::google::protobuf::int64 value) {
  
  mtu_ = value;
  // @@protoc_insertion_point(field_set:ddam.Network.mtu)
}

// optional bool isPrimary = 7;
void Network::clear_isprimary() {
  isprimary_ = false;
}
 bool Network::isprimary() const {
  // @@protoc_insertion_point(field_get:ddam.Network.isPrimary)
  return isprimary_;
}
 void Network::set_isprimary(bool value) {
  
  isprimary_ = value;
  // @@protoc_insertion_point(field_set:ddam.Network.isPrimary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatingSystem::kDescriptionFieldNumber;
const int OperatingSystem::kNameFieldNumber;
const int OperatingSystem::kArchFieldNumber;
const int OperatingSystem::kMachineFieldNumber;
const int OperatingSystem::kVersionFieldNumber;
const int OperatingSystem::kVendorFieldNumber;
const int OperatingSystem::kVendorVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatingSystem::OperatingSystem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.OperatingSystem)
}

void OperatingSystem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OperatingSystem::OperatingSystem(const OperatingSystem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.OperatingSystem)
}

void OperatingSystem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OperatingSystem::~OperatingSystem() {
  // @@protoc_insertion_point(destructor:ddam.OperatingSystem)
  SharedDtor();
}

void OperatingSystem::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OperatingSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatingSystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatingSystem_descriptor_;
}

const OperatingSystem& OperatingSystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

OperatingSystem* OperatingSystem::default_instance_ = NULL;

OperatingSystem* OperatingSystem::New(::google::protobuf::Arena* arena) const {
  OperatingSystem* n = new OperatingSystem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatingSystem::Clear() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OperatingSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.OperatingSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arch;
        break;
      }

      // optional string arch = 3;
      case 3: {
        if (tag == 26) {
         parse_arch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arch().data(), this->arch().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.arch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_machine;
        break;
      }

      // optional string machine = 4;
      case 4: {
        if (tag == 34) {
         parse_machine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machine().data(), this->machine().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.machine"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vendor;
        break;
      }

      // optional string vendor = 6;
      case 6: {
        if (tag == 50) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.vendor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vendorVersion;
        break;
      }

      // optional string vendorVersion = 7;
      case 7: {
        if (tag == 58) {
         parse_vendorVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendorversion().data(), this->vendorversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.OperatingSystem.vendorVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.OperatingSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.OperatingSystem)
  return false;
#undef DO_
}

void OperatingSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.OperatingSystem)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string arch = 3;
  if (this->arch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.arch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->arch(), output);
  }

  // optional string machine = 4;
  if (this->machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->machine(), output);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // optional string vendor = 6;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vendor(), output);
  }

  // optional string vendorVersion = 7;
  if (this->vendorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorversion().data(), this->vendorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.vendorVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->vendorversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.OperatingSystem)
}

::google::protobuf::uint8* OperatingSystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.OperatingSystem)
  // optional string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string arch = 3;
  if (this->arch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.arch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->arch(), target);
  }

  // optional string machine = 4;
  if (this->machine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machine(), target);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional string vendor = 6;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vendor(), target);
  }

  // optional string vendorVersion = 7;
  if (this->vendorversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendorversion().data(), this->vendorversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.OperatingSystem.vendorVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->vendorversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.OperatingSystem)
  return target;
}

int OperatingSystem::ByteSize() const {
  int total_size = 0;

  // optional string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string arch = 3;
  if (this->arch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arch());
  }

  // optional string machine = 4;
  if (this->machine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machine());
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string vendor = 6;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // optional string vendorVersion = 7;
  if (this->vendorversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendorversion());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatingSystem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperatingSystem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OperatingSystem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperatingSystem::MergeFrom(const OperatingSystem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.arch().size() > 0) {

    arch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  if (from.machine().size() > 0) {

    machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machine_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.vendorversion().size() > 0) {

    vendorversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendorversion_);
  }
}

void OperatingSystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingSystem::CopyFrom(const OperatingSystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystem::IsInitialized() const {

  return true;
}

void OperatingSystem::Swap(OperatingSystem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatingSystem::InternalSwap(OperatingSystem* other) {
  description_.Swap(&other->description_);
  name_.Swap(&other->name_);
  arch_.Swap(&other->arch_);
  machine_.Swap(&other->machine_);
  version_.Swap(&other->version_);
  vendor_.Swap(&other->vendor_);
  vendorversion_.Swap(&other->vendorversion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperatingSystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperatingSystem_descriptor_;
  metadata.reflection = OperatingSystem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatingSystem

// optional string description = 1;
void OperatingSystem::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::description() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.description)
}
 void OperatingSystem::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.description)
}
 void OperatingSystem::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.description)
}
 ::std::string* OperatingSystem::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.description)
}

// optional string name = 2;
void OperatingSystem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::name() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.name)
}
 void OperatingSystem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.name)
}
 void OperatingSystem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.name)
}
 ::std::string* OperatingSystem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.name)
}

// optional string arch = 3;
void OperatingSystem::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::arch() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.arch)
  return arch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.arch)
}
 void OperatingSystem::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.arch)
}
 void OperatingSystem::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.arch)
}
 ::std::string* OperatingSystem::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_arch() {
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.arch)
}

// optional string machine = 4;
void OperatingSystem::clear_machine() {
  machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::machine() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.machine)
  return machine_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_machine(const ::std::string& value) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.machine)
}
 void OperatingSystem::set_machine(const char* value) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.machine)
}
 void OperatingSystem::set_machine(const char* value, size_t size) {
  
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.machine)
}
 ::std::string* OperatingSystem::mutable_machine() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.machine)
  return machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_machine() {
  
  return machine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    
  } else {
    
  }
  machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.machine)
}

// optional string version = 5;
void OperatingSystem::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::version() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.version)
}
 void OperatingSystem::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.version)
}
 void OperatingSystem::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.version)
}
 ::std::string* OperatingSystem::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.version)
}

// optional string vendor = 6;
void OperatingSystem::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::vendor() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.vendor)
  return vendor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.vendor)
}
 void OperatingSystem::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.vendor)
}
 void OperatingSystem::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.vendor)
}
 ::std::string* OperatingSystem::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_vendor() {
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.vendor)
}

// optional string vendorVersion = 7;
void OperatingSystem::clear_vendorversion() {
  vendorversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OperatingSystem::vendorversion() const {
  // @@protoc_insertion_point(field_get:ddam.OperatingSystem.vendorVersion)
  return vendorversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_vendorversion(const ::std::string& value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.OperatingSystem.vendorVersion)
}
 void OperatingSystem::set_vendorversion(const char* value) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.OperatingSystem.vendorVersion)
}
 void OperatingSystem::set_vendorversion(const char* value, size_t size) {
  
  vendorversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.OperatingSystem.vendorVersion)
}
 ::std::string* OperatingSystem::mutable_vendorversion() {
  
  // @@protoc_insertion_point(field_mutable:ddam.OperatingSystem.vendorVersion)
  return vendorversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OperatingSystem::release_vendorversion() {
  
  return vendorversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OperatingSystem::set_allocated_vendorversion(::std::string* vendorversion) {
  if (vendorversion != NULL) {
    
  } else {
    
  }
  vendorversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendorversion);
  // @@protoc_insertion_point(field_set_allocated:ddam.OperatingSystem.vendorVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kOsFieldNumber;
const int Info::kCpusFieldNumber;
const int Info::kNicsFieldNumber;
const int Info::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Info)
}

void Info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  os_ = const_cast< ::ddam::OperatingSystem*>(&::ddam::OperatingSystem::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Info::Info(const Info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Info)
}

void Info::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  os_ = NULL;
  timestamp_ = NULL;
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:ddam.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  if (this != default_instance_) {
    delete os_;
    delete timestamp_;
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_info_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New(::google::protobuf::Arena* arena) const {
  Info* n = new Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Info::Clear() {
  if (GetArenaNoVirtual() == NULL && os_ != NULL) delete os_;
  os_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  cpus_.Clear();
  nics_.Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ddam.OperatingSystem os = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cpus;
        break;
      }

      // repeated .ddam.CPU cpus = 2;
      case 2: {
        if (tag == 18) {
         parse_cpus:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cpus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cpus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cpus;
        if (input->ExpectTag(26)) goto parse_loop_nics;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ddam.Network nics = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_nics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 4;
      case 4: {
        if (tag == 34) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Info)
  // optional .ddam.OperatingSystem os = 1;
  if (this->has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->os_, output);
  }

  // repeated .ddam.CPU cpus = 2;
  for (unsigned int i = 0, n = this->cpus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cpus(i), output);
  }

  // repeated .ddam.Network nics = 3;
  for (unsigned int i = 0, n = this->nics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nics(i), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Info)
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Info)
  // optional .ddam.OperatingSystem os = 1;
  if (this->has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->os_, target);
  }

  // repeated .ddam.CPU cpus = 2;
  for (unsigned int i = 0, n = this->cpus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cpus(i), target);
  }

  // repeated .ddam.Network nics = 3;
  for (unsigned int i = 0, n = this->nics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nics(i), target);
  }

  // optional .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Info)
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  // optional .ddam.OperatingSystem os = 1;
  if (this->has_os()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->os_);
  }

  // optional .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated .ddam.CPU cpus = 2;
  total_size += 1 * this->cpus_size();
  for (int i = 0; i < this->cpus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpus(i));
  }

  // repeated .ddam.Network nics = 3;
  total_size += 1 * this->nics_size();
  for (int i = 0; i < this->nics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nics(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Info>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cpus_.MergeFrom(from.cpus_);
  nics_.MergeFrom(from.nics_);
  if (from.has_os()) {
    mutable_os()->::ddam::OperatingSystem::MergeFrom(from.os());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  std::swap(os_, other->os_);
  cpus_.UnsafeArenaSwap(&other->cpus_);
  nics_.UnsafeArenaSwap(&other->nics_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Info

// optional .ddam.OperatingSystem os = 1;
bool Info::has_os() const {
  return !_is_default_instance_ && os_ != NULL;
}
void Info::clear_os() {
  if (GetArenaNoVirtual() == NULL && os_ != NULL) delete os_;
  os_ = NULL;
}
const ::ddam::OperatingSystem& Info::os() const {
  // @@protoc_insertion_point(field_get:ddam.Info.os)
  return os_ != NULL ? *os_ : *default_instance_->os_;
}
::ddam::OperatingSystem* Info::mutable_os() {
  
  if (os_ == NULL) {
    os_ = new ::ddam::OperatingSystem;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Info.os)
  return os_;
}
::ddam::OperatingSystem* Info::release_os() {
  
  ::ddam::OperatingSystem* temp = os_;
  os_ = NULL;
  return temp;
}
void Info::set_allocated_os(::ddam::OperatingSystem* os) {
  delete os_;
  os_ = os;
  if (os) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Info.os)
}

// repeated .ddam.CPU cpus = 2;
int Info::cpus_size() const {
  return cpus_.size();
}
void Info::clear_cpus() {
  cpus_.Clear();
}
const ::ddam::CPU& Info::cpus(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Info.cpus)
  return cpus_.Get(index);
}
::ddam::CPU* Info::mutable_cpus(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Info.cpus)
  return cpus_.Mutable(index);
}
::ddam::CPU* Info::add_cpus() {
  // @@protoc_insertion_point(field_add:ddam.Info.cpus)
  return cpus_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::CPU >*
Info::mutable_cpus() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Info.cpus)
  return &cpus_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::CPU >&
Info::cpus() const {
  // @@protoc_insertion_point(field_list:ddam.Info.cpus)
  return cpus_;
}

// repeated .ddam.Network nics = 3;
int Info::nics_size() const {
  return nics_.size();
}
void Info::clear_nics() {
  nics_.Clear();
}
const ::ddam::Network& Info::nics(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Info.nics)
  return nics_.Get(index);
}
::ddam::Network* Info::mutable_nics(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Info.nics)
  return nics_.Mutable(index);
}
::ddam::Network* Info::add_nics() {
  // @@protoc_insertion_point(field_add:ddam.Info.nics)
  return nics_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::Network >*
Info::mutable_nics() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Info.nics)
  return &nics_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::Network >&
Info::nics() const {
  // @@protoc_insertion_point(field_list:ddam.Info.nics)
  return nics_;
}

// optional .google.protobuf.Timestamp timestamp = 4;
bool Info::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Info::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Info::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Info.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Info::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Info.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Info::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Info::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Info.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
