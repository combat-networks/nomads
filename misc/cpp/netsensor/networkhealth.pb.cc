// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkhealth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "networkhealth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* NetworkHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkHealth_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_networkhealth_2eproto() {
  protobuf_AddDesc_networkhealth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "networkhealth.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkHealth_descriptor_ = file->message_type(0);
  static const int NetworkHealth_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, subnet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, iplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, networkname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, collector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, interconnectedp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, backhaulp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, totalbandwidthmeasured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, totalbandwidthestimated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, withinbandwidthmeasured_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, withinbandwidthestimated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, creationtime_),
  };
  NetworkHealth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkHealth_descriptor_,
      NetworkHealth::default_instance_,
      NetworkHealth_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetworkHealth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkHealth, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_networkhealth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkHealth_descriptor_, &NetworkHealth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_networkhealth_2eproto() {
  delete NetworkHealth::default_instance_;
  delete NetworkHealth_reflection_;
}

void protobuf_AddDesc_networkhealth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023networkhealth.proto\022\004ddam\032\037google/prot"
    "obuf/timestamp.proto\"\355\002\n\rNetworkHealth\022\016"
    "\n\006subnet\030\001 \001(\t\022\016\n\006ipList\030\002 \003(\t\022\023\n\013networ"
    "kName\030\003 \001(\t\022\021\n\tcollector\030\004 \001(\t\022\017\n\007versio"
    "n\030\005 \001(\t\022\027\n\017interconnectedP\030\006 \001(\r\022\021\n\tback"
    "haulP\030\007 \001(\r\022\r\n\005delay\030\010 \001(\r\022\022\n\nsaturation"
    "\030\t \001(\r\022\036\n\026totalBandwidthMeasured\030\n \001(\r\022\037"
    "\n\027totalBandwidthEstimated\030\013 \001(\r\022\037\n\027withi"
    "nBandwidthMeasured\030\014 \001(\r\022 \n\030withinBandwi"
    "dthEstimated\030\r \001(\r\0220\n\014creationTime\030\016 \001(\013"
    "2\032.google.protobuf.TimestampB+\n\020us.ihmc."
    "aci.ddamB\022NetworkHealthProtoP\001\240\001\001b\006proto"
    "3", 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networkhealth.proto", &protobuf_RegisterTypes);
  NetworkHealth::default_instance_ = new NetworkHealth();
  NetworkHealth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_networkhealth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_networkhealth_2eproto {
  StaticDescriptorInitializer_networkhealth_2eproto() {
    protobuf_AddDesc_networkhealth_2eproto();
  }
} static_descriptor_initializer_networkhealth_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkHealth::kSubnetFieldNumber;
const int NetworkHealth::kIpListFieldNumber;
const int NetworkHealth::kNetworkNameFieldNumber;
const int NetworkHealth::kCollectorFieldNumber;
const int NetworkHealth::kVersionFieldNumber;
const int NetworkHealth::kInterconnectedPFieldNumber;
const int NetworkHealth::kBackhaulPFieldNumber;
const int NetworkHealth::kDelayFieldNumber;
const int NetworkHealth::kSaturationFieldNumber;
const int NetworkHealth::kTotalBandwidthMeasuredFieldNumber;
const int NetworkHealth::kTotalBandwidthEstimatedFieldNumber;
const int NetworkHealth::kWithinBandwidthMeasuredFieldNumber;
const int NetworkHealth::kWithinBandwidthEstimatedFieldNumber;
const int NetworkHealth::kCreationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkHealth::NetworkHealth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.NetworkHealth)
}

void NetworkHealth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  creationtime_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

NetworkHealth::NetworkHealth(const NetworkHealth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.NetworkHealth)
}

void NetworkHealth::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subnet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interconnectedp_ = 0u;
  backhaulp_ = 0u;
  delay_ = 0u;
  saturation_ = 0u;
  totalbandwidthmeasured_ = 0u;
  totalbandwidthestimated_ = 0u;
  withinbandwidthmeasured_ = 0u;
  withinbandwidthestimated_ = 0u;
  creationtime_ = NULL;
}

NetworkHealth::~NetworkHealth() {
  // @@protoc_insertion_point(destructor:ddam.NetworkHealth)
  SharedDtor();
}

void NetworkHealth::SharedDtor() {
  subnet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete creationtime_;
  }
}

void NetworkHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkHealth_descriptor_;
}

const NetworkHealth& NetworkHealth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkhealth_2eproto();
  return *default_instance_;
}

NetworkHealth* NetworkHealth::default_instance_ = NULL;

NetworkHealth* NetworkHealth::New(::google::protobuf::Arena* arena) const {
  NetworkHealth* n = new NetworkHealth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkHealth::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetworkHealth*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(interconnectedp_, delay_);
  subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(saturation_, withinbandwidthestimated_);
  if (GetArenaNoVirtual() == NULL && creationtime_ != NULL) delete creationtime_;
  creationtime_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  iplist_.Clear();
}

bool NetworkHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.NetworkHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string subnet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subnet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subnet().data(), this->subnet().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.NetworkHealth.subnet"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipList;
        break;
      }

      // repeated string ipList = 2;
      case 2: {
        if (tag == 18) {
         parse_ipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iplist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iplist(this->iplist_size() - 1).data(),
            this->iplist(this->iplist_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.NetworkHealth.ipList"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipList;
        if (input->ExpectTag(26)) goto parse_networkName;
        break;
      }

      // optional string networkName = 3;
      case 3: {
        if (tag == 26) {
         parse_networkName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networkname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networkname().data(), this->networkname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.NetworkHealth.networkName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_collector;
        break;
      }

      // optional string collector = 4;
      case 4: {
        if (tag == 34) {
         parse_collector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collector().data(), this->collector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.NetworkHealth.collector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (tag == 42) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.NetworkHealth.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_interconnectedP;
        break;
      }

      // optional uint32 interconnectedP = 6;
      case 6: {
        if (tag == 48) {
         parse_interconnectedP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interconnectedp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_backhaulP;
        break;
      }

      // optional uint32 backhaulP = 7;
      case 7: {
        if (tag == 56) {
         parse_backhaulP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backhaulp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 8;
      case 8: {
        if (tag == 64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_saturation;
        break;
      }

      // optional uint32 saturation = 9;
      case 9: {
        if (tag == 72) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &saturation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_totalBandwidthMeasured;
        break;
      }

      // optional uint32 totalBandwidthMeasured = 10;
      case 10: {
        if (tag == 80) {
         parse_totalBandwidthMeasured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbandwidthmeasured_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_totalBandwidthEstimated;
        break;
      }

      // optional uint32 totalBandwidthEstimated = 11;
      case 11: {
        if (tag == 88) {
         parse_totalBandwidthEstimated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbandwidthestimated_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_withinBandwidthMeasured;
        break;
      }

      // optional uint32 withinBandwidthMeasured = 12;
      case 12: {
        if (tag == 96) {
         parse_withinBandwidthMeasured:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &withinbandwidthmeasured_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_withinBandwidthEstimated;
        break;
      }

      // optional uint32 withinBandwidthEstimated = 13;
      case 13: {
        if (tag == 104) {
         parse_withinBandwidthEstimated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &withinbandwidthestimated_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_creationTime;
        break;
      }

      // optional .google.protobuf.Timestamp creationTime = 14;
      case 14: {
        if (tag == 114) {
         parse_creationTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creationtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.NetworkHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.NetworkHealth)
  return false;
#undef DO_
}

void NetworkHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.NetworkHealth)
  // optional string subnet = 1;
  if (this->subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnet().data(), this->subnet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.subnet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subnet(), output);
  }

  // repeated string ipList = 2;
  for (int i = 0; i < this->iplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplist(i).data(), this->iplist(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.ipList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->iplist(i), output);
  }

  // optional string networkName = 3;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), this->networkname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.networkName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->networkname(), output);
  }

  // optional string collector = 4;
  if (this->collector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collector().data(), this->collector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.collector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->collector(), output);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // optional uint32 interconnectedP = 6;
  if (this->interconnectedp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interconnectedp(), output);
  }

  // optional uint32 backhaulP = 7;
  if (this->backhaulp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->backhaulp(), output);
  }

  // optional uint32 delay = 8;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->delay(), output);
  }

  // optional uint32 saturation = 9;
  if (this->saturation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->saturation(), output);
  }

  // optional uint32 totalBandwidthMeasured = 10;
  if (this->totalbandwidthmeasured() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->totalbandwidthmeasured(), output);
  }

  // optional uint32 totalBandwidthEstimated = 11;
  if (this->totalbandwidthestimated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->totalbandwidthestimated(), output);
  }

  // optional uint32 withinBandwidthMeasured = 12;
  if (this->withinbandwidthmeasured() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->withinbandwidthmeasured(), output);
  }

  // optional uint32 withinBandwidthEstimated = 13;
  if (this->withinbandwidthestimated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->withinbandwidthestimated(), output);
  }

  // optional .google.protobuf.Timestamp creationTime = 14;
  if (this->has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->creationtime_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.NetworkHealth)
}

::google::protobuf::uint8* NetworkHealth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.NetworkHealth)
  // optional string subnet = 1;
  if (this->subnet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subnet().data(), this->subnet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.subnet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subnet(), target);
  }

  // repeated string ipList = 2;
  for (int i = 0; i < this->iplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplist(i).data(), this->iplist(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.ipList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->iplist(i), target);
  }

  // optional string networkName = 3;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), this->networkname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.networkName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->networkname(), target);
  }

  // optional string collector = 4;
  if (this->collector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collector().data(), this->collector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.collector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->collector(), target);
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.NetworkHealth.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional uint32 interconnectedP = 6;
  if (this->interconnectedp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interconnectedp(), target);
  }

  // optional uint32 backhaulP = 7;
  if (this->backhaulp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->backhaulp(), target);
  }

  // optional uint32 delay = 8;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->delay(), target);
  }

  // optional uint32 saturation = 9;
  if (this->saturation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->saturation(), target);
  }

  // optional uint32 totalBandwidthMeasured = 10;
  if (this->totalbandwidthmeasured() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->totalbandwidthmeasured(), target);
  }

  // optional uint32 totalBandwidthEstimated = 11;
  if (this->totalbandwidthestimated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->totalbandwidthestimated(), target);
  }

  // optional uint32 withinBandwidthMeasured = 12;
  if (this->withinbandwidthmeasured() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->withinbandwidthmeasured(), target);
  }

  // optional uint32 withinBandwidthEstimated = 13;
  if (this->withinbandwidthestimated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->withinbandwidthestimated(), target);
  }

  // optional .google.protobuf.Timestamp creationTime = 14;
  if (this->has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->creationtime_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.NetworkHealth)
  return target;
}

int NetworkHealth::ByteSize() const {
  int total_size = 0;

  // optional string subnet = 1;
  if (this->subnet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnet());
  }

  // optional string networkName = 3;
  if (this->networkname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networkname());
  }

  // optional string collector = 4;
  if (this->collector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collector());
  }

  // optional string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional uint32 interconnectedP = 6;
  if (this->interconnectedp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interconnectedp());
  }

  // optional uint32 backhaulP = 7;
  if (this->backhaulp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->backhaulp());
  }

  // optional uint32 delay = 8;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delay());
  }

  // optional uint32 saturation = 9;
  if (this->saturation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->saturation());
  }

  // optional uint32 totalBandwidthMeasured = 10;
  if (this->totalbandwidthmeasured() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbandwidthmeasured());
  }

  // optional uint32 totalBandwidthEstimated = 11;
  if (this->totalbandwidthestimated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalbandwidthestimated());
  }

  // optional uint32 withinBandwidthMeasured = 12;
  if (this->withinbandwidthmeasured() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withinbandwidthmeasured());
  }

  // optional uint32 withinBandwidthEstimated = 13;
  if (this->withinbandwidthestimated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->withinbandwidthestimated());
  }

  // optional .google.protobuf.Timestamp creationTime = 14;
  if (this->has_creationtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creationtime_);
  }

  // repeated string ipList = 2;
  total_size += 1 * this->iplist_size();
  for (int i = 0; i < this->iplist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iplist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkHealth::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkHealth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkHealth>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkHealth::MergeFrom(const NetworkHealth& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  iplist_.MergeFrom(from.iplist_);
  if (from.subnet().size() > 0) {

    subnet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnet_);
  }
  if (from.networkname().size() > 0) {

    networkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networkname_);
  }
  if (from.collector().size() > 0) {

    collector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collector_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.interconnectedp() != 0) {
    set_interconnectedp(from.interconnectedp());
  }
  if (from.backhaulp() != 0) {
    set_backhaulp(from.backhaulp());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
  if (from.saturation() != 0) {
    set_saturation(from.saturation());
  }
  if (from.totalbandwidthmeasured() != 0) {
    set_totalbandwidthmeasured(from.totalbandwidthmeasured());
  }
  if (from.totalbandwidthestimated() != 0) {
    set_totalbandwidthestimated(from.totalbandwidthestimated());
  }
  if (from.withinbandwidthmeasured() != 0) {
    set_withinbandwidthmeasured(from.withinbandwidthmeasured());
  }
  if (from.withinbandwidthestimated() != 0) {
    set_withinbandwidthestimated(from.withinbandwidthestimated());
  }
  if (from.has_creationtime()) {
    mutable_creationtime()->::google::protobuf::Timestamp::MergeFrom(from.creationtime());
  }
}

void NetworkHealth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkHealth::CopyFrom(const NetworkHealth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkHealth::IsInitialized() const {

  return true;
}

void NetworkHealth::Swap(NetworkHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkHealth::InternalSwap(NetworkHealth* other) {
  subnet_.Swap(&other->subnet_);
  iplist_.UnsafeArenaSwap(&other->iplist_);
  networkname_.Swap(&other->networkname_);
  collector_.Swap(&other->collector_);
  version_.Swap(&other->version_);
  std::swap(interconnectedp_, other->interconnectedp_);
  std::swap(backhaulp_, other->backhaulp_);
  std::swap(delay_, other->delay_);
  std::swap(saturation_, other->saturation_);
  std::swap(totalbandwidthmeasured_, other->totalbandwidthmeasured_);
  std::swap(totalbandwidthestimated_, other->totalbandwidthestimated_);
  std::swap(withinbandwidthmeasured_, other->withinbandwidthmeasured_);
  std::swap(withinbandwidthestimated_, other->withinbandwidthestimated_);
  std::swap(creationtime_, other->creationtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkHealth_descriptor_;
  metadata.reflection = NetworkHealth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkHealth

// optional string subnet = 1;
void NetworkHealth::clear_subnet() {
  subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkHealth::subnet() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.subnet)
  return subnet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_subnet(const ::std::string& value) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.subnet)
}
 void NetworkHealth::set_subnet(const char* value) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.subnet)
}
 void NetworkHealth::set_subnet(const char* value, size_t size) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.subnet)
}
 ::std::string* NetworkHealth::mutable_subnet() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.subnet)
  return subnet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkHealth::release_subnet() {
  
  return subnet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_allocated_subnet(::std::string* subnet) {
  if (subnet != NULL) {
    
  } else {
    
  }
  subnet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnet);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.subnet)
}

// repeated string ipList = 2;
int NetworkHealth::iplist_size() const {
  return iplist_.size();
}
void NetworkHealth::clear_iplist() {
  iplist_.Clear();
}
 const ::std::string& NetworkHealth::iplist(int index) const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.ipList)
  return iplist_.Get(index);
}
 ::std::string* NetworkHealth::mutable_iplist(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.ipList)
  return iplist_.Mutable(index);
}
 void NetworkHealth::set_iplist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.ipList)
  iplist_.Mutable(index)->assign(value);
}
 void NetworkHealth::set_iplist(int index, const char* value) {
  iplist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.ipList)
}
 void NetworkHealth::set_iplist(int index, const char* value, size_t size) {
  iplist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.ipList)
}
 ::std::string* NetworkHealth::add_iplist() {
  return iplist_.Add();
}
 void NetworkHealth::add_iplist(const ::std::string& value) {
  iplist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ddam.NetworkHealth.ipList)
}
 void NetworkHealth::add_iplist(const char* value) {
  iplist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ddam.NetworkHealth.ipList)
}
 void NetworkHealth::add_iplist(const char* value, size_t size) {
  iplist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ddam.NetworkHealth.ipList)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkHealth::iplist() const {
  // @@protoc_insertion_point(field_list:ddam.NetworkHealth.ipList)
  return iplist_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkHealth::mutable_iplist() {
  // @@protoc_insertion_point(field_mutable_list:ddam.NetworkHealth.ipList)
  return &iplist_;
}

// optional string networkName = 3;
void NetworkHealth::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkHealth::networkname() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.networkName)
  return networkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.networkName)
}
 void NetworkHealth::set_networkname(const char* value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.networkName)
}
 void NetworkHealth::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.networkName)
}
 ::std::string* NetworkHealth::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkHealth::release_networkname() {
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.networkName)
}

// optional string collector = 4;
void NetworkHealth::clear_collector() {
  collector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkHealth::collector() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.collector)
  return collector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_collector(const ::std::string& value) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.collector)
}
 void NetworkHealth::set_collector(const char* value) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.collector)
}
 void NetworkHealth::set_collector(const char* value, size_t size) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.collector)
}
 ::std::string* NetworkHealth::mutable_collector() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.collector)
  return collector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkHealth::release_collector() {
  
  return collector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_allocated_collector(::std::string* collector) {
  if (collector != NULL) {
    
  } else {
    
  }
  collector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collector);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.collector)
}

// optional string version = 5;
void NetworkHealth::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkHealth::version() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.version)
}
 void NetworkHealth::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.version)
}
 void NetworkHealth::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.version)
}
 ::std::string* NetworkHealth::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkHealth::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkHealth::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.version)
}

// optional uint32 interconnectedP = 6;
void NetworkHealth::clear_interconnectedp() {
  interconnectedp_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::interconnectedp() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.interconnectedP)
  return interconnectedp_;
}
 void NetworkHealth::set_interconnectedp(::google::protobuf::uint32 value) {
  
  interconnectedp_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.interconnectedP)
}

// optional uint32 backhaulP = 7;
void NetworkHealth::clear_backhaulp() {
  backhaulp_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::backhaulp() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.backhaulP)
  return backhaulp_;
}
 void NetworkHealth::set_backhaulp(::google::protobuf::uint32 value) {
  
  backhaulp_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.backhaulP)
}

// optional uint32 delay = 8;
void NetworkHealth::clear_delay() {
  delay_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::delay() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.delay)
  return delay_;
}
 void NetworkHealth::set_delay(::google::protobuf::uint32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.delay)
}

// optional uint32 saturation = 9;
void NetworkHealth::clear_saturation() {
  saturation_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::saturation() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.saturation)
  return saturation_;
}
 void NetworkHealth::set_saturation(::google::protobuf::uint32 value) {
  
  saturation_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.saturation)
}

// optional uint32 totalBandwidthMeasured = 10;
void NetworkHealth::clear_totalbandwidthmeasured() {
  totalbandwidthmeasured_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::totalbandwidthmeasured() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.totalBandwidthMeasured)
  return totalbandwidthmeasured_;
}
 void NetworkHealth::set_totalbandwidthmeasured(::google::protobuf::uint32 value) {
  
  totalbandwidthmeasured_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.totalBandwidthMeasured)
}

// optional uint32 totalBandwidthEstimated = 11;
void NetworkHealth::clear_totalbandwidthestimated() {
  totalbandwidthestimated_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::totalbandwidthestimated() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.totalBandwidthEstimated)
  return totalbandwidthestimated_;
}
 void NetworkHealth::set_totalbandwidthestimated(::google::protobuf::uint32 value) {
  
  totalbandwidthestimated_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.totalBandwidthEstimated)
}

// optional uint32 withinBandwidthMeasured = 12;
void NetworkHealth::clear_withinbandwidthmeasured() {
  withinbandwidthmeasured_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::withinbandwidthmeasured() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.withinBandwidthMeasured)
  return withinbandwidthmeasured_;
}
 void NetworkHealth::set_withinbandwidthmeasured(::google::protobuf::uint32 value) {
  
  withinbandwidthmeasured_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.withinBandwidthMeasured)
}

// optional uint32 withinBandwidthEstimated = 13;
void NetworkHealth::clear_withinbandwidthestimated() {
  withinbandwidthestimated_ = 0u;
}
 ::google::protobuf::uint32 NetworkHealth::withinbandwidthestimated() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.withinBandwidthEstimated)
  return withinbandwidthestimated_;
}
 void NetworkHealth::set_withinbandwidthestimated(::google::protobuf::uint32 value) {
  
  withinbandwidthestimated_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.withinBandwidthEstimated)
}

// optional .google.protobuf.Timestamp creationTime = 14;
bool NetworkHealth::has_creationtime() const {
  return !_is_default_instance_ && creationtime_ != NULL;
}
void NetworkHealth::clear_creationtime() {
  if (GetArenaNoVirtual() == NULL && creationtime_ != NULL) delete creationtime_;
  creationtime_ = NULL;
}
const ::google::protobuf::Timestamp& NetworkHealth::creationtime() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.creationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
::google::protobuf::Timestamp* NetworkHealth::mutable_creationtime() {
  
  if (creationtime_ == NULL) {
    creationtime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.creationTime)
  return creationtime_;
}
::google::protobuf::Timestamp* NetworkHealth::release_creationtime() {
  
  ::google::protobuf::Timestamp* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
void NetworkHealth::set_allocated_creationtime(::google::protobuf::Timestamp* creationtime) {
  delete creationtime_;
  if (creationtime != NULL && creationtime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_creationtime = new ::google::protobuf::Timestamp;
    new_creationtime->CopyFrom(*creationtime);
    creationtime = new_creationtime;
  }
  creationtime_ = creationtime;
  if (creationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.creationTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
