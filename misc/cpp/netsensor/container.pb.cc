// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {

namespace {

const ::google::protobuf::Descriptor* NetSensorContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetSensorContainer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_container_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_container_2eproto() {
  protobuf_AddDesc_container_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "container.proto");
  GOOGLE_CHECK(file != NULL);
  NetSensorContainer_descriptor_ = file->message_type(0);
  static const int NetSensorContainer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, trafficbyinterfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, topologies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, netproxyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, icmpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, timestamp_),
  };
  NetSensorContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetSensorContainer_descriptor_,
      NetSensorContainer::internal_default_instance(),
      NetSensorContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetSensorContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetSensorContainer, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_container_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetSensorContainer_descriptor_, NetSensorContainer::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_container_2eproto() {
  NetSensorContainer_default_instance_.Shutdown();
  delete NetSensorContainer_reflection_;
}

void protobuf_InitDefaults_container_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::netsensor::protobuf_InitDefaults_traffic_2eproto();
  ::netsensor::protobuf_InitDefaults_topology_2eproto();
  ::netsensor::protobuf_InitDefaults_netproxyinfo_2eproto();
  ::netsensor::protobuf_InitDefaults_datatype_2eproto();
  ::netsensor::protobuf_InitDefaults_icmpinfo_2eproto();
  NetSensorContainer_default_instance_.DefaultConstruct();
  NetSensorContainer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_container_2eproto_once_);
void protobuf_InitDefaults_container_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_container_2eproto_once_,
                 &protobuf_InitDefaults_container_2eproto_impl);
}
void protobuf_AddDesc_container_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_container_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017container.proto\022\tnetsensor\032\037google/pro"
    "tobuf/timestamp.proto\032\rtraffic.proto\032\016to"
    "pology.proto\032\022netproxyinfo.proto\032\016dataty"
    "pe.proto\032\016icmpinfo.proto\"\263\002\n\022NetSensorCo"
    "ntainer\022%\n\010dataType\030\001 \001(\0162\023.netsensor.Da"
    "taType\022:\n\023trafficByInterfaces\030\002 \003(\0132\035.ne"
    "tsensor.TrafficByInterface\022\'\n\ntopologies"
    "\030\003 \003(\0132\023.netsensor.Topology\022-\n\014netProxyI"
    "nfo\030\004 \001(\0132\027.netsensor.NetProxyInfo\0223\n\010ic"
    "mpInfo\030\005 \003(\0132!.netsensor.ICMPPacketsByIn"
    "terface\022-\n\ttimestamp\030\006 \001(\0132\032.google.prot"
    "obuf.TimestampBI\n\036us.ihmc.ddam.sensors.n"
    "etsensorB\027NetSensorContainerProtoP\001Z\tnet"
    "sensor\240\001\001b\006proto3", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "container.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::netsensor::protobuf_AddDesc_traffic_2eproto();
  ::netsensor::protobuf_AddDesc_topology_2eproto();
  ::netsensor::protobuf_AddDesc_netproxyinfo_2eproto();
  ::netsensor::protobuf_AddDesc_datatype_2eproto();
  ::netsensor::protobuf_AddDesc_icmpinfo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_container_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_container_2eproto_once_);
void protobuf_AddDesc_container_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_container_2eproto_once_,
                 &protobuf_AddDesc_container_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_container_2eproto {
  StaticDescriptorInitializer_container_2eproto() {
    protobuf_AddDesc_container_2eproto();
  }
} static_descriptor_initializer_container_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetSensorContainer::kDataTypeFieldNumber;
const int NetSensorContainer::kTrafficByInterfacesFieldNumber;
const int NetSensorContainer::kTopologiesFieldNumber;
const int NetSensorContainer::kNetProxyInfoFieldNumber;
const int NetSensorContainer::kIcmpInfoFieldNumber;
const int NetSensorContainer::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetSensorContainer::NetSensorContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_container_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.NetSensorContainer)
}

void NetSensorContainer::InitAsDefaultInstance() {
  netproxyinfo_ = const_cast< ::netsensor::NetProxyInfo*>(
      ::netsensor::NetProxyInfo::internal_default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

NetSensorContainer::NetSensorContainer(const NetSensorContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.NetSensorContainer)
}

void NetSensorContainer::SharedCtor() {
  netproxyinfo_ = NULL;
  timestamp_ = NULL;
  datatype_ = 0;
  _cached_size_ = 0;
}

NetSensorContainer::~NetSensorContainer() {
  // @@protoc_insertion_point(destructor:netsensor.NetSensorContainer)
  SharedDtor();
}

void NetSensorContainer::SharedDtor() {
  if (this != &NetSensorContainer_default_instance_.get()) {
    delete netproxyinfo_;
    delete timestamp_;
  }
}

void NetSensorContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetSensorContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetSensorContainer_descriptor_;
}

const NetSensorContainer& NetSensorContainer::default_instance() {
  protobuf_InitDefaults_container_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetSensorContainer> NetSensorContainer_default_instance_;

NetSensorContainer* NetSensorContainer::New(::google::protobuf::Arena* arena) const {
  NetSensorContainer* n = new NetSensorContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetSensorContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.NetSensorContainer)
  datatype_ = 0;
  if (GetArenaNoVirtual() == NULL && netproxyinfo_ != NULL) delete netproxyinfo_;
  netproxyinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  trafficbyinterfaces_.Clear();
  topologies_.Clear();
  icmpinfo_.Clear();
}

bool NetSensorContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.NetSensorContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netsensor.DataType dataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::netsensor::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trafficByInterfaces;
        break;
      }

      // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
      case 2: {
        if (tag == 18) {
         parse_trafficByInterfaces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trafficByInterfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trafficbyinterfaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_trafficByInterfaces;
        if (input->ExpectTag(26)) goto parse_loop_topologies;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .netsensor.Topology topologies = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_topologies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topologies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_topologies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_netProxyInfo;
        break;
      }

      // optional .netsensor.NetProxyInfo netProxyInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_netProxyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netproxyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_icmpInfo;
        break;
      }

      // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_icmpInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_icmpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_icmpinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_icmpInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.NetSensorContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.NetSensorContainer)
  return false;
#undef DO_
}

void NetSensorContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.NetSensorContainer)
  // optional .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  for (unsigned int i = 0, n = this->trafficbyinterfaces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trafficbyinterfaces(i), output);
  }

  // repeated .netsensor.Topology topologies = 3;
  for (unsigned int i = 0, n = this->topologies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topologies(i), output);
  }

  // optional .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->netproxyinfo_, output);
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  for (unsigned int i = 0, n = this->icmpinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->icmpinfo(i), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.NetSensorContainer)
}

::google::protobuf::uint8* NetSensorContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.NetSensorContainer)
  // optional .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  for (unsigned int i = 0, n = this->trafficbyinterfaces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trafficbyinterfaces(i), false, target);
  }

  // repeated .netsensor.Topology topologies = 3;
  for (unsigned int i = 0, n = this->topologies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->topologies(i), false, target);
  }

  // optional .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->netproxyinfo_, false, target);
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  for (unsigned int i = 0, n = this->icmpinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->icmpinfo(i), false, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.NetSensorContainer)
  return target;
}

size_t NetSensorContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.NetSensorContainer)
  size_t total_size = 0;

  // optional .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  // optional .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->netproxyinfo_);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  {
    unsigned int count = this->trafficbyinterfaces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trafficbyinterfaces(i));
    }
  }

  // repeated .netsensor.Topology topologies = 3;
  {
    unsigned int count = this->topologies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topologies(i));
    }
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  {
    unsigned int count = this->icmpinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icmpinfo(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetSensorContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.NetSensorContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetSensorContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetSensorContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.NetSensorContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.NetSensorContainer)
    UnsafeMergeFrom(*source);
  }
}

void NetSensorContainer::MergeFrom(const NetSensorContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.NetSensorContainer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetSensorContainer::UnsafeMergeFrom(const NetSensorContainer& from) {
  GOOGLE_DCHECK(&from != this);
  trafficbyinterfaces_.MergeFrom(from.trafficbyinterfaces_);
  topologies_.MergeFrom(from.topologies_);
  icmpinfo_.MergeFrom(from.icmpinfo_);
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.has_netproxyinfo()) {
    mutable_netproxyinfo()->::netsensor::NetProxyInfo::MergeFrom(from.netproxyinfo());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void NetSensorContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.NetSensorContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetSensorContainer::CopyFrom(const NetSensorContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.NetSensorContainer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetSensorContainer::IsInitialized() const {

  return true;
}

void NetSensorContainer::Swap(NetSensorContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetSensorContainer::InternalSwap(NetSensorContainer* other) {
  std::swap(datatype_, other->datatype_);
  trafficbyinterfaces_.UnsafeArenaSwap(&other->trafficbyinterfaces_);
  topologies_.UnsafeArenaSwap(&other->topologies_);
  std::swap(netproxyinfo_, other->netproxyinfo_);
  icmpinfo_.UnsafeArenaSwap(&other->icmpinfo_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetSensorContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetSensorContainer_descriptor_;
  metadata.reflection = NetSensorContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetSensorContainer

// optional .netsensor.DataType dataType = 1;
void NetSensorContainer::clear_datatype() {
  datatype_ = 0;
}
::netsensor::DataType NetSensorContainer::datatype() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.dataType)
  return static_cast< ::netsensor::DataType >(datatype_);
}
void NetSensorContainer::set_datatype(::netsensor::DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:netsensor.NetSensorContainer.dataType)
}

// repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
int NetSensorContainer::trafficbyinterfaces_size() const {
  return trafficbyinterfaces_.size();
}
void NetSensorContainer::clear_trafficbyinterfaces() {
  trafficbyinterfaces_.Clear();
}
const ::netsensor::TrafficByInterface& NetSensorContainer::trafficbyinterfaces(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Get(index);
}
::netsensor::TrafficByInterface* NetSensorContainer::mutable_trafficbyinterfaces(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Mutable(index);
}
::netsensor::TrafficByInterface* NetSensorContainer::add_trafficbyinterfaces() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >*
NetSensorContainer::mutable_trafficbyinterfaces() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.trafficByInterfaces)
  return &trafficbyinterfaces_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >&
NetSensorContainer::trafficbyinterfaces() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_;
}

// repeated .netsensor.Topology topologies = 3;
int NetSensorContainer::topologies_size() const {
  return topologies_.size();
}
void NetSensorContainer::clear_topologies() {
  topologies_.Clear();
}
const ::netsensor::Topology& NetSensorContainer::topologies(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.topologies)
  return topologies_.Get(index);
}
::netsensor::Topology* NetSensorContainer::mutable_topologies(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.topologies)
  return topologies_.Mutable(index);
}
::netsensor::Topology* NetSensorContainer::add_topologies() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.topologies)
  return topologies_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Topology >*
NetSensorContainer::mutable_topologies() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.topologies)
  return &topologies_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Topology >&
NetSensorContainer::topologies() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.topologies)
  return topologies_;
}

// optional .netsensor.NetProxyInfo netProxyInfo = 4;
bool NetSensorContainer::has_netproxyinfo() const {
  return this != internal_default_instance() && netproxyinfo_ != NULL;
}
void NetSensorContainer::clear_netproxyinfo() {
  if (GetArenaNoVirtual() == NULL && netproxyinfo_ != NULL) delete netproxyinfo_;
  netproxyinfo_ = NULL;
}
const ::netsensor::NetProxyInfo& NetSensorContainer::netproxyinfo() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.netProxyInfo)
  return netproxyinfo_ != NULL ? *netproxyinfo_
                         : *::netsensor::NetProxyInfo::internal_default_instance();
}
::netsensor::NetProxyInfo* NetSensorContainer::mutable_netproxyinfo() {
  
  if (netproxyinfo_ == NULL) {
    netproxyinfo_ = new ::netsensor::NetProxyInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.netProxyInfo)
  return netproxyinfo_;
}
::netsensor::NetProxyInfo* NetSensorContainer::release_netproxyinfo() {
  // @@protoc_insertion_point(field_release:netsensor.NetSensorContainer.netProxyInfo)
  
  ::netsensor::NetProxyInfo* temp = netproxyinfo_;
  netproxyinfo_ = NULL;
  return temp;
}
void NetSensorContainer::set_allocated_netproxyinfo(::netsensor::NetProxyInfo* netproxyinfo) {
  delete netproxyinfo_;
  netproxyinfo_ = netproxyinfo;
  if (netproxyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetSensorContainer.netProxyInfo)
}

// repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
int NetSensorContainer::icmpinfo_size() const {
  return icmpinfo_.size();
}
void NetSensorContainer::clear_icmpinfo() {
  icmpinfo_.Clear();
}
const ::netsensor::ICMPPacketsByInterface& NetSensorContainer::icmpinfo(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Get(index);
}
::netsensor::ICMPPacketsByInterface* NetSensorContainer::mutable_icmpinfo(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Mutable(index);
}
::netsensor::ICMPPacketsByInterface* NetSensorContainer::add_icmpinfo() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >*
NetSensorContainer::mutable_icmpinfo() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.icmpInfo)
  return &icmpinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >&
NetSensorContainer::icmpinfo() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_;
}

// optional .google.protobuf.Timestamp timestamp = 6;
bool NetSensorContainer::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void NetSensorContainer::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& NetSensorContainer::timestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* NetSensorContainer::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* NetSensorContainer::release_timestamp() {
  // @@protoc_insertion_point(field_release:netsensor.NetSensorContainer.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void NetSensorContainer::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetSensorContainer.timestamp)
}

inline const NetSensorContainer* NetSensorContainer::internal_default_instance() {
  return &NetSensorContainer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
