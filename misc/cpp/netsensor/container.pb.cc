// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#include "container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_icmpinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_icmpinfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ICMPPacketsByInterface;
}  // namespace protobuf_icmpinfo_2eproto
namespace protobuf_netproxyinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_netproxyinfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NetProxyInfo;
}  // namespace protobuf_netproxyinfo_2eproto
namespace protobuf_topology_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_topology_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Topology;
}  // namespace protobuf_topology_2eproto
namespace protobuf_traffic_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficByInterface;
}  // namespace protobuf_traffic_2eproto
namespace netsensor {
class NetSensorContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetSensorContainer>
      _instance;
} _NetSensorContainer_default_instance_;
}  // namespace netsensor
namespace protobuf_container_2eproto {
static void InitDefaultsNetSensorContainer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_NetSensorContainer_default_instance_;
    new (ptr) ::netsensor::NetSensorContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::NetSensorContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_NetSensorContainer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsNetSensorContainer}, {
      &protobuf_traffic_2eproto::scc_info_TrafficByInterface.base,
      &protobuf_topology_2eproto::scc_info_Topology.base,
      &protobuf_netproxyinfo_2eproto::scc_info_NetProxyInfo.base,
      &protobuf_icmpinfo_2eproto::scc_info_ICMPPacketsByInterface.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetSensorContainer.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, trafficbyinterfaces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, topologies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, netproxyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, icmpinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetSensorContainer, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::netsensor::NetSensorContainer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_NetSensorContainer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "container.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017container.proto\022\tnetsensor\032\037google/pro"
      "tobuf/timestamp.proto\032\rtraffic.proto\032\016to"
      "pology.proto\032\022netproxyinfo.proto\032\016dataty"
      "pe.proto\032\016icmpinfo.proto\"\263\002\n\022NetSensorCo"
      "ntainer\022%\n\010dataType\030\001 \001(\0162\023.netsensor.Da"
      "taType\022:\n\023trafficByInterfaces\030\002 \003(\0132\035.ne"
      "tsensor.TrafficByInterface\022\'\n\ntopologies"
      "\030\003 \003(\0132\023.netsensor.Topology\022-\n\014netProxyI"
      "nfo\030\004 \001(\0132\027.netsensor.NetProxyInfo\0223\n\010ic"
      "mpInfo\030\005 \003(\0132!.netsensor.ICMPPacketsByIn"
      "terface\022-\n\ttimestamp\030\006 \001(\0132\032.google.prot"
      "obuf.TimestampBI\n\036us.ihmc.ddam.sensors.n"
      "etsensorB\027NetSensorContainerProtoP\001Z\tnet"
      "sensor\240\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "container.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_traffic_2eproto::AddDescriptors();
  ::protobuf_topology_2eproto::AddDescriptors();
  ::protobuf_netproxyinfo_2eproto::AddDescriptors();
  ::protobuf_datatype_2eproto::AddDescriptors();
  ::protobuf_icmpinfo_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_container_2eproto
namespace netsensor {

// ===================================================================

void NetSensorContainer::InitAsDefaultInstance() {
  ::netsensor::_NetSensorContainer_default_instance_._instance.get_mutable()->netproxyinfo_ = const_cast< ::netsensor::NetProxyInfo*>(
      ::netsensor::NetProxyInfo::internal_default_instance());
  ::netsensor::_NetSensorContainer_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void NetSensorContainer::clear_trafficbyinterfaces() {
  trafficbyinterfaces_.Clear();
}
void NetSensorContainer::clear_topologies() {
  topologies_.Clear();
}
void NetSensorContainer::clear_netproxyinfo() {
  if (GetArenaNoVirtual() == NULL && netproxyinfo_ != NULL) {
    delete netproxyinfo_;
  }
  netproxyinfo_ = NULL;
}
void NetSensorContainer::clear_icmpinfo() {
  icmpinfo_.Clear();
}
void NetSensorContainer::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetSensorContainer::kDataTypeFieldNumber;
const int NetSensorContainer::kTrafficByInterfacesFieldNumber;
const int NetSensorContainer::kTopologiesFieldNumber;
const int NetSensorContainer::kNetProxyInfoFieldNumber;
const int NetSensorContainer::kIcmpInfoFieldNumber;
const int NetSensorContainer::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetSensorContainer::NetSensorContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_container_2eproto::scc_info_NetSensorContainer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.NetSensorContainer)
}
NetSensorContainer::NetSensorContainer(const NetSensorContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trafficbyinterfaces_(from.trafficbyinterfaces_),
      topologies_(from.topologies_),
      icmpinfo_(from.icmpinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_netproxyinfo()) {
    netproxyinfo_ = new ::netsensor::NetProxyInfo(*from.netproxyinfo_);
  } else {
    netproxyinfo_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  datatype_ = from.datatype_;
  // @@protoc_insertion_point(copy_constructor:netsensor.NetSensorContainer)
}

void NetSensorContainer::SharedCtor() {
  ::memset(&netproxyinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datatype_) -
      reinterpret_cast<char*>(&netproxyinfo_)) + sizeof(datatype_));
}

NetSensorContainer::~NetSensorContainer() {
  // @@protoc_insertion_point(destructor:netsensor.NetSensorContainer)
  SharedDtor();
}

void NetSensorContainer::SharedDtor() {
  if (this != internal_default_instance()) delete netproxyinfo_;
  if (this != internal_default_instance()) delete timestamp_;
}

void NetSensorContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetSensorContainer::descriptor() {
  ::protobuf_container_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_container_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetSensorContainer& NetSensorContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_container_2eproto::scc_info_NetSensorContainer.base);
  return *internal_default_instance();
}


void NetSensorContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.NetSensorContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficbyinterfaces_.Clear();
  topologies_.Clear();
  icmpinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && netproxyinfo_ != NULL) {
    delete netproxyinfo_;
  }
  netproxyinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  datatype_ = 0;
  _internal_metadata_.Clear();
}

bool NetSensorContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.NetSensorContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netsensor.DataType dataType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::netsensor::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trafficbyinterfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Topology topologies = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_topologies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.NetProxyInfo netProxyInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_netproxyinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_icmpinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.NetSensorContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.NetSensorContainer)
  return false;
#undef DO_
}

void NetSensorContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.NetSensorContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficbyinterfaces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trafficbyinterfaces(static_cast<int>(i)),
      output);
  }

  // repeated .netsensor.Topology topologies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topologies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->topologies(static_cast<int>(i)),
      output);
  }

  // .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_netproxyinfo(), output);
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->icmpinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->icmpinfo(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.NetSensorContainer)
}

::google::protobuf::uint8* NetSensorContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.NetSensorContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficbyinterfaces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trafficbyinterfaces(static_cast<int>(i)), deterministic, target);
  }

  // repeated .netsensor.Topology topologies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topologies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->topologies(static_cast<int>(i)), deterministic, target);
  }

  // .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_netproxyinfo(), deterministic, target);
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->icmpinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->icmpinfo(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_timestamp(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.NetSensorContainer)
  return target;
}

size_t NetSensorContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.NetSensorContainer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trafficbyinterfaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trafficbyinterfaces(static_cast<int>(i)));
    }
  }

  // repeated .netsensor.Topology topologies = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->topologies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->topologies(static_cast<int>(i)));
    }
  }

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->icmpinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->icmpinfo(static_cast<int>(i)));
    }
  }

  // .netsensor.NetProxyInfo netProxyInfo = 4;
  if (this->has_netproxyinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *netproxyinfo_);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .netsensor.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetSensorContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.NetSensorContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const NetSensorContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetSensorContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.NetSensorContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.NetSensorContainer)
    MergeFrom(*source);
  }
}

void NetSensorContainer::MergeFrom(const NetSensorContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.NetSensorContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficbyinterfaces_.MergeFrom(from.trafficbyinterfaces_);
  topologies_.MergeFrom(from.topologies_);
  icmpinfo_.MergeFrom(from.icmpinfo_);
  if (from.has_netproxyinfo()) {
    mutable_netproxyinfo()->::netsensor::NetProxyInfo::MergeFrom(from.netproxyinfo());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void NetSensorContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.NetSensorContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetSensorContainer::CopyFrom(const NetSensorContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.NetSensorContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetSensorContainer::IsInitialized() const {
  return true;
}

void NetSensorContainer::Swap(NetSensorContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetSensorContainer::InternalSwap(NetSensorContainer* other) {
  using std::swap;
  CastToBase(&trafficbyinterfaces_)->InternalSwap(CastToBase(&other->trafficbyinterfaces_));
  CastToBase(&topologies_)->InternalSwap(CastToBase(&other->topologies_));
  CastToBase(&icmpinfo_)->InternalSwap(CastToBase(&other->icmpinfo_));
  swap(netproxyinfo_, other->netproxyinfo_);
  swap(timestamp_, other->timestamp_);
  swap(datatype_, other->datatype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetSensorContainer::GetMetadata() const {
  protobuf_container_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_container_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netsensor
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::NetSensorContainer* Arena::CreateMaybeMessage< ::netsensor::NetSensorContainer >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::NetSensorContainer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
