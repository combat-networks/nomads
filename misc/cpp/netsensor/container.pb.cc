// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransportType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_container_2eproto() {
  protobuf_AddDesc_container_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "container.proto");
  GOOGLE_CHECK(file != NULL);
  Container_descriptor_ = file->message_type(0);
  static const int Container_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, senderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, senderipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, recipientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, transporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, datanodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, topology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, topologyparts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, networkhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, timestamp_),
  };
  Container_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      -1,
      -1,
      -1,
      sizeof(Container),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _is_default_instance_));
  DataType_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
  TransportType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_container_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Container_descriptor_, &Container::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_container_2eproto() {
  delete Container::default_instance_;
  delete Container_reflection_;
}

void protobuf_AddDesc_container_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::ddam::protobuf_AddDesc_node_2eproto();
  ::ddam::protobuf_AddDesc_grump_2eproto();
  ::ddam::protobuf_AddDesc_info_2eproto();
  ::ddam::protobuf_AddDesc_traffic_2eproto();
  ::ddam::protobuf_AddDesc_topology_2eproto();
  ::ddam::protobuf_AddDesc_networkhealth_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017container.proto\022\004ddam\032\037google/protobuf"
    "/timestamp.proto\032\nnode.proto\032\013grump.prot"
    "o\032\ninfo.proto\032\rtraffic.proto\032\016topology.p"
    "roto\032\023networkhealth.proto\"\235\004\n\tContainer\022"
    "\020\n\010senderId\030\001 \001(\t\022\027\n\017senderIpAddress\030\002 \001"
    "(\r\022\023\n\013recipientId\030\003 \001(\t\022\021\n\tgroupName\030\004 \001"
    "(\t\022*\n\rtransportType\030\005 \001(\0162\023.ddam.Transpo"
    "rtType\022&\n\013messageType\030\006 \001(\0162\021.ddam.Messa"
    "geType\022 \n\010dataType\030\007 \001(\0162\016.ddam.DataType"
    "\022\022\n\ndataNodeId\030\010 \001(\t\022\030\n\004node\030\t \001(\0132\n.dda"
    "m.Node\022\030\n\004info\030\n \001(\0132\n.ddam.Info\022\033\n\006grou"
    "ps\030\013 \003(\0132\013.ddam.Group\022\031\n\005links\030\014 \003(\0132\n.d"
    "dam.Link\022\036\n\007traffic\030\r \001(\0132\r.ddam.Traffic"
    "\022 \n\010topology\030\016 \001(\0132\016.ddam.Topology\022*\n\rto"
    "pologyParts\030\017 \001(\0132\023.ddam.TopologyParts\022*"
    "\n\rnetworkHealth\030\020 \001(\0132\023.ddam.NetworkHeal"
    "th\022-\n\ttimestamp\030\021 \001(\0132\032.google.protobuf."
    "Timestamp*v\n\010DataType\022\010\n\004INFO\020\000\022\t\n\005GROUP"
    "\020\001\022\010\n\004LINK\020\002\022\013\n\007TRAFFIC\020\003\022\014\n\010TOPOLOGY\020\004\022"
    "\022\n\016TOPOLOGY_PARTS\020\005\022\022\n\016NETWORK_HEALTH\020\006\022"
    "\010\n\004NODE\020\007*6\n\013MessageType\022\017\n\013UPDATE_DATA\020"
    "\000\022\026\n\022UPDATE_WORLD_STATE\020\001*<\n\rTransportTy"
    "pe\022\017\n\013UDP_UNICAST\020\000\022\021\n\rUDP_MULTICAST\020\001\022\007"
    "\n\003TCP\020\002B\'\n\020us.ihmc.aci.ddamB\016ContainerPr"
    "otoP\001\240\001\001b\006proto3", 976);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "container.proto", &protobuf_RegisterTypes);
  Container::default_instance_ = new Container();
  Container::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_container_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_container_2eproto {
  StaticDescriptorInitializer_container_2eproto() {
    protobuf_AddDesc_container_2eproto();
  }
} static_descriptor_initializer_container_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportType_descriptor_;
}
bool TransportType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Container::kSenderIdFieldNumber;
const int Container::kSenderIpAddressFieldNumber;
const int Container::kRecipientIdFieldNumber;
const int Container::kGroupNameFieldNumber;
const int Container::kTransportTypeFieldNumber;
const int Container::kMessageTypeFieldNumber;
const int Container::kDataTypeFieldNumber;
const int Container::kDataNodeIdFieldNumber;
const int Container::kNodeFieldNumber;
const int Container::kInfoFieldNumber;
const int Container::kGroupsFieldNumber;
const int Container::kLinksFieldNumber;
const int Container::kTrafficFieldNumber;
const int Container::kTopologyFieldNumber;
const int Container::kTopologyPartsFieldNumber;
const int Container::kNetworkHealthFieldNumber;
const int Container::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Container::Container()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Container)
}

void Container::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  node_ = const_cast< ::ddam::Node*>(&::ddam::Node::default_instance());
  info_ = const_cast< ::ddam::Info*>(&::ddam::Info::default_instance());
  traffic_ = const_cast< ::ddam::Traffic*>(&::ddam::Traffic::default_instance());
  topology_ = const_cast< ::ddam::Topology*>(&::ddam::Topology::default_instance());
  topologyparts_ = const_cast< ::ddam::TopologyParts*>(&::ddam::TopologyParts::default_instance());
  networkhealth_ = const_cast< ::ddam::NetworkHealth*>(&::ddam::NetworkHealth::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Container::Container(const Container& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Container)
}

void Container::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  senderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderipaddress_ = 0u;
  recipientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transporttype_ = 0;
  messagetype_ = 0;
  datatype_ = 0;
  datanodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ = NULL;
  info_ = NULL;
  traffic_ = NULL;
  topology_ = NULL;
  topologyparts_ = NULL;
  networkhealth_ = NULL;
  timestamp_ = NULL;
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:ddam.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  senderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datanodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete node_;
    delete info_;
    delete traffic_;
    delete topology_;
    delete topologyparts_;
    delete networkhealth_;
    delete timestamp_;
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_container_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New(::google::protobuf::Arena* arena) const {
  Container* n = new Container;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Container::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Container*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(senderipaddress_, transporttype_);
  ZR_(messagetype_, datatype_);
  senderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datanodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
  if (GetArenaNoVirtual() == NULL && topology_ != NULL) delete topology_;
  topology_ = NULL;
  if (GetArenaNoVirtual() == NULL && topologyparts_ != NULL) delete topologyparts_;
  topologyparts_ = NULL;
  if (GetArenaNoVirtual() == NULL && networkhealth_ != NULL) delete networkhealth_;
  networkhealth_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  groups_.Clear();
  links_.Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string senderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senderid().data(), this->senderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Container.senderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senderIpAddress;
        break;
      }

      // optional uint32 senderIpAddress = 2;
      case 2: {
        if (tag == 16) {
         parse_senderIpAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderipaddress_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recipientId;
        break;
      }

      // optional string recipientId = 3;
      case 3: {
        if (tag == 26) {
         parse_recipientId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipientid().data(), this->recipientid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Container.recipientId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_groupName;
        break;
      }

      // optional string groupName = 4;
      case 4: {
        if (tag == 34) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Container.groupName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transportType;
        break;
      }

      // optional .ddam.TransportType transportType = 5;
      case 5: {
        if (tag == 40) {
         parse_transportType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transporttype(static_cast< ::ddam::TransportType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_messageType;
        break;
      }

      // optional .ddam.MessageType messageType = 6;
      case 6: {
        if (tag == 48) {
         parse_messageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagetype(static_cast< ::ddam::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dataType;
        break;
      }

      // optional .ddam.DataType dataType = 7;
      case 7: {
        if (tag == 56) {
         parse_dataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::ddam::DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dataNodeId;
        break;
      }

      // optional string dataNodeId = 8;
      case 8: {
        if (tag == 66) {
         parse_dataNodeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datanodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datanodeid().data(), this->datanodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Container.dataNodeId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_node;
        break;
      }

      // optional .ddam.Node node = 9;
      case 9: {
        if (tag == 74) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_info;
        break;
      }

      // optional .ddam.Info info = 10;
      case 10: {
        if (tag == 82) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_groups;
        break;
      }

      // repeated .ddam.Group groups = 11;
      case 11: {
        if (tag == 90) {
         parse_groups:
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_groups;
        if (input->ExpectTag(98)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ddam.Link links = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_traffic;
        break;
      }

      // optional .ddam.Traffic traffic = 13;
      case 13: {
        if (tag == 106) {
         parse_traffic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_topology;
        break;
      }

      // optional .ddam.Topology topology = 14;
      case 14: {
        if (tag == 114) {
         parse_topology:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topology()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_topologyParts;
        break;
      }

      // optional .ddam.TopologyParts topologyParts = 15;
      case 15: {
        if (tag == 122) {
         parse_topologyParts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topologyparts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_networkHealth;
        break;
      }

      // optional .ddam.NetworkHealth networkHealth = 16;
      case 16: {
        if (tag == 130) {
         parse_networkHealth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkhealth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 17;
      case 17: {
        if (tag == 138) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Container)
  return false;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Container)
  // optional string senderId = 1;
  if (this->senderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderid().data(), this->senderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.senderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->senderid(), output);
  }

  // optional uint32 senderIpAddress = 2;
  if (this->senderipaddress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->senderipaddress(), output);
  }

  // optional string recipientId = 3;
  if (this->recipientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipientid().data(), this->recipientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.recipientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->recipientid(), output);
  }

  // optional string groupName = 4;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupname(), output);
  }

  // optional .ddam.TransportType transportType = 5;
  if (this->transporttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->transporttype(), output);
  }

  // optional .ddam.MessageType messageType = 6;
  if (this->messagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->messagetype(), output);
  }

  // optional .ddam.DataType dataType = 7;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->datatype(), output);
  }

  // optional string dataNodeId = 8;
  if (this->datanodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datanodeid().data(), this->datanodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.dataNodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->datanodeid(), output);
  }

  // optional .ddam.Node node = 9;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->node_, output);
  }

  // optional .ddam.Info info = 10;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->info_, output);
  }

  // repeated .ddam.Group groups = 11;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->groups(i), output);
  }

  // repeated .ddam.Link links = 12;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->links(i), output);
  }

  // optional .ddam.Traffic traffic = 13;
  if (this->has_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->traffic_, output);
  }

  // optional .ddam.Topology topology = 14;
  if (this->has_topology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->topology_, output);
  }

  // optional .ddam.TopologyParts topologyParts = 15;
  if (this->has_topologyparts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->topologyparts_, output);
  }

  // optional .ddam.NetworkHealth networkHealth = 16;
  if (this->has_networkhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->networkhealth_, output);
  }

  // optional .google.protobuf.Timestamp timestamp = 17;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Container)
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Container)
  // optional string senderId = 1;
  if (this->senderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderid().data(), this->senderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.senderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->senderid(), target);
  }

  // optional uint32 senderIpAddress = 2;
  if (this->senderipaddress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->senderipaddress(), target);
  }

  // optional string recipientId = 3;
  if (this->recipientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipientid().data(), this->recipientid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.recipientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->recipientid(), target);
  }

  // optional string groupName = 4;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupname(), target);
  }

  // optional .ddam.TransportType transportType = 5;
  if (this->transporttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->transporttype(), target);
  }

  // optional .ddam.MessageType messageType = 6;
  if (this->messagetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->messagetype(), target);
  }

  // optional .ddam.DataType dataType = 7;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->datatype(), target);
  }

  // optional string dataNodeId = 8;
  if (this->datanodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datanodeid().data(), this->datanodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Container.dataNodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->datanodeid(), target);
  }

  // optional .ddam.Node node = 9;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->node_, target);
  }

  // optional .ddam.Info info = 10;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->info_, target);
  }

  // repeated .ddam.Group groups = 11;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->groups(i), target);
  }

  // repeated .ddam.Link links = 12;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->links(i), target);
  }

  // optional .ddam.Traffic traffic = 13;
  if (this->has_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->traffic_, target);
  }

  // optional .ddam.Topology topology = 14;
  if (this->has_topology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->topology_, target);
  }

  // optional .ddam.TopologyParts topologyParts = 15;
  if (this->has_topologyparts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->topologyparts_, target);
  }

  // optional .ddam.NetworkHealth networkHealth = 16;
  if (this->has_networkhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->networkhealth_, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 17;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Container)
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  // optional string senderId = 1;
  if (this->senderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderid());
  }

  // optional uint32 senderIpAddress = 2;
  if (this->senderipaddress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->senderipaddress());
  }

  // optional string recipientId = 3;
  if (this->recipientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recipientid());
  }

  // optional string groupName = 4;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  // optional .ddam.TransportType transportType = 5;
  if (this->transporttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transporttype());
  }

  // optional .ddam.MessageType messageType = 6;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }

  // optional .ddam.DataType dataType = 7;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  // optional string dataNodeId = 8;
  if (this->datanodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->datanodeid());
  }

  // optional .ddam.Node node = 9;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // optional .ddam.Info info = 10;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional .ddam.Traffic traffic = 13;
  if (this->has_traffic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->traffic_);
  }

  // optional .ddam.Topology topology = 14;
  if (this->has_topology()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topology_);
  }

  // optional .ddam.TopologyParts topologyParts = 15;
  if (this->has_topologyparts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->topologyparts_);
  }

  // optional .ddam.NetworkHealth networkHealth = 16;
  if (this->has_networkhealth()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->networkhealth_);
  }

  // optional .google.protobuf.Timestamp timestamp = 17;
  if (this->has_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated .ddam.Group groups = 11;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .ddam.Link links = 12;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Container* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Container>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  groups_.MergeFrom(from.groups_);
  links_.MergeFrom(from.links_);
  if (from.senderid().size() > 0) {

    senderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderid_);
  }
  if (from.senderipaddress() != 0) {
    set_senderipaddress(from.senderipaddress());
  }
  if (from.recipientid().size() > 0) {

    recipientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipientid_);
  }
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.transporttype() != 0) {
    set_transporttype(from.transporttype());
  }
  if (from.messagetype() != 0) {
    set_messagetype(from.messagetype());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.datanodeid().size() > 0) {

    datanodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datanodeid_);
  }
  if (from.has_node()) {
    mutable_node()->::ddam::Node::MergeFrom(from.node());
  }
  if (from.has_info()) {
    mutable_info()->::ddam::Info::MergeFrom(from.info());
  }
  if (from.has_traffic()) {
    mutable_traffic()->::ddam::Traffic::MergeFrom(from.traffic());
  }
  if (from.has_topology()) {
    mutable_topology()->::ddam::Topology::MergeFrom(from.topology());
  }
  if (from.has_topologyparts()) {
    mutable_topologyparts()->::ddam::TopologyParts::MergeFrom(from.topologyparts());
  }
  if (from.has_networkhealth()) {
    mutable_networkhealth()->::ddam::NetworkHealth::MergeFrom(from.networkhealth());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {

  return true;
}

void Container::Swap(Container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Container::InternalSwap(Container* other) {
  senderid_.Swap(&other->senderid_);
  std::swap(senderipaddress_, other->senderipaddress_);
  recipientid_.Swap(&other->recipientid_);
  groupname_.Swap(&other->groupname_);
  std::swap(transporttype_, other->transporttype_);
  std::swap(messagetype_, other->messagetype_);
  std::swap(datatype_, other->datatype_);
  datanodeid_.Swap(&other->datanodeid_);
  std::swap(node_, other->node_);
  std::swap(info_, other->info_);
  groups_.UnsafeArenaSwap(&other->groups_);
  links_.UnsafeArenaSwap(&other->links_);
  std::swap(traffic_, other->traffic_);
  std::swap(topology_, other->topology_);
  std::swap(topologyparts_, other->topologyparts_);
  std::swap(networkhealth_, other->networkhealth_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Container

// optional string senderId = 1;
void Container::clear_senderid() {
  senderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Container::senderid() const {
  // @@protoc_insertion_point(field_get:ddam.Container.senderId)
  return senderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_senderid(const ::std::string& value) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Container.senderId)
}
 void Container::set_senderid(const char* value) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Container.senderId)
}
 void Container::set_senderid(const char* value, size_t size) {
  
  senderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Container.senderId)
}
 ::std::string* Container::mutable_senderid() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Container.senderId)
  return senderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Container::release_senderid() {
  
  return senderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_allocated_senderid(::std::string* senderid) {
  if (senderid != NULL) {
    
  } else {
    
  }
  senderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderid);
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.senderId)
}

// optional uint32 senderIpAddress = 2;
void Container::clear_senderipaddress() {
  senderipaddress_ = 0u;
}
 ::google::protobuf::uint32 Container::senderipaddress() const {
  // @@protoc_insertion_point(field_get:ddam.Container.senderIpAddress)
  return senderipaddress_;
}
 void Container::set_senderipaddress(::google::protobuf::uint32 value) {
  
  senderipaddress_ = value;
  // @@protoc_insertion_point(field_set:ddam.Container.senderIpAddress)
}

// optional string recipientId = 3;
void Container::clear_recipientid() {
  recipientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Container::recipientid() const {
  // @@protoc_insertion_point(field_get:ddam.Container.recipientId)
  return recipientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_recipientid(const ::std::string& value) {
  
  recipientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Container.recipientId)
}
 void Container::set_recipientid(const char* value) {
  
  recipientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Container.recipientId)
}
 void Container::set_recipientid(const char* value, size_t size) {
  
  recipientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Container.recipientId)
}
 ::std::string* Container::mutable_recipientid() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Container.recipientId)
  return recipientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Container::release_recipientid() {
  
  return recipientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_allocated_recipientid(::std::string* recipientid) {
  if (recipientid != NULL) {
    
  } else {
    
  }
  recipientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipientid);
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.recipientId)
}

// optional string groupName = 4;
void Container::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Container::groupname() const {
  // @@protoc_insertion_point(field_get:ddam.Container.groupName)
  return groupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Container.groupName)
}
 void Container::set_groupname(const char* value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Container.groupName)
}
 void Container::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Container.groupName)
}
 ::std::string* Container::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Container.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Container::release_groupname() {
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.groupName)
}

// optional .ddam.TransportType transportType = 5;
void Container::clear_transporttype() {
  transporttype_ = 0;
}
 ::ddam::TransportType Container::transporttype() const {
  // @@protoc_insertion_point(field_get:ddam.Container.transportType)
  return static_cast< ::ddam::TransportType >(transporttype_);
}
 void Container::set_transporttype(::ddam::TransportType value) {
  
  transporttype_ = value;
  // @@protoc_insertion_point(field_set:ddam.Container.transportType)
}

// optional .ddam.MessageType messageType = 6;
void Container::clear_messagetype() {
  messagetype_ = 0;
}
 ::ddam::MessageType Container::messagetype() const {
  // @@protoc_insertion_point(field_get:ddam.Container.messageType)
  return static_cast< ::ddam::MessageType >(messagetype_);
}
 void Container::set_messagetype(::ddam::MessageType value) {
  
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:ddam.Container.messageType)
}

// optional .ddam.DataType dataType = 7;
void Container::clear_datatype() {
  datatype_ = 0;
}
 ::ddam::DataType Container::datatype() const {
  // @@protoc_insertion_point(field_get:ddam.Container.dataType)
  return static_cast< ::ddam::DataType >(datatype_);
}
 void Container::set_datatype(::ddam::DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:ddam.Container.dataType)
}

// optional string dataNodeId = 8;
void Container::clear_datanodeid() {
  datanodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Container::datanodeid() const {
  // @@protoc_insertion_point(field_get:ddam.Container.dataNodeId)
  return datanodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_datanodeid(const ::std::string& value) {
  
  datanodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Container.dataNodeId)
}
 void Container::set_datanodeid(const char* value) {
  
  datanodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Container.dataNodeId)
}
 void Container::set_datanodeid(const char* value, size_t size) {
  
  datanodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Container.dataNodeId)
}
 ::std::string* Container::mutable_datanodeid() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Container.dataNodeId)
  return datanodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Container::release_datanodeid() {
  
  return datanodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Container::set_allocated_datanodeid(::std::string* datanodeid) {
  if (datanodeid != NULL) {
    
  } else {
    
  }
  datanodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datanodeid);
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.dataNodeId)
}

// optional .ddam.Node node = 9;
bool Container::has_node() const {
  return !_is_default_instance_ && node_ != NULL;
}
void Container::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::ddam::Node& Container::node() const {
  // @@protoc_insertion_point(field_get:ddam.Container.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::ddam::Node* Container::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::ddam::Node;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.node)
  return node_;
}
::ddam::Node* Container::release_node() {
  
  ::ddam::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void Container::set_allocated_node(::ddam::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.node)
}

// optional .ddam.Info info = 10;
bool Container::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void Container::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::ddam::Info& Container::info() const {
  // @@protoc_insertion_point(field_get:ddam.Container.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::ddam::Info* Container::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ddam::Info;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.info)
  return info_;
}
::ddam::Info* Container::release_info() {
  
  ::ddam::Info* temp = info_;
  info_ = NULL;
  return temp;
}
void Container::set_allocated_info(::ddam::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.info)
}

// repeated .ddam.Group groups = 11;
int Container::groups_size() const {
  return groups_.size();
}
void Container::clear_groups() {
  groups_.Clear();
}
const ::ddam::Group& Container::groups(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Container.groups)
  return groups_.Get(index);
}
::ddam::Group* Container::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Container.groups)
  return groups_.Mutable(index);
}
::ddam::Group* Container::add_groups() {
  // @@protoc_insertion_point(field_add:ddam.Container.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::Group >*
Container::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Container.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::Group >&
Container::groups() const {
  // @@protoc_insertion_point(field_list:ddam.Container.groups)
  return groups_;
}

// repeated .ddam.Link links = 12;
int Container::links_size() const {
  return links_.size();
}
void Container::clear_links() {
  links_.Clear();
}
const ::ddam::Link& Container::links(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Container.links)
  return links_.Get(index);
}
::ddam::Link* Container::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Container.links)
  return links_.Mutable(index);
}
::ddam::Link* Container::add_links() {
  // @@protoc_insertion_point(field_add:ddam.Container.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::Link >*
Container::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Container.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::Link >&
Container::links() const {
  // @@protoc_insertion_point(field_list:ddam.Container.links)
  return links_;
}

// optional .ddam.Traffic traffic = 13;
bool Container::has_traffic() const {
  return !_is_default_instance_ && traffic_ != NULL;
}
void Container::clear_traffic() {
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
}
const ::ddam::Traffic& Container::traffic() const {
  // @@protoc_insertion_point(field_get:ddam.Container.traffic)
  return traffic_ != NULL ? *traffic_ : *default_instance_->traffic_;
}
::ddam::Traffic* Container::mutable_traffic() {
  
  if (traffic_ == NULL) {
    traffic_ = new ::ddam::Traffic;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.traffic)
  return traffic_;
}
::ddam::Traffic* Container::release_traffic() {
  
  ::ddam::Traffic* temp = traffic_;
  traffic_ = NULL;
  return temp;
}
void Container::set_allocated_traffic(::ddam::Traffic* traffic) {
  delete traffic_;
  traffic_ = traffic;
  if (traffic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.traffic)
}

// optional .ddam.Topology topology = 14;
bool Container::has_topology() const {
  return !_is_default_instance_ && topology_ != NULL;
}
void Container::clear_topology() {
  if (GetArenaNoVirtual() == NULL && topology_ != NULL) delete topology_;
  topology_ = NULL;
}
const ::ddam::Topology& Container::topology() const {
  // @@protoc_insertion_point(field_get:ddam.Container.topology)
  return topology_ != NULL ? *topology_ : *default_instance_->topology_;
}
::ddam::Topology* Container::mutable_topology() {
  
  if (topology_ == NULL) {
    topology_ = new ::ddam::Topology;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.topology)
  return topology_;
}
::ddam::Topology* Container::release_topology() {
  
  ::ddam::Topology* temp = topology_;
  topology_ = NULL;
  return temp;
}
void Container::set_allocated_topology(::ddam::Topology* topology) {
  delete topology_;
  topology_ = topology;
  if (topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.topology)
}

// optional .ddam.TopologyParts topologyParts = 15;
bool Container::has_topologyparts() const {
  return !_is_default_instance_ && topologyparts_ != NULL;
}
void Container::clear_topologyparts() {
  if (GetArenaNoVirtual() == NULL && topologyparts_ != NULL) delete topologyparts_;
  topologyparts_ = NULL;
}
const ::ddam::TopologyParts& Container::topologyparts() const {
  // @@protoc_insertion_point(field_get:ddam.Container.topologyParts)
  return topologyparts_ != NULL ? *topologyparts_ : *default_instance_->topologyparts_;
}
::ddam::TopologyParts* Container::mutable_topologyparts() {
  
  if (topologyparts_ == NULL) {
    topologyparts_ = new ::ddam::TopologyParts;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.topologyParts)
  return topologyparts_;
}
::ddam::TopologyParts* Container::release_topologyparts() {
  
  ::ddam::TopologyParts* temp = topologyparts_;
  topologyparts_ = NULL;
  return temp;
}
void Container::set_allocated_topologyparts(::ddam::TopologyParts* topologyparts) {
  delete topologyparts_;
  topologyparts_ = topologyparts;
  if (topologyparts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.topologyParts)
}

// optional .ddam.NetworkHealth networkHealth = 16;
bool Container::has_networkhealth() const {
  return !_is_default_instance_ && networkhealth_ != NULL;
}
void Container::clear_networkhealth() {
  if (GetArenaNoVirtual() == NULL && networkhealth_ != NULL) delete networkhealth_;
  networkhealth_ = NULL;
}
const ::ddam::NetworkHealth& Container::networkhealth() const {
  // @@protoc_insertion_point(field_get:ddam.Container.networkHealth)
  return networkhealth_ != NULL ? *networkhealth_ : *default_instance_->networkhealth_;
}
::ddam::NetworkHealth* Container::mutable_networkhealth() {
  
  if (networkhealth_ == NULL) {
    networkhealth_ = new ::ddam::NetworkHealth;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.networkHealth)
  return networkhealth_;
}
::ddam::NetworkHealth* Container::release_networkhealth() {
  
  ::ddam::NetworkHealth* temp = networkhealth_;
  networkhealth_ = NULL;
  return temp;
}
void Container::set_allocated_networkhealth(::ddam::NetworkHealth* networkhealth) {
  delete networkhealth_;
  networkhealth_ = networkhealth;
  if (networkhealth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.networkHealth)
}

// optional .google.protobuf.Timestamp timestamp = 17;
bool Container::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Container::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Container::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Container.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Container::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Container.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Container::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Container::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Container.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
