// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef PROTOBUF_traffic_2eproto__INCLUDED
#define PROTOBUF_traffic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_traffic_2eproto();
void protobuf_AssignDesc_traffic_2eproto();
void protobuf_ShutdownFile_traffic_2eproto();

class Description;
class Link;
class MocketSensor;
class ReadableLink;
class ReadableSource;
class ReadableTraffic;
class Source;
class Stat;
class Traffic;

// ===================================================================

class Traffic : public ::google::protobuf::Message {
 public:
  Traffic();
  virtual ~Traffic();

  Traffic(const Traffic& from);

  inline Traffic& operator=(const Traffic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Traffic& default_instance();

  void Swap(Traffic* other);

  // implements Message ----------------------------------------------

  inline Traffic* New() const { return New(NULL); }

  Traffic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Traffic& from);
  void MergeFrom(const Traffic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Traffic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .ddam.Source> sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >&
      sources() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >*
      mutable_sources();

  // @@protoc_insertion_point(class_scope:ddam.Traffic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Source,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Traffic_SourcesEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Source,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sources_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Traffic* default_instance_;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  void Swap(Source* other);

  // implements Message ----------------------------------------------

  inline Source* New() const { return New(NULL); }

  Source* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .ddam.Link> destinations = 1;
  int destinations_size() const;
  void clear_destinations();
  static const int kDestinationsFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >&
      destinations() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >*
      mutable_destinations();

  // @@protoc_insertion_point(class_scope:ddam.Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Link,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Source_DestinationsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Link,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > destinations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Source* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  inline Link* New() const { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ipSrc = 1;
  void clear_ipsrc();
  static const int kIpSrcFieldNumber = 1;
  ::google::protobuf::uint32 ipsrc() const;
  void set_ipsrc(::google::protobuf::uint32 value);

  // optional uint32 ipDst = 2;
  void clear_ipdst();
  static const int kIpDstFieldNumber = 2;
  ::google::protobuf::uint32 ipdst() const;
  void set_ipdst(::google::protobuf::uint32 value);

  // repeated .ddam.Stat stats = 3;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  const ::ddam::Stat& stats(int index) const;
  ::ddam::Stat* mutable_stats(int index);
  ::ddam::Stat* add_stats();
  ::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
      stats() const;

  // optional .ddam.Description description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::ddam::Description& description() const;
  ::ddam::Description* mutable_description();
  ::ddam::Description* release_description();
  void set_allocated_description(::ddam::Description* description);

  // optional .ddam.MocketSensor mocketSensor = 5;
  bool has_mocketsensor() const;
  void clear_mocketsensor();
  static const int kMocketSensorFieldNumber = 5;
  const ::ddam::MocketSensor& mocketsensor() const;
  ::ddam::MocketSensor* mutable_mocketsensor();
  ::ddam::MocketSensor* release_mocketsensor();
  void set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor);

  // optional .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 ipsrc_;
  ::google::protobuf::uint32 ipdst_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Stat > stats_;
  ::ddam::Description* description_;
  ::ddam::MocketSensor* mocketsensor_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class Stat : public ::google::protobuf::Message {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  void Swap(Stat* other);

  // implements Message ----------------------------------------------

  inline Stat* New() const { return New(NULL); }

  Stat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // optional uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional uint32 sentFiveSec = 3;
  void clear_sentfivesec();
  static const int kSentFiveSecFieldNumber = 3;
  ::google::protobuf::uint32 sentfivesec() const;
  void set_sentfivesec(::google::protobuf::uint32 value);

  // optional uint32 receivedFiveSec = 4;
  void clear_receivedfivesec();
  static const int kReceivedFiveSecFieldNumber = 4;
  ::google::protobuf::uint32 receivedfivesec() const;
  void set_receivedfivesec(::google::protobuf::uint32 value);

  // optional uint32 observedFiveSec = 5;
  void clear_observedfivesec();
  static const int kObservedFiveSecFieldNumber = 5;
  ::google::protobuf::uint32 observedfivesec() const;
  void set_observedfivesec(::google::protobuf::uint32 value);

  // optional uint32 sentMinute = 6;
  void clear_sentminute();
  static const int kSentMinuteFieldNumber = 6;
  ::google::protobuf::uint32 sentminute() const;
  void set_sentminute(::google::protobuf::uint32 value);

  // optional uint32 receivedMinute = 7;
  void clear_receivedminute();
  static const int kReceivedMinuteFieldNumber = 7;
  ::google::protobuf::uint32 receivedminute() const;
  void set_receivedminute(::google::protobuf::uint32 value);

  // optional uint32 observedMinute = 8;
  void clear_observedminute();
  static const int kObservedMinuteFieldNumber = 8;
  ::google::protobuf::uint32 observedminute() const;
  void set_observedminute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ddam.Stat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 sentfivesec_;
  ::google::protobuf::uint32 receivedfivesec_;
  ::google::protobuf::uint32 observedfivesec_;
  ::google::protobuf::uint32 sentminute_;
  ::google::protobuf::uint32 receivedminute_;
  ::google::protobuf::uint32 observedminute_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Stat* default_instance_;
};
// -------------------------------------------------------------------

class Description : public ::google::protobuf::Message {
 public:
  Description();
  virtual ~Description();

  Description(const Description& from);

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Description& default_instance();

  void Swap(Description* other);

  // implements Message ----------------------------------------------

  inline Description* New() const { return New(NULL); }

  Description* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string condition = 2;
  void clear_condition();
  static const int kConditionFieldNumber = 2;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);

  // optional double throughput = 3;
  void clear_throughput();
  static const int kThroughputFieldNumber = 3;
  double throughput() const;
  void set_throughput(double value);

  // optional uint32 latency = 4;
  void clear_latency();
  static const int kLatencyFieldNumber = 4;
  ::google::protobuf::uint32 latency() const;
  void set_latency(::google::protobuf::uint32 value);

  // optional uint32 packetLoss = 5;
  void clear_packetloss();
  static const int kPacketLossFieldNumber = 5;
  ::google::protobuf::uint32 packetloss() const;
  void set_packetloss(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ddam.Description)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  double throughput_;
  ::google::protobuf::uint32 latency_;
  ::google::protobuf::uint32 packetloss_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static Description* default_instance_;
};
// -------------------------------------------------------------------

class MocketSensor : public ::google::protobuf::Message {
 public:
  MocketSensor();
  virtual ~MocketSensor();

  MocketSensor(const MocketSensor& from);

  inline MocketSensor& operator=(const MocketSensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MocketSensor& default_instance();

  void Swap(MocketSensor* other);

  // implements Message ----------------------------------------------

  inline MocketSensor* New() const { return New(NULL); }

  MocketSensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MocketSensor& from);
  void MergeFrom(const MocketSensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MocketSensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double RTT = 1;
  void clear_rtt();
  static const int kRTTFieldNumber = 1;
  double rtt() const;
  void set_rtt(double value);

  // @@protoc_insertion_point(class_scope:ddam.MocketSensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double rtt_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static MocketSensor* default_instance_;
};
// -------------------------------------------------------------------

class ReadableTraffic : public ::google::protobuf::Message {
 public:
  ReadableTraffic();
  virtual ~ReadableTraffic();

  ReadableTraffic(const ReadableTraffic& from);

  inline ReadableTraffic& operator=(const ReadableTraffic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableTraffic& default_instance();

  void Swap(ReadableTraffic* other);

  // implements Message ----------------------------------------------

  inline ReadableTraffic* New() const { return New(NULL); }

  ReadableTraffic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableTraffic& from);
  void MergeFrom(const ReadableTraffic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableTraffic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ddam.ReadableSource> sources = 1;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >&
      sources() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >*
      mutable_sources();

  // @@protoc_insertion_point(class_scope:ddam.ReadableTraffic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableSource,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableTraffic_SourcesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableSource,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sources_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static ReadableTraffic* default_instance_;
};
// -------------------------------------------------------------------

class ReadableSource : public ::google::protobuf::Message {
 public:
  ReadableSource();
  virtual ~ReadableSource();

  ReadableSource(const ReadableSource& from);

  inline ReadableSource& operator=(const ReadableSource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableSource& default_instance();

  void Swap(ReadableSource* other);

  // implements Message ----------------------------------------------

  inline ReadableSource* New() const { return New(NULL); }

  ReadableSource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableSource& from);
  void MergeFrom(const ReadableSource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ddam.ReadableLink> destinations = 1;
  int destinations_size() const;
  void clear_destinations();
  static const int kDestinationsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >&
      destinations() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >*
      mutable_destinations();

  // @@protoc_insertion_point(class_scope:ddam.ReadableSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableLink,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableSource_DestinationsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableLink,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > destinations_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static ReadableSource* default_instance_;
};
// -------------------------------------------------------------------

class ReadableLink : public ::google::protobuf::Message {
 public:
  ReadableLink();
  virtual ~ReadableLink();

  ReadableLink(const ReadableLink& from);

  inline ReadableLink& operator=(const ReadableLink& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableLink& default_instance();

  void Swap(ReadableLink* other);

  // implements Message ----------------------------------------------

  inline ReadableLink* New() const { return New(NULL); }

  ReadableLink* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableLink& from);
  void MergeFrom(const ReadableLink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipSrc = 1;
  void clear_ipsrc();
  static const int kIpSrcFieldNumber = 1;
  const ::std::string& ipsrc() const;
  void set_ipsrc(const ::std::string& value);
  void set_ipsrc(const char* value);
  void set_ipsrc(const char* value, size_t size);
  ::std::string* mutable_ipsrc();
  ::std::string* release_ipsrc();
  void set_allocated_ipsrc(::std::string* ipsrc);

  // optional string ipDst = 2;
  void clear_ipdst();
  static const int kIpDstFieldNumber = 2;
  const ::std::string& ipdst() const;
  void set_ipdst(const ::std::string& value);
  void set_ipdst(const char* value);
  void set_ipdst(const char* value, size_t size);
  ::std::string* mutable_ipdst();
  ::std::string* release_ipdst();
  void set_allocated_ipdst(::std::string* ipdst);

  // repeated .ddam.Stat stats = 3;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  const ::ddam::Stat& stats(int index) const;
  ::ddam::Stat* mutable_stats(int index);
  ::ddam::Stat* add_stats();
  ::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
      stats() const;

  // optional .ddam.Description description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::ddam::Description& description() const;
  ::ddam::Description* mutable_description();
  ::ddam::Description* release_description();
  void set_allocated_description(::ddam::Description* description);

  // optional .ddam.MocketSensor mocketSensor = 5;
  bool has_mocketsensor() const;
  void clear_mocketsensor();
  static const int kMocketSensorFieldNumber = 5;
  const ::ddam::MocketSensor& mocketsensor() const;
  ::ddam::MocketSensor* mutable_mocketsensor();
  ::ddam::MocketSensor* release_mocketsensor();
  void set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor);

  // optional .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.ReadableLink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ipsrc_;
  ::google::protobuf::internal::ArenaStringPtr ipdst_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Stat > stats_;
  ::ddam::Description* description_;
  ::ddam::MocketSensor* mocketsensor_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_traffic_2eproto();
  friend void protobuf_AssignDesc_traffic_2eproto();
  friend void protobuf_ShutdownFile_traffic_2eproto();

  void InitAsDefaultInstance();
  static ReadableLink* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Traffic

// map<uint32, .ddam.Source> sources = 1;
inline int Traffic::sources_size() const {
  return sources_.size();
}
inline void Traffic::clear_sources() {
  sources_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >&
Traffic::sources() const {
  // @@protoc_insertion_point(field_map:ddam.Traffic.sources)
  return sources_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >*
Traffic::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Traffic.sources)
  return sources_.MutableMap();
}

// -------------------------------------------------------------------

// Source

// map<uint32, .ddam.Link> destinations = 1;
inline int Source::destinations_size() const {
  return destinations_.size();
}
inline void Source::clear_destinations() {
  destinations_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >&
Source::destinations() const {
  // @@protoc_insertion_point(field_map:ddam.Source.destinations)
  return destinations_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >*
Source::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Source.destinations)
  return destinations_.MutableMap();
}

// -------------------------------------------------------------------

// Link

// optional uint32 ipSrc = 1;
inline void Link::clear_ipsrc() {
  ipsrc_ = 0u;
}
inline ::google::protobuf::uint32 Link::ipsrc() const {
  // @@protoc_insertion_point(field_get:ddam.Link.ipSrc)
  return ipsrc_;
}
inline void Link::set_ipsrc(::google::protobuf::uint32 value) {
  
  ipsrc_ = value;
  // @@protoc_insertion_point(field_set:ddam.Link.ipSrc)
}

// optional uint32 ipDst = 2;
inline void Link::clear_ipdst() {
  ipdst_ = 0u;
}
inline ::google::protobuf::uint32 Link::ipdst() const {
  // @@protoc_insertion_point(field_get:ddam.Link.ipDst)
  return ipdst_;
}
inline void Link::set_ipdst(::google::protobuf::uint32 value) {
  
  ipdst_ = value;
  // @@protoc_insertion_point(field_set:ddam.Link.ipDst)
}

// repeated .ddam.Stat stats = 3;
inline int Link::stats_size() const {
  return stats_.size();
}
inline void Link::clear_stats() {
  stats_.Clear();
}
inline const ::ddam::Stat& Link::stats(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Link.stats)
  return stats_.Get(index);
}
inline ::ddam::Stat* Link::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Link.stats)
  return stats_.Mutable(index);
}
inline ::ddam::Stat* Link::add_stats() {
  // @@protoc_insertion_point(field_add:ddam.Link.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
Link::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Link.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
Link::stats() const {
  // @@protoc_insertion_point(field_list:ddam.Link.stats)
  return stats_;
}

// optional .ddam.Description description = 4;
inline bool Link::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
inline void Link::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
inline const ::ddam::Description& Link::description() const {
  // @@protoc_insertion_point(field_get:ddam.Link.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::ddam::Description* Link::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::ddam::Description;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.description)
  return description_;
}
inline ::ddam::Description* Link::release_description() {
  
  ::ddam::Description* temp = description_;
  description_ = NULL;
  return temp;
}
inline void Link::set_allocated_description(::ddam::Description* description) {
  delete description_;
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.description)
}

// optional .ddam.MocketSensor mocketSensor = 5;
inline bool Link::has_mocketsensor() const {
  return !_is_default_instance_ && mocketsensor_ != NULL;
}
inline void Link::clear_mocketsensor() {
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
}
inline const ::ddam::MocketSensor& Link::mocketsensor() const {
  // @@protoc_insertion_point(field_get:ddam.Link.mocketSensor)
  return mocketsensor_ != NULL ? *mocketsensor_ : *default_instance_->mocketsensor_;
}
inline ::ddam::MocketSensor* Link::mutable_mocketsensor() {
  
  if (mocketsensor_ == NULL) {
    mocketsensor_ = new ::ddam::MocketSensor;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.mocketSensor)
  return mocketsensor_;
}
inline ::ddam::MocketSensor* Link::release_mocketsensor() {
  
  ::ddam::MocketSensor* temp = mocketsensor_;
  mocketsensor_ = NULL;
  return temp;
}
inline void Link::set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor) {
  delete mocketsensor_;
  mocketsensor_ = mocketsensor;
  if (mocketsensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.mocketSensor)
}

// optional .google.protobuf.Timestamp timestamp = 6;
inline bool Link::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Link::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Link::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Link.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Link::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Link::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Link::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.timestamp)
}

// -------------------------------------------------------------------

// Stat

// optional string protocol = 1;
inline void Stat::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Stat::protocol() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stat::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Stat.protocol)
}
inline void Stat::set_protocol(const char* value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Stat.protocol)
}
inline void Stat::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Stat.protocol)
}
inline ::std::string* Stat::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Stat.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stat::release_protocol() {
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stat::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ddam.Stat.protocol)
}

// optional uint32 port = 2;
inline void Stat::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Stat::port() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.port)
  return port_;
}
inline void Stat::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.port)
}

// optional uint32 sentFiveSec = 3;
inline void Stat::clear_sentfivesec() {
  sentfivesec_ = 0u;
}
inline ::google::protobuf::uint32 Stat::sentfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.sentFiveSec)
  return sentfivesec_;
}
inline void Stat::set_sentfivesec(::google::protobuf::uint32 value) {
  
  sentfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.sentFiveSec)
}

// optional uint32 receivedFiveSec = 4;
inline void Stat::clear_receivedfivesec() {
  receivedfivesec_ = 0u;
}
inline ::google::protobuf::uint32 Stat::receivedfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.receivedFiveSec)
  return receivedfivesec_;
}
inline void Stat::set_receivedfivesec(::google::protobuf::uint32 value) {
  
  receivedfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.receivedFiveSec)
}

// optional uint32 observedFiveSec = 5;
inline void Stat::clear_observedfivesec() {
  observedfivesec_ = 0u;
}
inline ::google::protobuf::uint32 Stat::observedfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.observedFiveSec)
  return observedfivesec_;
}
inline void Stat::set_observedfivesec(::google::protobuf::uint32 value) {
  
  observedfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.observedFiveSec)
}

// optional uint32 sentMinute = 6;
inline void Stat::clear_sentminute() {
  sentminute_ = 0u;
}
inline ::google::protobuf::uint32 Stat::sentminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.sentMinute)
  return sentminute_;
}
inline void Stat::set_sentminute(::google::protobuf::uint32 value) {
  
  sentminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.sentMinute)
}

// optional uint32 receivedMinute = 7;
inline void Stat::clear_receivedminute() {
  receivedminute_ = 0u;
}
inline ::google::protobuf::uint32 Stat::receivedminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.receivedMinute)
  return receivedminute_;
}
inline void Stat::set_receivedminute(::google::protobuf::uint32 value) {
  
  receivedminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.receivedMinute)
}

// optional uint32 observedMinute = 8;
inline void Stat::clear_observedminute() {
  observedminute_ = 0u;
}
inline ::google::protobuf::uint32 Stat::observedminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.observedMinute)
  return observedminute_;
}
inline void Stat::set_observedminute(::google::protobuf::uint32 value) {
  
  observedminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.observedMinute)
}

// -------------------------------------------------------------------

// Description

// optional string type = 1;
inline void Description::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Description::type() const {
  // @@protoc_insertion_point(field_get:ddam.Description.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Description.type)
}
inline void Description::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Description.type)
}
inline void Description::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Description.type)
}
inline ::std::string* Description::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Description.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ddam.Description.type)
}

// optional string condition = 2;
inline void Description::clear_condition() {
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Description::condition() const {
  // @@protoc_insertion_point(field_get:ddam.Description.condition)
  return condition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_condition(const ::std::string& value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Description.condition)
}
inline void Description::set_condition(const char* value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Description.condition)
}
inline void Description::set_condition(const char* value, size_t size) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Description.condition)
}
inline ::std::string* Description::mutable_condition() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Description.condition)
  return condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_condition() {
  
  return condition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    
  } else {
    
  }
  condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:ddam.Description.condition)
}

// optional double throughput = 3;
inline void Description::clear_throughput() {
  throughput_ = 0;
}
inline double Description::throughput() const {
  // @@protoc_insertion_point(field_get:ddam.Description.throughput)
  return throughput_;
}
inline void Description::set_throughput(double value) {
  
  throughput_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.throughput)
}

// optional uint32 latency = 4;
inline void Description::clear_latency() {
  latency_ = 0u;
}
inline ::google::protobuf::uint32 Description::latency() const {
  // @@protoc_insertion_point(field_get:ddam.Description.latency)
  return latency_;
}
inline void Description::set_latency(::google::protobuf::uint32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.latency)
}

// optional uint32 packetLoss = 5;
inline void Description::clear_packetloss() {
  packetloss_ = 0u;
}
inline ::google::protobuf::uint32 Description::packetloss() const {
  // @@protoc_insertion_point(field_get:ddam.Description.packetLoss)
  return packetloss_;
}
inline void Description::set_packetloss(::google::protobuf::uint32 value) {
  
  packetloss_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.packetLoss)
}

// -------------------------------------------------------------------

// MocketSensor

// optional double RTT = 1;
inline void MocketSensor::clear_rtt() {
  rtt_ = 0;
}
inline double MocketSensor::rtt() const {
  // @@protoc_insertion_point(field_get:ddam.MocketSensor.RTT)
  return rtt_;
}
inline void MocketSensor::set_rtt(double value) {
  
  rtt_ = value;
  // @@protoc_insertion_point(field_set:ddam.MocketSensor.RTT)
}

// -------------------------------------------------------------------

// ReadableTraffic

// map<string, .ddam.ReadableSource> sources = 1;
inline int ReadableTraffic::sources_size() const {
  return sources_.size();
}
inline void ReadableTraffic::clear_sources() {
  sources_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >&
ReadableTraffic::sources() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTraffic.sources)
  return sources_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >*
ReadableTraffic::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTraffic.sources)
  return sources_.MutableMap();
}

// -------------------------------------------------------------------

// ReadableSource

// map<string, .ddam.ReadableLink> destinations = 1;
inline int ReadableSource::destinations_size() const {
  return destinations_.size();
}
inline void ReadableSource::clear_destinations() {
  destinations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >&
ReadableSource::destinations() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableSource.destinations)
  return destinations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >*
ReadableSource::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableSource.destinations)
  return destinations_.MutableMap();
}

// -------------------------------------------------------------------

// ReadableLink

// optional string ipSrc = 1;
inline void ReadableLink::clear_ipsrc() {
  ipsrc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableLink::ipsrc() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.ipSrc)
  return ipsrc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableLink::set_ipsrc(const ::std::string& value) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableLink.ipSrc)
}
inline void ReadableLink::set_ipsrc(const char* value) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableLink.ipSrc)
}
inline void ReadableLink::set_ipsrc(const char* value, size_t size) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableLink.ipSrc)
}
inline ::std::string* ReadableLink::mutable_ipsrc() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.ipSrc)
  return ipsrc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableLink::release_ipsrc() {
  
  return ipsrc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableLink::set_allocated_ipsrc(::std::string* ipsrc) {
  if (ipsrc != NULL) {
    
  } else {
    
  }
  ipsrc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipsrc);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.ipSrc)
}

// optional string ipDst = 2;
inline void ReadableLink::clear_ipdst() {
  ipdst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableLink::ipdst() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.ipDst)
  return ipdst_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableLink::set_ipdst(const ::std::string& value) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableLink.ipDst)
}
inline void ReadableLink::set_ipdst(const char* value) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableLink.ipDst)
}
inline void ReadableLink::set_ipdst(const char* value, size_t size) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableLink.ipDst)
}
inline ::std::string* ReadableLink::mutable_ipdst() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.ipDst)
  return ipdst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableLink::release_ipdst() {
  
  return ipdst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableLink::set_allocated_ipdst(::std::string* ipdst) {
  if (ipdst != NULL) {
    
  } else {
    
  }
  ipdst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipdst);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.ipDst)
}

// repeated .ddam.Stat stats = 3;
inline int ReadableLink::stats_size() const {
  return stats_.size();
}
inline void ReadableLink::clear_stats() {
  stats_.Clear();
}
inline const ::ddam::Stat& ReadableLink::stats(int index) const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.stats)
  return stats_.Get(index);
}
inline ::ddam::Stat* ReadableLink::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.stats)
  return stats_.Mutable(index);
}
inline ::ddam::Stat* ReadableLink::add_stats() {
  // @@protoc_insertion_point(field_add:ddam.ReadableLink.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
ReadableLink::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ddam.ReadableLink.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
ReadableLink::stats() const {
  // @@protoc_insertion_point(field_list:ddam.ReadableLink.stats)
  return stats_;
}

// optional .ddam.Description description = 4;
inline bool ReadableLink::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
inline void ReadableLink::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
inline const ::ddam::Description& ReadableLink::description() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::ddam::Description* ReadableLink::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::ddam::Description;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.description)
  return description_;
}
inline ::ddam::Description* ReadableLink::release_description() {
  
  ::ddam::Description* temp = description_;
  description_ = NULL;
  return temp;
}
inline void ReadableLink::set_allocated_description(::ddam::Description* description) {
  delete description_;
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.description)
}

// optional .ddam.MocketSensor mocketSensor = 5;
inline bool ReadableLink::has_mocketsensor() const {
  return !_is_default_instance_ && mocketsensor_ != NULL;
}
inline void ReadableLink::clear_mocketsensor() {
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
}
inline const ::ddam::MocketSensor& ReadableLink::mocketsensor() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.mocketSensor)
  return mocketsensor_ != NULL ? *mocketsensor_ : *default_instance_->mocketsensor_;
}
inline ::ddam::MocketSensor* ReadableLink::mutable_mocketsensor() {
  
  if (mocketsensor_ == NULL) {
    mocketsensor_ = new ::ddam::MocketSensor;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.mocketSensor)
  return mocketsensor_;
}
inline ::ddam::MocketSensor* ReadableLink::release_mocketsensor() {
  
  ::ddam::MocketSensor* temp = mocketsensor_;
  mocketsensor_ = NULL;
  return temp;
}
inline void ReadableLink::set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor) {
  delete mocketsensor_;
  mocketsensor_ = mocketsensor;
  if (mocketsensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.mocketSensor)
}

// optional .google.protobuf.Timestamp timestamp = 6;
inline bool ReadableLink::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void ReadableLink::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& ReadableLink::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableLink::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableLink::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadableLink::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_2eproto__INCLUDED
