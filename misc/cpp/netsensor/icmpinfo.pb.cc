// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icmpinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "icmpinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {

namespace {

const ::google::protobuf::Descriptor* ICMPPacketsByInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICMPPacketsByInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoICMPInfoContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoICMPInfoContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoIdentification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoIdentification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoIpHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoIpHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDatagramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDatagramInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoICMPTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoICMPTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoExtraAddresses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoExtraAddresses_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_icmpinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_icmpinfo_2eproto() {
  protobuf_AddDesc_icmpinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "icmpinfo.proto");
  GOOGLE_CHECK(file != NULL);
  ICMPPacketsByInterface_descriptor_ = file->message_type(0);
  static const int ICMPPacketsByInterface_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, monitoringinterface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, icmpcontainers_),
  };
  ICMPPacketsByInterface_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ICMPPacketsByInterface_descriptor_,
      ICMPPacketsByInterface::internal_default_instance(),
      ICMPPacketsByInterface_offsets_,
      -1,
      -1,
      -1,
      sizeof(ICMPPacketsByInterface),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, _internal_metadata_));
  ProtoICMPInfoContainer_descriptor_ = file->message_type(1);
  static const int ProtoICMPInfoContainer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, sourcemac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, destmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, sourceipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, destipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, icmppayload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, timestamp_),
  };
  ProtoICMPInfoContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoICMPInfoContainer_descriptor_,
      ProtoICMPInfoContainer::internal_default_instance(),
      ProtoICMPInfoContainer_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoICMPInfoContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, _internal_metadata_));
  ProtoData_descriptor_ = file->message_type(2);
  static const int ProtoData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, pointertoerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, ipheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, dgram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, icmptimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, extraaddresses_),
  };
  ProtoData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoData_descriptor_,
      ProtoData::internal_default_instance(),
      ProtoData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, _internal_metadata_));
  ProtoIdentification_descriptor_ = file->message_type(3);
  static const int ProtoIdentification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, sequencenumber_),
  };
  ProtoIdentification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoIdentification_descriptor_,
      ProtoIdentification::internal_default_instance(),
      ProtoIdentification_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoIdentification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, _internal_metadata_));
  ProtoIpHeader_descriptor_ = file->message_type(4);
  static const int ProtoIpHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, tos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, origsourceipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, origdestipaddr_),
  };
  ProtoIpHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoIpHeader_descriptor_,
      ProtoIpHeader::internal_default_instance(),
      ProtoIpHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoIpHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, _internal_metadata_));
  ProtoDatagramInfo_descriptor_ = file->message_type(5);
  static const int ProtoDatagramInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, sourceport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, destport_),
  };
  ProtoDatagramInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoDatagramInfo_descriptor_,
      ProtoDatagramInfo::internal_default_instance(),
      ProtoDatagramInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoDatagramInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, _internal_metadata_));
  ProtoICMPTime_descriptor_ = file->message_type(6);
  static const int ProtoICMPTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, originatetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, receivetimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, transmittimestamp_),
  };
  ProtoICMPTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoICMPTime_descriptor_,
      ProtoICMPTime::internal_default_instance(),
      ProtoICMPTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoICMPTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, _internal_metadata_));
  ProtoExtraAddresses_descriptor_ = file->message_type(7);
  static const int ProtoExtraAddresses_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, timesrepeated_),
  };
  ProtoExtraAddresses_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoExtraAddresses_descriptor_,
      ProtoExtraAddresses::internal_default_instance(),
      ProtoExtraAddresses_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoExtraAddresses),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_icmpinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ICMPPacketsByInterface_descriptor_, ICMPPacketsByInterface::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoICMPInfoContainer_descriptor_, ProtoICMPInfoContainer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoData_descriptor_, ProtoData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoIdentification_descriptor_, ProtoIdentification::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoIpHeader_descriptor_, ProtoIpHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoDatagramInfo_descriptor_, ProtoDatagramInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoICMPTime_descriptor_, ProtoICMPTime::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoExtraAddresses_descriptor_, ProtoExtraAddresses::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_icmpinfo_2eproto() {
  ICMPPacketsByInterface_default_instance_.Shutdown();
  delete ICMPPacketsByInterface_reflection_;
  ProtoICMPInfoContainer_default_instance_.Shutdown();
  delete ProtoICMPInfoContainer_reflection_;
  ProtoData_default_instance_.Shutdown();
  delete ProtoData_reflection_;
  ProtoIdentification_default_instance_.Shutdown();
  delete ProtoIdentification_reflection_;
  ProtoIpHeader_default_instance_.Shutdown();
  delete ProtoIpHeader_reflection_;
  ProtoDatagramInfo_default_instance_.Shutdown();
  delete ProtoDatagramInfo_reflection_;
  ProtoICMPTime_default_instance_.Shutdown();
  delete ProtoICMPTime_reflection_;
  ProtoExtraAddresses_default_instance_.Shutdown();
  delete ProtoExtraAddresses_reflection_;
}

void protobuf_InitDefaults_icmpinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ICMPPacketsByInterface_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ProtoICMPInfoContainer_default_instance_.DefaultConstruct();
  ProtoData_default_instance_.DefaultConstruct();
  ProtoIdentification_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ProtoIpHeader_default_instance_.DefaultConstruct();
  ProtoDatagramInfo_default_instance_.DefaultConstruct();
  ProtoICMPTime_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ProtoExtraAddresses_default_instance_.DefaultConstruct();
  ICMPPacketsByInterface_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoICMPInfoContainer_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoIdentification_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoIpHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoDatagramInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoICMPTime_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProtoExtraAddresses_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_icmpinfo_2eproto_once_);
void protobuf_InitDefaults_icmpinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_icmpinfo_2eproto_once_,
                 &protobuf_InitDefaults_icmpinfo_2eproto_impl);
}
void protobuf_AddDesc_icmpinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_icmpinfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016icmpinfo.proto\022\tnetsensor\032\037google/prot"
    "obuf/timestamp.proto\"p\n\026ICMPPacketsByInt"
    "erface\022\033\n\023monitoringInterface\030\001 \001(\t\0229\n\016i"
    "cmpContainers\030\002 \003(\0132!.netsensor.ProtoICM"
    "PInfoContainer\"\353\001\n\026ProtoICMPInfoContaine"
    "r\022\021\n\tsourceMAC\030\001 \001(\t\022\017\n\007destMAC\030\002 \001(\t\022\024\n"
    "\014sourceIPAddr\030\003 \001(\t\022\022\n\ndestIPAddr\030\004 \001(\t\022"
    "\014\n\004type\030\005 \001(\r\022\014\n\004code\030\006 \001(\r\022\r\n\005count\030\007 \001"
    "(\r\022)\n\013ICMPPayload\030\010 \001(\0132\024.netsensor.Prot"
    "oData\022-\n\ttimestamp\030\t \001(\0132\032.google.protob"
    "uf.Timestamp\"\221\002\n\tProtoData\022\026\n\016pointerToE"
    "rror\030\001 \001(\r\022*\n\002id\030\002 \001(\0132\036.netsensor.Proto"
    "Identification\022*\n\010ipHeader\030\003 \001(\0132\030.netse"
    "nsor.ProtoIpHeader\022+\n\005dgram\030\004 \001(\0132\034.nets"
    "ensor.ProtoDatagramInfo\022/\n\ricmpTimestamp"
    "\030\005 \001(\0132\030.netsensor.ProtoICMPTime\0226\n\016extr"
    "aAddresses\030\006 \003(\0132\036.netsensor.ProtoExtraA"
    "ddresses\"A\n\023ProtoIdentification\022\022\n\nident"
    "ifier\030\001 \001(\r\022\026\n\016sequenceNumber\030\002 \001(\r\"p\n\rP"
    "rotoIpHeader\022\013\n\003tos\030\001 \001(\r\022\016\n\006length\030\002 \001("
    "\r\022\020\n\010protocol\030\003 \001(\r\022\030\n\020origSourceIPAddr\030"
    "\004 \001(\t\022\026\n\016origDestIPAddr\030\005 \001(\t\"9\n\021ProtoDa"
    "tagramInfo\022\022\n\nsourcePort\030\001 \001(\r\022\020\n\010destPo"
    "rt\030\002 \001(\r\"`\n\rProtoICMPTime\022\032\n\022originateTi"
    "mestamp\030\001 \001(\r\022\030\n\020receiveTimestamp\030\002 \001(\r\022"
    "\031\n\021transmitTimestamp\030\003 \001(\r\"\?\n\023ProtoExtra"
    "Addresses\022\021\n\tIPAddress\030\001 \001(\t\022\025\n\rtimesRep"
    "eated\030\002 \001(\rB\013Z\tnetsensorb\006proto3", 1112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "icmpinfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_icmpinfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_icmpinfo_2eproto_once_);
void protobuf_AddDesc_icmpinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_icmpinfo_2eproto_once_,
                 &protobuf_AddDesc_icmpinfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_icmpinfo_2eproto {
  StaticDescriptorInitializer_icmpinfo_2eproto() {
    protobuf_AddDesc_icmpinfo_2eproto();
  }
} static_descriptor_initializer_icmpinfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ICMPPacketsByInterface::kMonitoringInterfaceFieldNumber;
const int ICMPPacketsByInterface::kIcmpContainersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ICMPPacketsByInterface::ICMPPacketsByInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ICMPPacketsByInterface)
}

void ICMPPacketsByInterface::InitAsDefaultInstance() {
}

ICMPPacketsByInterface::ICMPPacketsByInterface(const ICMPPacketsByInterface& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ICMPPacketsByInterface)
}

void ICMPPacketsByInterface::SharedCtor() {
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ICMPPacketsByInterface::~ICMPPacketsByInterface() {
  // @@protoc_insertion_point(destructor:netsensor.ICMPPacketsByInterface)
  SharedDtor();
}

void ICMPPacketsByInterface::SharedDtor() {
  monitoringinterface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ICMPPacketsByInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICMPPacketsByInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICMPPacketsByInterface_descriptor_;
}

const ICMPPacketsByInterface& ICMPPacketsByInterface::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ICMPPacketsByInterface> ICMPPacketsByInterface_default_instance_;

ICMPPacketsByInterface* ICMPPacketsByInterface::New(::google::protobuf::Arena* arena) const {
  ICMPPacketsByInterface* n = new ICMPPacketsByInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ICMPPacketsByInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ICMPPacketsByInterface)
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icmpcontainers_.Clear();
}

bool ICMPPacketsByInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ICMPPacketsByInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string monitoringInterface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoringinterface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoringinterface().data(), this->monitoringinterface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ICMPPacketsByInterface.monitoringInterface"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_icmpContainers;
        break;
      }

      // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
      case 2: {
        if (tag == 18) {
         parse_icmpContainers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_icmpContainers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_icmpcontainers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_icmpContainers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ICMPPacketsByInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ICMPPacketsByInterface)
  return false;
#undef DO_
}

void ICMPPacketsByInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ICMPPacketsByInterface)
  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ICMPPacketsByInterface.monitoringInterface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->monitoringinterface(), output);
  }

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  for (unsigned int i = 0, n = this->icmpcontainers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->icmpcontainers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ICMPPacketsByInterface)
}

::google::protobuf::uint8* ICMPPacketsByInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ICMPPacketsByInterface)
  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ICMPPacketsByInterface.monitoringInterface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoringinterface(), target);
  }

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  for (unsigned int i = 0, n = this->icmpcontainers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->icmpcontainers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ICMPPacketsByInterface)
  return target;
}

size_t ICMPPacketsByInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ICMPPacketsByInterface)
  size_t total_size = 0;

  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoringinterface());
  }

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  {
    unsigned int count = this->icmpcontainers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icmpcontainers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICMPPacketsByInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ICMPPacketsByInterface)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ICMPPacketsByInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ICMPPacketsByInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ICMPPacketsByInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ICMPPacketsByInterface)
    UnsafeMergeFrom(*source);
  }
}

void ICMPPacketsByInterface::MergeFrom(const ICMPPacketsByInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ICMPPacketsByInterface)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ICMPPacketsByInterface::UnsafeMergeFrom(const ICMPPacketsByInterface& from) {
  GOOGLE_DCHECK(&from != this);
  icmpcontainers_.MergeFrom(from.icmpcontainers_);
  if (from.monitoringinterface().size() > 0) {

    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
}

void ICMPPacketsByInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ICMPPacketsByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICMPPacketsByInterface::CopyFrom(const ICMPPacketsByInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ICMPPacketsByInterface)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ICMPPacketsByInterface::IsInitialized() const {

  return true;
}

void ICMPPacketsByInterface::Swap(ICMPPacketsByInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ICMPPacketsByInterface::InternalSwap(ICMPPacketsByInterface* other) {
  monitoringinterface_.Swap(&other->monitoringinterface_);
  icmpcontainers_.UnsafeArenaSwap(&other->icmpcontainers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ICMPPacketsByInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICMPPacketsByInterface_descriptor_;
  metadata.reflection = ICMPPacketsByInterface_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ICMPPacketsByInterface

// optional string monitoringInterface = 1;
void ICMPPacketsByInterface::clear_monitoringinterface() {
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ICMPPacketsByInterface::monitoringinterface() const {
  // @@protoc_insertion_point(field_get:netsensor.ICMPPacketsByInterface.monitoringInterface)
  return monitoringinterface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ICMPPacketsByInterface::set_monitoringinterface(const ::std::string& value) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
void ICMPPacketsByInterface::set_monitoringinterface(const char* value) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
void ICMPPacketsByInterface::set_monitoringinterface(const char* value, size_t size) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
::std::string* ICMPPacketsByInterface::mutable_monitoringinterface() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ICMPPacketsByInterface.monitoringInterface)
  return monitoringinterface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ICMPPacketsByInterface::release_monitoringinterface() {
  // @@protoc_insertion_point(field_release:netsensor.ICMPPacketsByInterface.monitoringInterface)
  
  return monitoringinterface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ICMPPacketsByInterface::set_allocated_monitoringinterface(::std::string* monitoringinterface) {
  if (monitoringinterface != NULL) {
    
  } else {
    
  }
  monitoringinterface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoringinterface);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ICMPPacketsByInterface.monitoringInterface)
}

// repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
int ICMPPacketsByInterface::icmpcontainers_size() const {
  return icmpcontainers_.size();
}
void ICMPPacketsByInterface::clear_icmpcontainers() {
  icmpcontainers_.Clear();
}
const ::netsensor::ProtoICMPInfoContainer& ICMPPacketsByInterface::icmpcontainers(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Get(index);
}
::netsensor::ProtoICMPInfoContainer* ICMPPacketsByInterface::mutable_icmpcontainers(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Mutable(index);
}
::netsensor::ProtoICMPInfoContainer* ICMPPacketsByInterface::add_icmpcontainers() {
  // @@protoc_insertion_point(field_add:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::ProtoICMPInfoContainer >*
ICMPPacketsByInterface::mutable_icmpcontainers() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.ICMPPacketsByInterface.icmpContainers)
  return &icmpcontainers_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::ProtoICMPInfoContainer >&
ICMPPacketsByInterface::icmpcontainers() const {
  // @@protoc_insertion_point(field_list:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_;
}

inline const ICMPPacketsByInterface* ICMPPacketsByInterface::internal_default_instance() {
  return &ICMPPacketsByInterface_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoICMPInfoContainer::kSourceMACFieldNumber;
const int ProtoICMPInfoContainer::kDestMACFieldNumber;
const int ProtoICMPInfoContainer::kSourceIPAddrFieldNumber;
const int ProtoICMPInfoContainer::kDestIPAddrFieldNumber;
const int ProtoICMPInfoContainer::kTypeFieldNumber;
const int ProtoICMPInfoContainer::kCodeFieldNumber;
const int ProtoICMPInfoContainer::kCountFieldNumber;
const int ProtoICMPInfoContainer::kICMPPayloadFieldNumber;
const int ProtoICMPInfoContainer::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoICMPInfoContainer::ProtoICMPInfoContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoICMPInfoContainer)
}

void ProtoICMPInfoContainer::InitAsDefaultInstance() {
  icmppayload_ = const_cast< ::netsensor::ProtoData*>(
      ::netsensor::ProtoData::internal_default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

ProtoICMPInfoContainer::ProtoICMPInfoContainer(const ProtoICMPInfoContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoICMPInfoContainer)
}

void ProtoICMPInfoContainer::SharedCtor() {
  sourcemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icmppayload_ = NULL;
  timestamp_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  _cached_size_ = 0;
}

ProtoICMPInfoContainer::~ProtoICMPInfoContainer() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoICMPInfoContainer)
  SharedDtor();
}

void ProtoICMPInfoContainer::SharedDtor() {
  sourcemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ProtoICMPInfoContainer_default_instance_.get()) {
    delete icmppayload_;
    delete timestamp_;
  }
}

void ProtoICMPInfoContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoICMPInfoContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoICMPInfoContainer_descriptor_;
}

const ProtoICMPInfoContainer& ProtoICMPInfoContainer::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoICMPInfoContainer> ProtoICMPInfoContainer_default_instance_;

ProtoICMPInfoContainer* ProtoICMPInfoContainer::New(::google::protobuf::Arena* arena) const {
  ProtoICMPInfoContainer* n = new ProtoICMPInfoContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoICMPInfoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoICMPInfoContainer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoICMPInfoContainer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoICMPInfoContainer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, count_);
  sourcemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && icmppayload_ != NULL) delete icmppayload_;
  icmppayload_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoICMPInfoContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoICMPInfoContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sourceMAC = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcemac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcemac().data(), this->sourcemac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.sourceMAC"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destMAC;
        break;
      }

      // optional string destMAC = 2;
      case 2: {
        if (tag == 18) {
         parse_destMAC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destmac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destmac().data(), this->destmac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.destMAC"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sourceIPAddr;
        break;
      }

      // optional string sourceIPAddr = 3;
      case 3: {
        if (tag == 26) {
         parse_sourceIPAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourceipaddr().data(), this->sourceipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.sourceIPAddr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_destIPAddr;
        break;
      }

      // optional string destIPAddr = 4;
      case 4: {
        if (tag == 34) {
         parse_destIPAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destipaddr().data(), this->destipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.destIPAddr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_code;
        break;
      }

      // optional uint32 code = 6;
      case 6: {
        if (tag == 48) {
         parse_code:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional uint32 count = 7;
      case 7: {
        if (tag == 56) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ICMPPayload;
        break;
      }

      // optional .netsensor.ProtoData ICMPPayload = 8;
      case 8: {
        if (tag == 66) {
         parse_ICMPPayload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icmppayload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 9;
      case 9: {
        if (tag == 74) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoICMPInfoContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoICMPInfoContainer)
  return false;
#undef DO_
}

void ProtoICMPInfoContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoICMPInfoContainer)
  // optional string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcemac().data(), this->sourcemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceMAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcemac(), output);
  }

  // optional string destMAC = 2;
  if (this->destmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destmac().data(), this->destmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destMAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destmac(), output);
  }

  // optional string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceipaddr().data(), this->sourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sourceipaddr(), output);
  }

  // optional string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destipaddr().data(), this->destipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destipaddr(), output);
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // optional uint32 code = 6;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->code(), output);
  }

  // optional uint32 count = 7;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // optional .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->icmppayload_, output);
  }

  // optional .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoICMPInfoContainer)
}

::google::protobuf::uint8* ProtoICMPInfoContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoICMPInfoContainer)
  // optional string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcemac().data(), this->sourcemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceMAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcemac(), target);
  }

  // optional string destMAC = 2;
  if (this->destmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destmac().data(), this->destmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destMAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destmac(), target);
  }

  // optional string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceipaddr().data(), this->sourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sourceipaddr(), target);
  }

  // optional string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destipaddr().data(), this->destipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destipaddr(), target);
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // optional uint32 code = 6;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->code(), target);
  }

  // optional uint32 count = 7;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // optional .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->icmppayload_, false, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoICMPInfoContainer)
  return target;
}

size_t ProtoICMPInfoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoICMPInfoContainer)
  size_t total_size = 0;

  // optional string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcemac());
  }

  // optional string destMAC = 2;
  if (this->destmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destmac());
  }

  // optional string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceipaddr());
  }

  // optional string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destipaddr());
  }

  // optional uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional uint32 code = 6;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // optional uint32 count = 7;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // optional .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->icmppayload_);
  }

  // optional .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoICMPInfoContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoICMPInfoContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoICMPInfoContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoICMPInfoContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoICMPInfoContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoICMPInfoContainer)
    UnsafeMergeFrom(*source);
  }
}

void ProtoICMPInfoContainer::MergeFrom(const ProtoICMPInfoContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoICMPInfoContainer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoICMPInfoContainer::UnsafeMergeFrom(const ProtoICMPInfoContainer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sourcemac().size() > 0) {

    sourcemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcemac_);
  }
  if (from.destmac().size() > 0) {

    destmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destmac_);
  }
  if (from.sourceipaddr().size() > 0) {

    sourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceipaddr_);
  }
  if (from.destipaddr().size() > 0) {

    destipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destipaddr_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.has_icmppayload()) {
    mutable_icmppayload()->::netsensor::ProtoData::MergeFrom(from.icmppayload());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void ProtoICMPInfoContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoICMPInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoICMPInfoContainer::CopyFrom(const ProtoICMPInfoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoICMPInfoContainer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoICMPInfoContainer::IsInitialized() const {

  return true;
}

void ProtoICMPInfoContainer::Swap(ProtoICMPInfoContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoICMPInfoContainer::InternalSwap(ProtoICMPInfoContainer* other) {
  sourcemac_.Swap(&other->sourcemac_);
  destmac_.Swap(&other->destmac_);
  sourceipaddr_.Swap(&other->sourceipaddr_);
  destipaddr_.Swap(&other->destipaddr_);
  std::swap(type_, other->type_);
  std::swap(code_, other->code_);
  std::swap(count_, other->count_);
  std::swap(icmppayload_, other->icmppayload_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoICMPInfoContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoICMPInfoContainer_descriptor_;
  metadata.reflection = ProtoICMPInfoContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoICMPInfoContainer

// optional string sourceMAC = 1;
void ProtoICMPInfoContainer::clear_sourcemac() {
  sourcemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::sourcemac() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.sourceMAC)
  return sourcemac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_sourcemac(const ::std::string& value) {
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
void ProtoICMPInfoContainer::set_sourcemac(const char* value) {
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
void ProtoICMPInfoContainer::set_sourcemac(const char* value, size_t size) {
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
::std::string* ProtoICMPInfoContainer::mutable_sourcemac() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.sourceMAC)
  return sourcemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_sourcemac() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.sourceMAC)
  
  return sourcemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_sourcemac(::std::string* sourcemac) {
  if (sourcemac != NULL) {
    
  } else {
    
  }
  sourcemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcemac);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.sourceMAC)
}

// optional string destMAC = 2;
void ProtoICMPInfoContainer::clear_destmac() {
  destmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::destmac() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.destMAC)
  return destmac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_destmac(const ::std::string& value) {
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.destMAC)
}
void ProtoICMPInfoContainer::set_destmac(const char* value) {
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.destMAC)
}
void ProtoICMPInfoContainer::set_destmac(const char* value, size_t size) {
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.destMAC)
}
::std::string* ProtoICMPInfoContainer::mutable_destmac() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.destMAC)
  return destmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_destmac() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.destMAC)
  
  return destmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_destmac(::std::string* destmac) {
  if (destmac != NULL) {
    
  } else {
    
  }
  destmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destmac);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.destMAC)
}

// optional string sourceIPAddr = 3;
void ProtoICMPInfoContainer::clear_sourceipaddr() {
  sourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::sourceipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  return sourceipaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_sourceipaddr(const ::std::string& value) {
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
void ProtoICMPInfoContainer::set_sourceipaddr(const char* value) {
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
void ProtoICMPInfoContainer::set_sourceipaddr(const char* value, size_t size) {
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
::std::string* ProtoICMPInfoContainer::mutable_sourceipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  return sourceipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_sourceipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  
  return sourceipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_sourceipaddr(::std::string* sourceipaddr) {
  if (sourceipaddr != NULL) {
    
  } else {
    
  }
  sourceipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}

// optional string destIPAddr = 4;
void ProtoICMPInfoContainer::clear_destipaddr() {
  destipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::destipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.destIPAddr)
  return destipaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_destipaddr(const ::std::string& value) {
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
void ProtoICMPInfoContainer::set_destipaddr(const char* value) {
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
void ProtoICMPInfoContainer::set_destipaddr(const char* value, size_t size) {
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
::std::string* ProtoICMPInfoContainer::mutable_destipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.destIPAddr)
  return destipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_destipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.destIPAddr)
  
  return destipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_destipaddr(::std::string* destipaddr) {
  if (destipaddr != NULL) {
    
  } else {
    
  }
  destipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.destIPAddr)
}

// optional uint32 type = 5;
void ProtoICMPInfoContainer::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::type() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.type)
  return type_;
}
void ProtoICMPInfoContainer::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.type)
}

// optional uint32 code = 6;
void ProtoICMPInfoContainer::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::code() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.code)
  return code_;
}
void ProtoICMPInfoContainer::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.code)
}

// optional uint32 count = 7;
void ProtoICMPInfoContainer::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::count() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.count)
  return count_;
}
void ProtoICMPInfoContainer::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.count)
}

// optional .netsensor.ProtoData ICMPPayload = 8;
bool ProtoICMPInfoContainer::has_icmppayload() const {
  return this != internal_default_instance() && icmppayload_ != NULL;
}
void ProtoICMPInfoContainer::clear_icmppayload() {
  if (GetArenaNoVirtual() == NULL && icmppayload_ != NULL) delete icmppayload_;
  icmppayload_ = NULL;
}
const ::netsensor::ProtoData& ProtoICMPInfoContainer::icmppayload() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  return icmppayload_ != NULL ? *icmppayload_
                         : *::netsensor::ProtoData::internal_default_instance();
}
::netsensor::ProtoData* ProtoICMPInfoContainer::mutable_icmppayload() {
  
  if (icmppayload_ == NULL) {
    icmppayload_ = new ::netsensor::ProtoData;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  return icmppayload_;
}
::netsensor::ProtoData* ProtoICMPInfoContainer::release_icmppayload() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  
  ::netsensor::ProtoData* temp = icmppayload_;
  icmppayload_ = NULL;
  return temp;
}
void ProtoICMPInfoContainer::set_allocated_icmppayload(::netsensor::ProtoData* icmppayload) {
  delete icmppayload_;
  icmppayload_ = icmppayload;
  if (icmppayload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.ICMPPayload)
}

// optional .google.protobuf.Timestamp timestamp = 9;
bool ProtoICMPInfoContainer::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void ProtoICMPInfoContainer::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ProtoICMPInfoContainer::timestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ProtoICMPInfoContainer::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* ProtoICMPInfoContainer::release_timestamp() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ProtoICMPInfoContainer::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.timestamp)
}

inline const ProtoICMPInfoContainer* ProtoICMPInfoContainer::internal_default_instance() {
  return &ProtoICMPInfoContainer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoData::kPointerToErrorFieldNumber;
const int ProtoData::kIdFieldNumber;
const int ProtoData::kIpHeaderFieldNumber;
const int ProtoData::kDgramFieldNumber;
const int ProtoData::kIcmpTimestampFieldNumber;
const int ProtoData::kExtraAddressesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoData::ProtoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoData)
}

void ProtoData::InitAsDefaultInstance() {
  id_ = const_cast< ::netsensor::ProtoIdentification*>(
      ::netsensor::ProtoIdentification::internal_default_instance());
  ipheader_ = const_cast< ::netsensor::ProtoIpHeader*>(
      ::netsensor::ProtoIpHeader::internal_default_instance());
  dgram_ = const_cast< ::netsensor::ProtoDatagramInfo*>(
      ::netsensor::ProtoDatagramInfo::internal_default_instance());
  icmptimestamp_ = const_cast< ::netsensor::ProtoICMPTime*>(
      ::netsensor::ProtoICMPTime::internal_default_instance());
}

ProtoData::ProtoData(const ProtoData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoData)
}

void ProtoData::SharedCtor() {
  id_ = NULL;
  ipheader_ = NULL;
  dgram_ = NULL;
  icmptimestamp_ = NULL;
  pointertoerror_ = 0u;
  _cached_size_ = 0;
}

ProtoData::~ProtoData() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoData)
  SharedDtor();
}

void ProtoData::SharedDtor() {
  if (this != &ProtoData_default_instance_.get()) {
    delete id_;
    delete ipheader_;
    delete dgram_;
    delete icmptimestamp_;
  }
}

void ProtoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoData_descriptor_;
}

const ProtoData& ProtoData::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoData> ProtoData_default_instance_;

ProtoData* ProtoData::New(::google::protobuf::Arena* arena) const {
  ProtoData* n = new ProtoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoData)
  pointertoerror_ = 0u;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipheader_ != NULL) delete ipheader_;
  ipheader_ = NULL;
  if (GetArenaNoVirtual() == NULL && dgram_ != NULL) delete dgram_;
  dgram_ = NULL;
  if (GetArenaNoVirtual() == NULL && icmptimestamp_ != NULL) delete icmptimestamp_;
  icmptimestamp_ = NULL;
  extraaddresses_.Clear();
}

bool ProtoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pointerToError = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointertoerror_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .netsensor.ProtoIdentification id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipHeader;
        break;
      }

      // optional .netsensor.ProtoIpHeader ipHeader = 3;
      case 3: {
        if (tag == 26) {
         parse_ipHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dgram;
        break;
      }

      // optional .netsensor.ProtoDatagramInfo dgram = 4;
      case 4: {
        if (tag == 34) {
         parse_dgram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dgram()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_icmpTimestamp;
        break;
      }

      // optional .netsensor.ProtoICMPTime icmpTimestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_icmpTimestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icmptimestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extraAddresses;
        break;
      }

      // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
      case 6: {
        if (tag == 50) {
         parse_extraAddresses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_extraAddresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extraaddresses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_extraAddresses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoData)
  return false;
#undef DO_
}

void ProtoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoData)
  // optional uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pointertoerror(), output);
  }

  // optional .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ipheader_, output);
  }

  // optional .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dgram_, output);
  }

  // optional .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->icmptimestamp_, output);
  }

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  for (unsigned int i = 0, n = this->extraaddresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->extraaddresses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoData)
}

::google::protobuf::uint8* ProtoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoData)
  // optional uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pointertoerror(), target);
  }

  // optional .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, false, target);
  }

  // optional .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ipheader_, false, target);
  }

  // optional .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dgram_, false, target);
  }

  // optional .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->icmptimestamp_, false, target);
  }

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  for (unsigned int i = 0, n = this->extraaddresses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->extraaddresses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoData)
  return target;
}

size_t ProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoData)
  size_t total_size = 0;

  // optional uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pointertoerror());
  }

  // optional .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ipheader_);
  }

  // optional .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dgram_);
  }

  // optional .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->icmptimestamp_);
  }

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  {
    unsigned int count = this->extraaddresses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraaddresses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoData)
    UnsafeMergeFrom(*source);
  }
}

void ProtoData::MergeFrom(const ProtoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoData::UnsafeMergeFrom(const ProtoData& from) {
  GOOGLE_DCHECK(&from != this);
  extraaddresses_.MergeFrom(from.extraaddresses_);
  if (from.pointertoerror() != 0) {
    set_pointertoerror(from.pointertoerror());
  }
  if (from.has_id()) {
    mutable_id()->::netsensor::ProtoIdentification::MergeFrom(from.id());
  }
  if (from.has_ipheader()) {
    mutable_ipheader()->::netsensor::ProtoIpHeader::MergeFrom(from.ipheader());
  }
  if (from.has_dgram()) {
    mutable_dgram()->::netsensor::ProtoDatagramInfo::MergeFrom(from.dgram());
  }
  if (from.has_icmptimestamp()) {
    mutable_icmptimestamp()->::netsensor::ProtoICMPTime::MergeFrom(from.icmptimestamp());
  }
}

void ProtoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoData::CopyFrom(const ProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoData::IsInitialized() const {

  return true;
}

void ProtoData::Swap(ProtoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoData::InternalSwap(ProtoData* other) {
  std::swap(pointertoerror_, other->pointertoerror_);
  std::swap(id_, other->id_);
  std::swap(ipheader_, other->ipheader_);
  std::swap(dgram_, other->dgram_);
  std::swap(icmptimestamp_, other->icmptimestamp_);
  extraaddresses_.UnsafeArenaSwap(&other->extraaddresses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoData_descriptor_;
  metadata.reflection = ProtoData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoData

// optional uint32 pointerToError = 1;
void ProtoData::clear_pointertoerror() {
  pointertoerror_ = 0u;
}
::google::protobuf::uint32 ProtoData::pointertoerror() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.pointerToError)
  return pointertoerror_;
}
void ProtoData::set_pointertoerror(::google::protobuf::uint32 value) {
  
  pointertoerror_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoData.pointerToError)
}

// optional .netsensor.ProtoIdentification id = 2;
bool ProtoData::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void ProtoData::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::netsensor::ProtoIdentification& ProtoData::id() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.id)
  return id_ != NULL ? *id_
                         : *::netsensor::ProtoIdentification::internal_default_instance();
}
::netsensor::ProtoIdentification* ProtoData::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::netsensor::ProtoIdentification;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.id)
  return id_;
}
::netsensor::ProtoIdentification* ProtoData::release_id() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.id)
  
  ::netsensor::ProtoIdentification* temp = id_;
  id_ = NULL;
  return temp;
}
void ProtoData::set_allocated_id(::netsensor::ProtoIdentification* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.id)
}

// optional .netsensor.ProtoIpHeader ipHeader = 3;
bool ProtoData::has_ipheader() const {
  return this != internal_default_instance() && ipheader_ != NULL;
}
void ProtoData::clear_ipheader() {
  if (GetArenaNoVirtual() == NULL && ipheader_ != NULL) delete ipheader_;
  ipheader_ = NULL;
}
const ::netsensor::ProtoIpHeader& ProtoData::ipheader() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.ipHeader)
  return ipheader_ != NULL ? *ipheader_
                         : *::netsensor::ProtoIpHeader::internal_default_instance();
}
::netsensor::ProtoIpHeader* ProtoData::mutable_ipheader() {
  
  if (ipheader_ == NULL) {
    ipheader_ = new ::netsensor::ProtoIpHeader;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.ipHeader)
  return ipheader_;
}
::netsensor::ProtoIpHeader* ProtoData::release_ipheader() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.ipHeader)
  
  ::netsensor::ProtoIpHeader* temp = ipheader_;
  ipheader_ = NULL;
  return temp;
}
void ProtoData::set_allocated_ipheader(::netsensor::ProtoIpHeader* ipheader) {
  delete ipheader_;
  ipheader_ = ipheader;
  if (ipheader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.ipHeader)
}

// optional .netsensor.ProtoDatagramInfo dgram = 4;
bool ProtoData::has_dgram() const {
  return this != internal_default_instance() && dgram_ != NULL;
}
void ProtoData::clear_dgram() {
  if (GetArenaNoVirtual() == NULL && dgram_ != NULL) delete dgram_;
  dgram_ = NULL;
}
const ::netsensor::ProtoDatagramInfo& ProtoData::dgram() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.dgram)
  return dgram_ != NULL ? *dgram_
                         : *::netsensor::ProtoDatagramInfo::internal_default_instance();
}
::netsensor::ProtoDatagramInfo* ProtoData::mutable_dgram() {
  
  if (dgram_ == NULL) {
    dgram_ = new ::netsensor::ProtoDatagramInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.dgram)
  return dgram_;
}
::netsensor::ProtoDatagramInfo* ProtoData::release_dgram() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.dgram)
  
  ::netsensor::ProtoDatagramInfo* temp = dgram_;
  dgram_ = NULL;
  return temp;
}
void ProtoData::set_allocated_dgram(::netsensor::ProtoDatagramInfo* dgram) {
  delete dgram_;
  dgram_ = dgram;
  if (dgram) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.dgram)
}

// optional .netsensor.ProtoICMPTime icmpTimestamp = 5;
bool ProtoData::has_icmptimestamp() const {
  return this != internal_default_instance() && icmptimestamp_ != NULL;
}
void ProtoData::clear_icmptimestamp() {
  if (GetArenaNoVirtual() == NULL && icmptimestamp_ != NULL) delete icmptimestamp_;
  icmptimestamp_ = NULL;
}
const ::netsensor::ProtoICMPTime& ProtoData::icmptimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.icmpTimestamp)
  return icmptimestamp_ != NULL ? *icmptimestamp_
                         : *::netsensor::ProtoICMPTime::internal_default_instance();
}
::netsensor::ProtoICMPTime* ProtoData::mutable_icmptimestamp() {
  
  if (icmptimestamp_ == NULL) {
    icmptimestamp_ = new ::netsensor::ProtoICMPTime;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.icmpTimestamp)
  return icmptimestamp_;
}
::netsensor::ProtoICMPTime* ProtoData::release_icmptimestamp() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.icmpTimestamp)
  
  ::netsensor::ProtoICMPTime* temp = icmptimestamp_;
  icmptimestamp_ = NULL;
  return temp;
}
void ProtoData::set_allocated_icmptimestamp(::netsensor::ProtoICMPTime* icmptimestamp) {
  delete icmptimestamp_;
  icmptimestamp_ = icmptimestamp;
  if (icmptimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.icmpTimestamp)
}

// repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
int ProtoData::extraaddresses_size() const {
  return extraaddresses_.size();
}
void ProtoData::clear_extraaddresses() {
  extraaddresses_.Clear();
}
const ::netsensor::ProtoExtraAddresses& ProtoData::extraaddresses(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Get(index);
}
::netsensor::ProtoExtraAddresses* ProtoData::mutable_extraaddresses(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Mutable(index);
}
::netsensor::ProtoExtraAddresses* ProtoData::add_extraaddresses() {
  // @@protoc_insertion_point(field_add:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::ProtoExtraAddresses >*
ProtoData::mutable_extraaddresses() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.ProtoData.extraAddresses)
  return &extraaddresses_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::ProtoExtraAddresses >&
ProtoData::extraaddresses() const {
  // @@protoc_insertion_point(field_list:netsensor.ProtoData.extraAddresses)
  return extraaddresses_;
}

inline const ProtoData* ProtoData::internal_default_instance() {
  return &ProtoData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoIdentification::kIdentifierFieldNumber;
const int ProtoIdentification::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoIdentification::ProtoIdentification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoIdentification)
}

void ProtoIdentification::InitAsDefaultInstance() {
}

ProtoIdentification::ProtoIdentification(const ProtoIdentification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoIdentification)
}

void ProtoIdentification::SharedCtor() {
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&sequencenumber_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(sequencenumber_));
  _cached_size_ = 0;
}

ProtoIdentification::~ProtoIdentification() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoIdentification)
  SharedDtor();
}

void ProtoIdentification::SharedDtor() {
}

void ProtoIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoIdentification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoIdentification_descriptor_;
}

const ProtoIdentification& ProtoIdentification::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoIdentification> ProtoIdentification_default_instance_;

ProtoIdentification* ProtoIdentification::New(::google::protobuf::Arena* arena) const {
  ProtoIdentification* n = new ProtoIdentification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoIdentification::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoIdentification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoIdentification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoIdentification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(identifier_, sequencenumber_);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoIdentification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 identifier = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequenceNumber;
        break;
      }

      // optional uint32 sequenceNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_sequenceNumber:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequencenumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoIdentification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoIdentification)
  return false;
#undef DO_
}

void ProtoIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoIdentification)
  // optional uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // optional uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequencenumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoIdentification)
}

::google::protobuf::uint8* ProtoIdentification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoIdentification)
  // optional uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // optional uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequencenumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoIdentification)
  return target;
}

size_t ProtoIdentification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoIdentification)
  size_t total_size = 0;

  // optional uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // optional uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequencenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoIdentification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoIdentification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoIdentification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoIdentification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoIdentification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoIdentification)
    UnsafeMergeFrom(*source);
  }
}

void ProtoIdentification::MergeFrom(const ProtoIdentification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoIdentification)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoIdentification::UnsafeMergeFrom(const ProtoIdentification& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.sequencenumber() != 0) {
    set_sequencenumber(from.sequencenumber());
  }
}

void ProtoIdentification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoIdentification::CopyFrom(const ProtoIdentification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoIdentification)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoIdentification::IsInitialized() const {

  return true;
}

void ProtoIdentification::Swap(ProtoIdentification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoIdentification::InternalSwap(ProtoIdentification* other) {
  std::swap(identifier_, other->identifier_);
  std::swap(sequencenumber_, other->sequencenumber_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoIdentification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoIdentification_descriptor_;
  metadata.reflection = ProtoIdentification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoIdentification

// optional uint32 identifier = 1;
void ProtoIdentification::clear_identifier() {
  identifier_ = 0u;
}
::google::protobuf::uint32 ProtoIdentification::identifier() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIdentification.identifier)
  return identifier_;
}
void ProtoIdentification::set_identifier(::google::protobuf::uint32 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIdentification.identifier)
}

// optional uint32 sequenceNumber = 2;
void ProtoIdentification::clear_sequencenumber() {
  sequencenumber_ = 0u;
}
::google::protobuf::uint32 ProtoIdentification::sequencenumber() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIdentification.sequenceNumber)
  return sequencenumber_;
}
void ProtoIdentification::set_sequencenumber(::google::protobuf::uint32 value) {
  
  sequencenumber_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIdentification.sequenceNumber)
}

inline const ProtoIdentification* ProtoIdentification::internal_default_instance() {
  return &ProtoIdentification_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoIpHeader::kTosFieldNumber;
const int ProtoIpHeader::kLengthFieldNumber;
const int ProtoIpHeader::kProtocolFieldNumber;
const int ProtoIpHeader::kOrigSourceIPAddrFieldNumber;
const int ProtoIpHeader::kOrigDestIPAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoIpHeader::ProtoIpHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoIpHeader)
}

void ProtoIpHeader::InitAsDefaultInstance() {
}

ProtoIpHeader::ProtoIpHeader(const ProtoIpHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoIpHeader)
}

void ProtoIpHeader::SharedCtor() {
  origsourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tos_, 0, reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&tos_) + sizeof(protocol_));
  _cached_size_ = 0;
}

ProtoIpHeader::~ProtoIpHeader() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoIpHeader)
  SharedDtor();
}

void ProtoIpHeader::SharedDtor() {
  origsourceipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoIpHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoIpHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoIpHeader_descriptor_;
}

const ProtoIpHeader& ProtoIpHeader::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoIpHeader> ProtoIpHeader_default_instance_;

ProtoIpHeader* ProtoIpHeader::New(::google::protobuf::Arena* arena) const {
  ProtoIpHeader* n = new ProtoIpHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoIpHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoIpHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoIpHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoIpHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tos_, protocol_);
  origsourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoIpHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoIpHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tos = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_protocol;
        break;
      }

      // optional uint32 protocol = 3;
      case 3: {
        if (tag == 24) {
         parse_protocol:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_origSourceIPAddr;
        break;
      }

      // optional string origSourceIPAddr = 4;
      case 4: {
        if (tag == 34) {
         parse_origSourceIPAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origsourceipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origsourceipaddr().data(), this->origsourceipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoIpHeader.origSourceIPAddr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_origDestIPAddr;
        break;
      }

      // optional string origDestIPAddr = 5;
      case 5: {
        if (tag == 42) {
         parse_origDestIPAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origdestipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origdestipaddr().data(), this->origdestipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoIpHeader.origDestIPAddr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoIpHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoIpHeader)
  return false;
#undef DO_
}

void ProtoIpHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoIpHeader)
  // optional uint32 tos = 1;
  if (this->tos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tos(), output);
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // optional uint32 protocol = 3;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol(), output);
  }

  // optional string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origsourceipaddr().data(), this->origsourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origSourceIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->origsourceipaddr(), output);
  }

  // optional string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origdestipaddr().data(), this->origdestipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origDestIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->origdestipaddr(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoIpHeader)
}

::google::protobuf::uint8* ProtoIpHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoIpHeader)
  // optional uint32 tos = 1;
  if (this->tos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tos(), target);
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // optional uint32 protocol = 3;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->protocol(), target);
  }

  // optional string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origsourceipaddr().data(), this->origsourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origSourceIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origsourceipaddr(), target);
  }

  // optional string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origdestipaddr().data(), this->origdestipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origDestIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->origdestipaddr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoIpHeader)
  return target;
}

size_t ProtoIpHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoIpHeader)
  size_t total_size = 0;

  // optional uint32 tos = 1;
  if (this->tos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tos());
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  // optional uint32 protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // optional string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origsourceipaddr());
  }

  // optional string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origdestipaddr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoIpHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoIpHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoIpHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoIpHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoIpHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoIpHeader)
    UnsafeMergeFrom(*source);
  }
}

void ProtoIpHeader::MergeFrom(const ProtoIpHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoIpHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoIpHeader::UnsafeMergeFrom(const ProtoIpHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tos() != 0) {
    set_tos(from.tos());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.origsourceipaddr().size() > 0) {

    origsourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origsourceipaddr_);
  }
  if (from.origdestipaddr().size() > 0) {

    origdestipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origdestipaddr_);
  }
}

void ProtoIpHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoIpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoIpHeader::CopyFrom(const ProtoIpHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoIpHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoIpHeader::IsInitialized() const {

  return true;
}

void ProtoIpHeader::Swap(ProtoIpHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoIpHeader::InternalSwap(ProtoIpHeader* other) {
  std::swap(tos_, other->tos_);
  std::swap(length_, other->length_);
  std::swap(protocol_, other->protocol_);
  origsourceipaddr_.Swap(&other->origsourceipaddr_);
  origdestipaddr_.Swap(&other->origdestipaddr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoIpHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoIpHeader_descriptor_;
  metadata.reflection = ProtoIpHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoIpHeader

// optional uint32 tos = 1;
void ProtoIpHeader::clear_tos() {
  tos_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::tos() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.tos)
  return tos_;
}
void ProtoIpHeader::set_tos(::google::protobuf::uint32 value) {
  
  tos_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.tos)
}

// optional uint32 length = 2;
void ProtoIpHeader::clear_length() {
  length_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::length() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.length)
  return length_;
}
void ProtoIpHeader::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.length)
}

// optional uint32 protocol = 3;
void ProtoIpHeader::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::protocol() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.protocol)
  return protocol_;
}
void ProtoIpHeader::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.protocol)
}

// optional string origSourceIPAddr = 4;
void ProtoIpHeader::clear_origsourceipaddr() {
  origsourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoIpHeader::origsourceipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.origSourceIPAddr)
  return origsourceipaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_origsourceipaddr(const ::std::string& value) {
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.origSourceIPAddr)
}
void ProtoIpHeader::set_origsourceipaddr(const char* value) {
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoIpHeader.origSourceIPAddr)
}
void ProtoIpHeader::set_origsourceipaddr(const char* value, size_t size) {
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoIpHeader.origSourceIPAddr)
}
::std::string* ProtoIpHeader::mutable_origsourceipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoIpHeader.origSourceIPAddr)
  return origsourceipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoIpHeader::release_origsourceipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoIpHeader.origSourceIPAddr)
  
  return origsourceipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_allocated_origsourceipaddr(::std::string* origsourceipaddr) {
  if (origsourceipaddr != NULL) {
    
  } else {
    
  }
  origsourceipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origsourceipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoIpHeader.origSourceIPAddr)
}

// optional string origDestIPAddr = 5;
void ProtoIpHeader::clear_origdestipaddr() {
  origdestipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoIpHeader::origdestipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.origDestIPAddr)
  return origdestipaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_origdestipaddr(const ::std::string& value) {
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.origDestIPAddr)
}
void ProtoIpHeader::set_origdestipaddr(const char* value) {
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoIpHeader.origDestIPAddr)
}
void ProtoIpHeader::set_origdestipaddr(const char* value, size_t size) {
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoIpHeader.origDestIPAddr)
}
::std::string* ProtoIpHeader::mutable_origdestipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoIpHeader.origDestIPAddr)
  return origdestipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoIpHeader::release_origdestipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoIpHeader.origDestIPAddr)
  
  return origdestipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_allocated_origdestipaddr(::std::string* origdestipaddr) {
  if (origdestipaddr != NULL) {
    
  } else {
    
  }
  origdestipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origdestipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoIpHeader.origDestIPAddr)
}

inline const ProtoIpHeader* ProtoIpHeader::internal_default_instance() {
  return &ProtoIpHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoDatagramInfo::kSourcePortFieldNumber;
const int ProtoDatagramInfo::kDestPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoDatagramInfo::ProtoDatagramInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoDatagramInfo)
}

void ProtoDatagramInfo::InitAsDefaultInstance() {
}

ProtoDatagramInfo::ProtoDatagramInfo(const ProtoDatagramInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoDatagramInfo)
}

void ProtoDatagramInfo::SharedCtor() {
  ::memset(&sourceport_, 0, reinterpret_cast<char*>(&destport_) -
    reinterpret_cast<char*>(&sourceport_) + sizeof(destport_));
  _cached_size_ = 0;
}

ProtoDatagramInfo::~ProtoDatagramInfo() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoDatagramInfo)
  SharedDtor();
}

void ProtoDatagramInfo::SharedDtor() {
}

void ProtoDatagramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDatagramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDatagramInfo_descriptor_;
}

const ProtoDatagramInfo& ProtoDatagramInfo::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoDatagramInfo> ProtoDatagramInfo_default_instance_;

ProtoDatagramInfo* ProtoDatagramInfo::New(::google::protobuf::Arena* arena) const {
  ProtoDatagramInfo* n = new ProtoDatagramInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoDatagramInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoDatagramInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoDatagramInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoDatagramInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sourceport_, destport_);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoDatagramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoDatagramInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sourcePort = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_destPort;
        break;
      }

      // optional uint32 destPort = 2;
      case 2: {
        if (tag == 16) {
         parse_destPort:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoDatagramInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoDatagramInfo)
  return false;
#undef DO_
}

void ProtoDatagramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoDatagramInfo)
  // optional uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceport(), output);
  }

  // optional uint32 destPort = 2;
  if (this->destport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destport(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoDatagramInfo)
}

::google::protobuf::uint8* ProtoDatagramInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoDatagramInfo)
  // optional uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceport(), target);
  }

  // optional uint32 destPort = 2;
  if (this->destport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoDatagramInfo)
  return target;
}

size_t ProtoDatagramInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoDatagramInfo)
  size_t total_size = 0;

  // optional uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourceport());
  }

  // optional uint32 destPort = 2;
  if (this->destport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->destport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDatagramInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoDatagramInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoDatagramInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoDatagramInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoDatagramInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoDatagramInfo)
    UnsafeMergeFrom(*source);
  }
}

void ProtoDatagramInfo::MergeFrom(const ProtoDatagramInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoDatagramInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoDatagramInfo::UnsafeMergeFrom(const ProtoDatagramInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sourceport() != 0) {
    set_sourceport(from.sourceport());
  }
  if (from.destport() != 0) {
    set_destport(from.destport());
  }
}

void ProtoDatagramInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoDatagramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDatagramInfo::CopyFrom(const ProtoDatagramInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoDatagramInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoDatagramInfo::IsInitialized() const {

  return true;
}

void ProtoDatagramInfo::Swap(ProtoDatagramInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoDatagramInfo::InternalSwap(ProtoDatagramInfo* other) {
  std::swap(sourceport_, other->sourceport_);
  std::swap(destport_, other->destport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoDatagramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDatagramInfo_descriptor_;
  metadata.reflection = ProtoDatagramInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoDatagramInfo

// optional uint32 sourcePort = 1;
void ProtoDatagramInfo::clear_sourceport() {
  sourceport_ = 0u;
}
::google::protobuf::uint32 ProtoDatagramInfo::sourceport() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoDatagramInfo.sourcePort)
  return sourceport_;
}
void ProtoDatagramInfo::set_sourceport(::google::protobuf::uint32 value) {
  
  sourceport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoDatagramInfo.sourcePort)
}

// optional uint32 destPort = 2;
void ProtoDatagramInfo::clear_destport() {
  destport_ = 0u;
}
::google::protobuf::uint32 ProtoDatagramInfo::destport() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoDatagramInfo.destPort)
  return destport_;
}
void ProtoDatagramInfo::set_destport(::google::protobuf::uint32 value) {
  
  destport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoDatagramInfo.destPort)
}

inline const ProtoDatagramInfo* ProtoDatagramInfo::internal_default_instance() {
  return &ProtoDatagramInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoICMPTime::kOriginateTimestampFieldNumber;
const int ProtoICMPTime::kReceiveTimestampFieldNumber;
const int ProtoICMPTime::kTransmitTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoICMPTime::ProtoICMPTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoICMPTime)
}

void ProtoICMPTime::InitAsDefaultInstance() {
}

ProtoICMPTime::ProtoICMPTime(const ProtoICMPTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoICMPTime)
}

void ProtoICMPTime::SharedCtor() {
  ::memset(&originatetimestamp_, 0, reinterpret_cast<char*>(&transmittimestamp_) -
    reinterpret_cast<char*>(&originatetimestamp_) + sizeof(transmittimestamp_));
  _cached_size_ = 0;
}

ProtoICMPTime::~ProtoICMPTime() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoICMPTime)
  SharedDtor();
}

void ProtoICMPTime::SharedDtor() {
}

void ProtoICMPTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoICMPTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoICMPTime_descriptor_;
}

const ProtoICMPTime& ProtoICMPTime::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoICMPTime> ProtoICMPTime_default_instance_;

ProtoICMPTime* ProtoICMPTime::New(::google::protobuf::Arena* arena) const {
  ProtoICMPTime* n = new ProtoICMPTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoICMPTime::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoICMPTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoICMPTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoICMPTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(originatetimestamp_, transmittimestamp_);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoICMPTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoICMPTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 originateTimestamp = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receiveTimestamp;
        break;
      }

      // optional uint32 receiveTimestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_receiveTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivetimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transmitTimestamp;
        break;
      }

      // optional uint32 transmitTimestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_transmitTimestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmittimestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoICMPTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoICMPTime)
  return false;
#undef DO_
}

void ProtoICMPTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoICMPTime)
  // optional uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->originatetimestamp(), output);
  }

  // optional uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->receivetimestamp(), output);
  }

  // optional uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->transmittimestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoICMPTime)
}

::google::protobuf::uint8* ProtoICMPTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoICMPTime)
  // optional uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->originatetimestamp(), target);
  }

  // optional uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->receivetimestamp(), target);
  }

  // optional uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->transmittimestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoICMPTime)
  return target;
}

size_t ProtoICMPTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoICMPTime)
  size_t total_size = 0;

  // optional uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->originatetimestamp());
  }

  // optional uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receivetimestamp());
  }

  // optional uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transmittimestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoICMPTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoICMPTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoICMPTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoICMPTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoICMPTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoICMPTime)
    UnsafeMergeFrom(*source);
  }
}

void ProtoICMPTime::MergeFrom(const ProtoICMPTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoICMPTime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoICMPTime::UnsafeMergeFrom(const ProtoICMPTime& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.originatetimestamp() != 0) {
    set_originatetimestamp(from.originatetimestamp());
  }
  if (from.receivetimestamp() != 0) {
    set_receivetimestamp(from.receivetimestamp());
  }
  if (from.transmittimestamp() != 0) {
    set_transmittimestamp(from.transmittimestamp());
  }
}

void ProtoICMPTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoICMPTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoICMPTime::CopyFrom(const ProtoICMPTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoICMPTime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoICMPTime::IsInitialized() const {

  return true;
}

void ProtoICMPTime::Swap(ProtoICMPTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoICMPTime::InternalSwap(ProtoICMPTime* other) {
  std::swap(originatetimestamp_, other->originatetimestamp_);
  std::swap(receivetimestamp_, other->receivetimestamp_);
  std::swap(transmittimestamp_, other->transmittimestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoICMPTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoICMPTime_descriptor_;
  metadata.reflection = ProtoICMPTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoICMPTime

// optional uint32 originateTimestamp = 1;
void ProtoICMPTime::clear_originatetimestamp() {
  originatetimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::originatetimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.originateTimestamp)
  return originatetimestamp_;
}
void ProtoICMPTime::set_originatetimestamp(::google::protobuf::uint32 value) {
  
  originatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.originateTimestamp)
}

// optional uint32 receiveTimestamp = 2;
void ProtoICMPTime::clear_receivetimestamp() {
  receivetimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::receivetimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.receiveTimestamp)
  return receivetimestamp_;
}
void ProtoICMPTime::set_receivetimestamp(::google::protobuf::uint32 value) {
  
  receivetimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.receiveTimestamp)
}

// optional uint32 transmitTimestamp = 3;
void ProtoICMPTime::clear_transmittimestamp() {
  transmittimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::transmittimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.transmitTimestamp)
  return transmittimestamp_;
}
void ProtoICMPTime::set_transmittimestamp(::google::protobuf::uint32 value) {
  
  transmittimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.transmitTimestamp)
}

inline const ProtoICMPTime* ProtoICMPTime::internal_default_instance() {
  return &ProtoICMPTime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoExtraAddresses::kIPAddressFieldNumber;
const int ProtoExtraAddresses::kTimesRepeatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoExtraAddresses::ProtoExtraAddresses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_icmpinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoExtraAddresses)
}

void ProtoExtraAddresses::InitAsDefaultInstance() {
}

ProtoExtraAddresses::ProtoExtraAddresses(const ProtoExtraAddresses& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoExtraAddresses)
}

void ProtoExtraAddresses::SharedCtor() {
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timesrepeated_ = 0u;
  _cached_size_ = 0;
}

ProtoExtraAddresses::~ProtoExtraAddresses() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoExtraAddresses)
  SharedDtor();
}

void ProtoExtraAddresses::SharedDtor() {
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoExtraAddresses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoExtraAddresses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoExtraAddresses_descriptor_;
}

const ProtoExtraAddresses& ProtoExtraAddresses::default_instance() {
  protobuf_InitDefaults_icmpinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProtoExtraAddresses> ProtoExtraAddresses_default_instance_;

ProtoExtraAddresses* ProtoExtraAddresses::New(::google::protobuf::Arena* arena) const {
  ProtoExtraAddresses* n = new ProtoExtraAddresses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoExtraAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoExtraAddresses)
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timesrepeated_ = 0u;
}

bool ProtoExtraAddresses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoExtraAddresses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string IPAddress = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoExtraAddresses.IPAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timesRepeated;
        break;
      }

      // optional uint32 timesRepeated = 2;
      case 2: {
        if (tag == 16) {
         parse_timesRepeated:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timesrepeated_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoExtraAddresses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoExtraAddresses)
  return false;
#undef DO_
}

void ProtoExtraAddresses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoExtraAddresses)
  // optional string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoExtraAddresses.IPAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddress(), output);
  }

  // optional uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timesrepeated(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoExtraAddresses)
}

::google::protobuf::uint8* ProtoExtraAddresses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoExtraAddresses)
  // optional string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoExtraAddresses.IPAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddress(), target);
  }

  // optional uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timesrepeated(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoExtraAddresses)
  return target;
}

size_t ProtoExtraAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoExtraAddresses)
  size_t total_size = 0;

  // optional string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // optional uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timesrepeated());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoExtraAddresses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoExtraAddresses)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProtoExtraAddresses* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoExtraAddresses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoExtraAddresses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoExtraAddresses)
    UnsafeMergeFrom(*source);
  }
}

void ProtoExtraAddresses::MergeFrom(const ProtoExtraAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoExtraAddresses)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProtoExtraAddresses::UnsafeMergeFrom(const ProtoExtraAddresses& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.timesrepeated() != 0) {
    set_timesrepeated(from.timesrepeated());
  }
}

void ProtoExtraAddresses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoExtraAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoExtraAddresses::CopyFrom(const ProtoExtraAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoExtraAddresses)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProtoExtraAddresses::IsInitialized() const {

  return true;
}

void ProtoExtraAddresses::Swap(ProtoExtraAddresses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoExtraAddresses::InternalSwap(ProtoExtraAddresses* other) {
  ipaddress_.Swap(&other->ipaddress_);
  std::swap(timesrepeated_, other->timesrepeated_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoExtraAddresses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoExtraAddresses_descriptor_;
  metadata.reflection = ProtoExtraAddresses_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoExtraAddresses

// optional string IPAddress = 1;
void ProtoExtraAddresses::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoExtraAddresses::ipaddress() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoExtraAddresses.IPAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoExtraAddresses::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoExtraAddresses.IPAddress)
}
void ProtoExtraAddresses::set_ipaddress(const char* value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoExtraAddresses.IPAddress)
}
void ProtoExtraAddresses::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoExtraAddresses.IPAddress)
}
::std::string* ProtoExtraAddresses::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoExtraAddresses.IPAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoExtraAddresses::release_ipaddress() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoExtraAddresses.IPAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoExtraAddresses::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoExtraAddresses.IPAddress)
}

// optional uint32 timesRepeated = 2;
void ProtoExtraAddresses::clear_timesrepeated() {
  timesrepeated_ = 0u;
}
::google::protobuf::uint32 ProtoExtraAddresses::timesrepeated() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoExtraAddresses.timesRepeated)
  return timesrepeated_;
}
void ProtoExtraAddresses::set_timesrepeated(::google::protobuf::uint32 value) {
  
  timesrepeated_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoExtraAddresses.timesRepeated)
}

inline const ProtoExtraAddresses* ProtoExtraAddresses::internal_default_instance() {
  return &ProtoExtraAddresses_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
