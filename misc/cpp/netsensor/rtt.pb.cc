// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rtt {

namespace {

const ::google::protobuf::EnumDescriptor* Str_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Int_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Double_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rtt_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_rtt_2eproto() {
  protobuf_AddDesc_rtt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rtt.proto");
  GOOGLE_CHECK(file != NULL);
  Str_descriptor_ = file->enum_type(0);
  Int_descriptor_ = file->enum_type(1);
  Double_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rtt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_rtt_2eproto() {
}

void protobuf_InitDefaults_rtt_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_rtt_2eproto_once_);
void protobuf_InitDefaults_rtt_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_rtt_2eproto_once_,
                 &protobuf_InitDefaults_rtt_2eproto_impl);
}
void protobuf_AddDesc_rtt_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_rtt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trtt.proto\022\003rtt*X\n\003Str\022\r\n\tsensor_ip\020\000\022\n"
    "\n\006src_ip\020\001\022\013\n\007dest_ip\020\002\022\014\n\010protocol\020\003\022\014\n"
    "\010src_port\020\004\022\r\n\tdest_port\020\005*/\n\003Int\022\013\n\007min"
    "_rtt\020\000\022\013\n\007max_rtt\020\001\022\016\n\nresolution\020\002*\025\n\006D"
    "ouble\022\013\n\007avg_rtt\020\000B:\n!us.ihmc.sensei.pro"
    "to.subjects.rttB\rRoundTripTimeZ\003rtt\240\001\001b\006"
    "proto3", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtt.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rtt_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rtt_2eproto_once_);
void protobuf_AddDesc_rtt_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rtt_2eproto_once_,
                 &protobuf_AddDesc_rtt_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rtt_2eproto {
  StaticDescriptorInitializer_rtt_2eproto() {
    protobuf_AddDesc_rtt_2eproto();
  }
} static_descriptor_initializer_rtt_2eproto_;
const ::google::protobuf::EnumDescriptor* Str_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Str_descriptor_;
}
bool Str_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Int_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int_descriptor_;
}
bool Int_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Double_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Double_descriptor_;
}
bool Double_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtt

// @@protoc_insertion_point(global_scope)
