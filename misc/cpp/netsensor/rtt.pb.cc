// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtt.proto

#include "rtt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace rtt {
}  // namespace rtt
namespace protobuf_rtt_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "rtt.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\trtt.proto\022\003rtt*X\n\003Str\022\r\n\tsensor_ip\020\000\022\n"
      "\n\006src_ip\020\001\022\013\n\007dest_ip\020\002\022\014\n\010protocol\020\003\022\014\n"
      "\010src_port\020\004\022\r\n\tdest_port\020\005*/\n\003Int\022\013\n\007min"
      "_rtt\020\000\022\013\n\007max_rtt\020\001\022\016\n\nresolution\020\002*\025\n\006D"
      "ouble\022\013\n\007avg_rtt\020\000B:\n!us.ihmc.sensei.pro"
      "to.subjects.rttB\rRoundTripTimeZ\003rtt\240\001\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtt.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rtt_2eproto
namespace rtt {
const ::google::protobuf::EnumDescriptor* Str_descriptor() {
  protobuf_rtt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtt_2eproto::file_level_enum_descriptors[0];
}
bool Str_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Int_descriptor() {
  protobuf_rtt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtt_2eproto::file_level_enum_descriptors[1];
}
bool Int_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Double_descriptor() {
  protobuf_rtt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtt_2eproto::file_level_enum_descriptors[2];
}
bool Double_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtt
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
