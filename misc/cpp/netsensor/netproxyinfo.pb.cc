// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netproxyinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netproxyinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {

namespace {

const ::google::protobuf::Descriptor* NetProxyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetProxyInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_netproxyinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_netproxyinfo_2eproto() {
  protobuf_AddDesc_netproxyinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "netproxyinfo.proto");
  GOOGLE_CHECK(file != NULL);
  NetProxyInfo_descriptor_ = file->message_type(0);
  static const int NetProxyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProxyInfo, internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProxyInfo, external_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProxyInfo, remotenetproxyips_),
  };
  NetProxyInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetProxyInfo_descriptor_,
      NetProxyInfo::internal_default_instance(),
      NetProxyInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetProxyInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetProxyInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_netproxyinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetProxyInfo_descriptor_, NetProxyInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_netproxyinfo_2eproto() {
  NetProxyInfo_default_instance_.Shutdown();
  delete NetProxyInfo_reflection_;
}

void protobuf_InitDefaults_netproxyinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::netsensor::protobuf_InitDefaults_topology_2eproto();
  NetProxyInfo_default_instance_.DefaultConstruct();
  NetProxyInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_netproxyinfo_2eproto_once_);
void protobuf_InitDefaults_netproxyinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_netproxyinfo_2eproto_once_,
                 &protobuf_InitDefaults_netproxyinfo_2eproto_impl);
}
void protobuf_AddDesc_netproxyinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_netproxyinfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022netproxyinfo.proto\022\tnetsensor\032\016topolog"
    "y.proto\"}\n\014NetProxyInfo\022(\n\010internal\030\001 \001("
    "\0132\026.netsensor.NetworkInfo\022(\n\010external\030\002 "
    "\001(\0132\026.netsensor.NetworkInfo\022\031\n\021remoteNet"
    "ProxyIPs\030\003 \003(\rBC\n\036us.ihmc.ddam.sensors.n"
    "etsensorB\021NetProxyInfoProtoP\001Z\tnetsensor"
    "\240\001\001b\006proto3", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netproxyinfo.proto", &protobuf_RegisterTypes);
  ::netsensor::protobuf_AddDesc_topology_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_netproxyinfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_netproxyinfo_2eproto_once_);
void protobuf_AddDesc_netproxyinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_netproxyinfo_2eproto_once_,
                 &protobuf_AddDesc_netproxyinfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_netproxyinfo_2eproto {
  StaticDescriptorInitializer_netproxyinfo_2eproto() {
    protobuf_AddDesc_netproxyinfo_2eproto();
  }
} static_descriptor_initializer_netproxyinfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetProxyInfo::kInternalFieldNumber;
const int NetProxyInfo::kExternalFieldNumber;
const int NetProxyInfo::kRemoteNetProxyIPsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetProxyInfo::NetProxyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_netproxyinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.NetProxyInfo)
}

void NetProxyInfo::InitAsDefaultInstance() {
  internal_ = const_cast< ::netsensor::NetworkInfo*>(
      ::netsensor::NetworkInfo::internal_default_instance());
  external_ = const_cast< ::netsensor::NetworkInfo*>(
      ::netsensor::NetworkInfo::internal_default_instance());
}

NetProxyInfo::NetProxyInfo(const NetProxyInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.NetProxyInfo)
}

void NetProxyInfo::SharedCtor() {
  internal_ = NULL;
  external_ = NULL;
  _cached_size_ = 0;
}

NetProxyInfo::~NetProxyInfo() {
  // @@protoc_insertion_point(destructor:netsensor.NetProxyInfo)
  SharedDtor();
}

void NetProxyInfo::SharedDtor() {
  if (this != &NetProxyInfo_default_instance_.get()) {
    delete internal_;
    delete external_;
  }
}

void NetProxyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetProxyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetProxyInfo_descriptor_;
}

const NetProxyInfo& NetProxyInfo::default_instance() {
  protobuf_InitDefaults_netproxyinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NetProxyInfo> NetProxyInfo_default_instance_;

NetProxyInfo* NetProxyInfo::New(::google::protobuf::Arena* arena) const {
  NetProxyInfo* n = new NetProxyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetProxyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.NetProxyInfo)
  if (GetArenaNoVirtual() == NULL && internal_ != NULL) delete internal_;
  internal_ = NULL;
  if (GetArenaNoVirtual() == NULL && external_ != NULL) delete external_;
  external_ = NULL;
  remotenetproxyips_.Clear();
}

bool NetProxyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.NetProxyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netsensor.NetworkInfo internal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_external;
        break;
      }

      // optional .netsensor.NetworkInfo external = 2;
      case 2: {
        if (tag == 18) {
         parse_external:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remoteNetProxyIPs;
        break;
      }

      // repeated uint32 remoteNetProxyIPs = 3;
      case 3: {
        if (tag == 26) {
         parse_remoteNetProxyIPs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remotenetproxyips())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_remotenetproxyips())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.NetProxyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.NetProxyInfo)
  return false;
#undef DO_
}

void NetProxyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.NetProxyInfo)
  // optional .netsensor.NetworkInfo internal = 1;
  if (this->has_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->internal_, output);
  }

  // optional .netsensor.NetworkInfo external = 2;
  if (this->has_external()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->external_, output);
  }

  // repeated uint32 remoteNetProxyIPs = 3;
  if (this->remotenetproxyips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_remotenetproxyips_cached_byte_size_);
  }
  for (int i = 0; i < this->remotenetproxyips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->remotenetproxyips(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.NetProxyInfo)
}

::google::protobuf::uint8* NetProxyInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.NetProxyInfo)
  // optional .netsensor.NetworkInfo internal = 1;
  if (this->has_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->internal_, false, target);
  }

  // optional .netsensor.NetworkInfo external = 2;
  if (this->has_external()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->external_, false, target);
  }

  // repeated uint32 remoteNetProxyIPs = 3;
  if (this->remotenetproxyips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _remotenetproxyips_cached_byte_size_, target);
  }
  for (int i = 0; i < this->remotenetproxyips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->remotenetproxyips(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.NetProxyInfo)
  return target;
}

size_t NetProxyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.NetProxyInfo)
  size_t total_size = 0;

  // optional .netsensor.NetworkInfo internal = 1;
  if (this->has_internal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->internal_);
  }

  // optional .netsensor.NetworkInfo external = 2;
  if (this->has_external()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->external_);
  }

  // repeated uint32 remoteNetProxyIPs = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->remotenetproxyips_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->remotenetproxyips(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _remotenetproxyips_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProxyInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.NetProxyInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetProxyInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetProxyInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.NetProxyInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.NetProxyInfo)
    UnsafeMergeFrom(*source);
  }
}

void NetProxyInfo::MergeFrom(const NetProxyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.NetProxyInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NetProxyInfo::UnsafeMergeFrom(const NetProxyInfo& from) {
  GOOGLE_DCHECK(&from != this);
  remotenetproxyips_.UnsafeMergeFrom(from.remotenetproxyips_);
  if (from.has_internal()) {
    mutable_internal()->::netsensor::NetworkInfo::MergeFrom(from.internal());
  }
  if (from.has_external()) {
    mutable_external()->::netsensor::NetworkInfo::MergeFrom(from.external());
  }
}

void NetProxyInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.NetProxyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetProxyInfo::CopyFrom(const NetProxyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.NetProxyInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NetProxyInfo::IsInitialized() const {

  return true;
}

void NetProxyInfo::Swap(NetProxyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetProxyInfo::InternalSwap(NetProxyInfo* other) {
  std::swap(internal_, other->internal_);
  std::swap(external_, other->external_);
  remotenetproxyips_.UnsafeArenaSwap(&other->remotenetproxyips_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetProxyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetProxyInfo_descriptor_;
  metadata.reflection = NetProxyInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetProxyInfo

// optional .netsensor.NetworkInfo internal = 1;
bool NetProxyInfo::has_internal() const {
  return this != internal_default_instance() && internal_ != NULL;
}
void NetProxyInfo::clear_internal() {
  if (GetArenaNoVirtual() == NULL && internal_ != NULL) delete internal_;
  internal_ = NULL;
}
const ::netsensor::NetworkInfo& NetProxyInfo::internal() const {
  // @@protoc_insertion_point(field_get:netsensor.NetProxyInfo.internal)
  return internal_ != NULL ? *internal_
                         : *::netsensor::NetworkInfo::internal_default_instance();
}
::netsensor::NetworkInfo* NetProxyInfo::mutable_internal() {
  
  if (internal_ == NULL) {
    internal_ = new ::netsensor::NetworkInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetProxyInfo.internal)
  return internal_;
}
::netsensor::NetworkInfo* NetProxyInfo::release_internal() {
  // @@protoc_insertion_point(field_release:netsensor.NetProxyInfo.internal)
  
  ::netsensor::NetworkInfo* temp = internal_;
  internal_ = NULL;
  return temp;
}
void NetProxyInfo::set_allocated_internal(::netsensor::NetworkInfo* internal) {
  delete internal_;
  internal_ = internal;
  if (internal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetProxyInfo.internal)
}

// optional .netsensor.NetworkInfo external = 2;
bool NetProxyInfo::has_external() const {
  return this != internal_default_instance() && external_ != NULL;
}
void NetProxyInfo::clear_external() {
  if (GetArenaNoVirtual() == NULL && external_ != NULL) delete external_;
  external_ = NULL;
}
const ::netsensor::NetworkInfo& NetProxyInfo::external() const {
  // @@protoc_insertion_point(field_get:netsensor.NetProxyInfo.external)
  return external_ != NULL ? *external_
                         : *::netsensor::NetworkInfo::internal_default_instance();
}
::netsensor::NetworkInfo* NetProxyInfo::mutable_external() {
  
  if (external_ == NULL) {
    external_ = new ::netsensor::NetworkInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetProxyInfo.external)
  return external_;
}
::netsensor::NetworkInfo* NetProxyInfo::release_external() {
  // @@protoc_insertion_point(field_release:netsensor.NetProxyInfo.external)
  
  ::netsensor::NetworkInfo* temp = external_;
  external_ = NULL;
  return temp;
}
void NetProxyInfo::set_allocated_external(::netsensor::NetworkInfo* external) {
  delete external_;
  external_ = external;
  if (external) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetProxyInfo.external)
}

// repeated uint32 remoteNetProxyIPs = 3;
int NetProxyInfo::remotenetproxyips_size() const {
  return remotenetproxyips_.size();
}
void NetProxyInfo::clear_remotenetproxyips() {
  remotenetproxyips_.Clear();
}
::google::protobuf::uint32 NetProxyInfo::remotenetproxyips(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetProxyInfo.remoteNetProxyIPs)
  return remotenetproxyips_.Get(index);
}
void NetProxyInfo::set_remotenetproxyips(int index, ::google::protobuf::uint32 value) {
  remotenetproxyips_.Set(index, value);
  // @@protoc_insertion_point(field_set:netsensor.NetProxyInfo.remoteNetProxyIPs)
}
void NetProxyInfo::add_remotenetproxyips(::google::protobuf::uint32 value) {
  remotenetproxyips_.Add(value);
  // @@protoc_insertion_point(field_add:netsensor.NetProxyInfo.remoteNetProxyIPs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NetProxyInfo::remotenetproxyips() const {
  // @@protoc_insertion_point(field_list:netsensor.NetProxyInfo.remoteNetProxyIPs)
  return remotenetproxyips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NetProxyInfo::mutable_remotenetproxyips() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetProxyInfo.remoteNetProxyIPs)
  return &remotenetproxyips_;
}

inline const NetProxyInfo* NetProxyInfo::internal_default_instance() {
  return &NetProxyInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
