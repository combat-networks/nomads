// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef PROTOBUF_node_2eproto__INCLUDED
#define PROTOBUF_node_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "grump.pb.h"
#include "info.pb.h"
#include "traffic.pb.h"
#include "topology.pb.h"
#include "networkhealth.pb.h"
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_node_2eproto();
void protobuf_AssignDesc_node_2eproto();
void protobuf_ShutdownFile_node_2eproto();

class Node;
class ReadableNode;

// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ddam.Info info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::ddam::Info& info() const;
  ::ddam::Info* mutable_info();
  ::ddam::Info* release_info();
  void set_allocated_info(::ddam::Info* info);

  // optional .ddam.Grump grump = 4;
  bool has_grump() const;
  void clear_grump();
  static const int kGrumpFieldNumber = 4;
  const ::ddam::Grump& grump() const;
  ::ddam::Grump* mutable_grump();
  ::ddam::Grump* release_grump();
  void set_allocated_grump(::ddam::Grump* grump);

  // optional .ddam.Traffic traffic = 5;
  bool has_traffic() const;
  void clear_traffic();
  static const int kTrafficFieldNumber = 5;
  const ::ddam::Traffic& traffic() const;
  ::ddam::Traffic* mutable_traffic();
  ::ddam::Traffic* release_traffic();
  void set_allocated_traffic(::ddam::Traffic* traffic);

  // map<string, .ddam.Topology> topology = 6;
  int topology_size() const;
  void clear_topology();
  static const int kTopologyFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::ddam::Topology >&
      topology() const;
  ::google::protobuf::Map< ::std::string, ::ddam::Topology >*
      mutable_topology();

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  int networkhealth_size() const;
  void clear_networkhealth();
  static const int kNetworkHealthFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
      networkhealth() const;
  ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
      mutable_networkhealth();

  // optional .google.protobuf.Timestamp timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ddam::Info* info_;
  ::ddam::Grump* grump_;
  ::ddam::Traffic* traffic_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::Topology,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Node_TopologyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::Topology,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > topology_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::NetworkHealth,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Node_NetworkHealthEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::NetworkHealth,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > networkhealth_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class ReadableNode : public ::google::protobuf::Message {
 public:
  ReadableNode();
  virtual ~ReadableNode();

  ReadableNode(const ReadableNode& from);

  inline ReadableNode& operator=(const ReadableNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableNode& default_instance();

  void Swap(ReadableNode* other);

  // implements Message ----------------------------------------------

  inline ReadableNode* New() const { return New(NULL); }

  ReadableNode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableNode& from);
  void MergeFrom(const ReadableNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ddam.Info info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::ddam::Info& info() const;
  ::ddam::Info* mutable_info();
  ::ddam::Info* release_info();
  void set_allocated_info(::ddam::Info* info);

  // optional .ddam.Grump grump = 4;
  bool has_grump() const;
  void clear_grump();
  static const int kGrumpFieldNumber = 4;
  const ::ddam::Grump& grump() const;
  ::ddam::Grump* mutable_grump();
  ::ddam::Grump* release_grump();
  void set_allocated_grump(::ddam::Grump* grump);

  // optional .ddam.ReadableTraffic traffic = 5;
  bool has_traffic() const;
  void clear_traffic();
  static const int kTrafficFieldNumber = 5;
  const ::ddam::ReadableTraffic& traffic() const;
  ::ddam::ReadableTraffic* mutable_traffic();
  ::ddam::ReadableTraffic* release_traffic();
  void set_allocated_traffic(::ddam::ReadableTraffic* traffic);

  // map<string, .ddam.ReadableTopology> topology = 6;
  int topology_size() const;
  void clear_topology();
  static const int kTopologyFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >&
      topology() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >*
      mutable_topology();

  // map<string, .ddam.NetworkHealth> networkHealth = 7;
  int networkhealth_size() const;
  void clear_networkhealth();
  static const int kNetworkHealthFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
      networkhealth() const;
  ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
      mutable_networkhealth();

  // optional .google.protobuf.Timestamp timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.ReadableNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ddam::Info* info_;
  ::ddam::Grump* grump_;
  ::ddam::ReadableTraffic* traffic_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableTopology,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableNode_TopologyEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableTopology,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > topology_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::NetworkHealth,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableNode_NetworkHealthEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::NetworkHealth,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > networkhealth_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static ReadableNode* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:ddam.Node.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Node.id)
}
inline void Node::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Node.id)
}
inline ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.id)
}

// optional string name = 2;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:ddam.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Node.name)
}
inline void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.name)
}

// optional .ddam.Info info = 3;
inline bool Node::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void Node::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ddam::Info& Node::info() const {
  // @@protoc_insertion_point(field_get:ddam.Node.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ddam::Info* Node::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ddam::Info;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.info)
  return info_;
}
inline ::ddam::Info* Node::release_info() {
  
  ::ddam::Info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Node::set_allocated_info(::ddam::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.info)
}

// optional .ddam.Grump grump = 4;
inline bool Node::has_grump() const {
  return !_is_default_instance_ && grump_ != NULL;
}
inline void Node::clear_grump() {
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
}
inline const ::ddam::Grump& Node::grump() const {
  // @@protoc_insertion_point(field_get:ddam.Node.grump)
  return grump_ != NULL ? *grump_ : *default_instance_->grump_;
}
inline ::ddam::Grump* Node::mutable_grump() {
  
  if (grump_ == NULL) {
    grump_ = new ::ddam::Grump;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.grump)
  return grump_;
}
inline ::ddam::Grump* Node::release_grump() {
  
  ::ddam::Grump* temp = grump_;
  grump_ = NULL;
  return temp;
}
inline void Node::set_allocated_grump(::ddam::Grump* grump) {
  delete grump_;
  grump_ = grump;
  if (grump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.grump)
}

// optional .ddam.Traffic traffic = 5;
inline bool Node::has_traffic() const {
  return !_is_default_instance_ && traffic_ != NULL;
}
inline void Node::clear_traffic() {
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
}
inline const ::ddam::Traffic& Node::traffic() const {
  // @@protoc_insertion_point(field_get:ddam.Node.traffic)
  return traffic_ != NULL ? *traffic_ : *default_instance_->traffic_;
}
inline ::ddam::Traffic* Node::mutable_traffic() {
  
  if (traffic_ == NULL) {
    traffic_ = new ::ddam::Traffic;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.traffic)
  return traffic_;
}
inline ::ddam::Traffic* Node::release_traffic() {
  
  ::ddam::Traffic* temp = traffic_;
  traffic_ = NULL;
  return temp;
}
inline void Node::set_allocated_traffic(::ddam::Traffic* traffic) {
  delete traffic_;
  traffic_ = traffic;
  if (traffic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.traffic)
}

// map<string, .ddam.Topology> topology = 6;
inline int Node::topology_size() const {
  return topology_.size();
}
inline void Node::clear_topology() {
  topology_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::Topology >&
Node::topology() const {
  // @@protoc_insertion_point(field_map:ddam.Node.topology)
  return topology_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::Topology >*
Node::mutable_topology() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Node.topology)
  return topology_.MutableMap();
}

// map<string, .ddam.NetworkHealth> networkHealth = 7;
inline int Node::networkhealth_size() const {
  return networkhealth_.size();
}
inline void Node::clear_networkhealth() {
  networkhealth_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
Node::networkhealth() const {
  // @@protoc_insertion_point(field_map:ddam.Node.networkHealth)
  return networkhealth_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
Node::mutable_networkhealth() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Node.networkHealth)
  return networkhealth_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 8;
inline bool Node::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Node::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Node::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Node.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Node::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Node.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Node::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Node::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Node.timestamp)
}

// -------------------------------------------------------------------

// ReadableNode

// optional string id = 1;
inline void ReadableNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableNode::id() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableNode.id)
}
inline void ReadableNode::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableNode.id)
}
inline void ReadableNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableNode.id)
}
inline ::std::string* ReadableNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableNode::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.id)
}

// optional string name = 2;
inline void ReadableNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableNode::name() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableNode.name)
}
inline void ReadableNode::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableNode.name)
}
inline void ReadableNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableNode.name)
}
inline ::std::string* ReadableNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableNode::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.name)
}

// optional .ddam.Info info = 3;
inline bool ReadableNode::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void ReadableNode::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::ddam::Info& ReadableNode::info() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ddam::Info* ReadableNode::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::ddam::Info;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.info)
  return info_;
}
inline ::ddam::Info* ReadableNode::release_info() {
  
  ::ddam::Info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ReadableNode::set_allocated_info(::ddam::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.info)
}

// optional .ddam.Grump grump = 4;
inline bool ReadableNode::has_grump() const {
  return !_is_default_instance_ && grump_ != NULL;
}
inline void ReadableNode::clear_grump() {
  if (GetArenaNoVirtual() == NULL && grump_ != NULL) delete grump_;
  grump_ = NULL;
}
inline const ::ddam::Grump& ReadableNode::grump() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.grump)
  return grump_ != NULL ? *grump_ : *default_instance_->grump_;
}
inline ::ddam::Grump* ReadableNode::mutable_grump() {
  
  if (grump_ == NULL) {
    grump_ = new ::ddam::Grump;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.grump)
  return grump_;
}
inline ::ddam::Grump* ReadableNode::release_grump() {
  
  ::ddam::Grump* temp = grump_;
  grump_ = NULL;
  return temp;
}
inline void ReadableNode::set_allocated_grump(::ddam::Grump* grump) {
  delete grump_;
  grump_ = grump;
  if (grump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.grump)
}

// optional .ddam.ReadableTraffic traffic = 5;
inline bool ReadableNode::has_traffic() const {
  return !_is_default_instance_ && traffic_ != NULL;
}
inline void ReadableNode::clear_traffic() {
  if (GetArenaNoVirtual() == NULL && traffic_ != NULL) delete traffic_;
  traffic_ = NULL;
}
inline const ::ddam::ReadableTraffic& ReadableNode::traffic() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.traffic)
  return traffic_ != NULL ? *traffic_ : *default_instance_->traffic_;
}
inline ::ddam::ReadableTraffic* ReadableNode::mutable_traffic() {
  
  if (traffic_ == NULL) {
    traffic_ = new ::ddam::ReadableTraffic;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.traffic)
  return traffic_;
}
inline ::ddam::ReadableTraffic* ReadableNode::release_traffic() {
  
  ::ddam::ReadableTraffic* temp = traffic_;
  traffic_ = NULL;
  return temp;
}
inline void ReadableNode::set_allocated_traffic(::ddam::ReadableTraffic* traffic) {
  delete traffic_;
  traffic_ = traffic;
  if (traffic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.traffic)
}

// map<string, .ddam.ReadableTopology> topology = 6;
inline int ReadableNode::topology_size() const {
  return topology_.size();
}
inline void ReadableNode::clear_topology() {
  topology_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >&
ReadableNode::topology() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableNode.topology)
  return topology_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableTopology >*
ReadableNode::mutable_topology() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableNode.topology)
  return topology_.MutableMap();
}

// map<string, .ddam.NetworkHealth> networkHealth = 7;
inline int ReadableNode::networkhealth_size() const {
  return networkhealth_.size();
}
inline void ReadableNode::clear_networkhealth() {
  networkhealth_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >&
ReadableNode::networkhealth() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableNode.networkHealth)
  return networkhealth_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::NetworkHealth >*
ReadableNode::mutable_networkhealth() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableNode.networkHealth)
  return networkhealth_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 8;
inline bool ReadableNode::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void ReadableNode::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& ReadableNode::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableNode.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableNode::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableNode.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableNode::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadableNode::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableNode.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2eproto__INCLUDED
