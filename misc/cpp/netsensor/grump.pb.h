// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grump.proto

#ifndef PROTOBUF_grump_2eproto__INCLUDED
#define PROTOBUF_grump_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_grump_2eproto();
void protobuf_AssignDesc_grump_2eproto();
void protobuf_ShutdownFile_grump_2eproto();

class Group;
class Grump;

// ===================================================================

class Group : public ::google::protobuf::Message {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // map<string, string> members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      members() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:ddam.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Group_MembersEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > members_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_grump_2eproto();
  friend void protobuf_AssignDesc_grump_2eproto();
  friend void protobuf_ShutdownFile_grump_2eproto();

  void InitAsDefaultInstance();
  static Group* default_instance_;
};
// -------------------------------------------------------------------

class Grump : public ::google::protobuf::Message {
 public:
  Grump();
  virtual ~Grump();

  Grump(const Grump& from);

  inline Grump& operator=(const Grump& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Grump& default_instance();

  void Swap(Grump* other);

  // implements Message ----------------------------------------------

  inline Grump* New() const { return New(NULL); }

  Grump* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Grump& from);
  void MergeFrom(const Grump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ddam.Group> groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::ddam::Group >&
      groups() const;
  ::google::protobuf::Map< ::std::string, ::ddam::Group >*
      mutable_groups();

  // optional .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Grump)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::Group,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Grump_GroupsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::Group,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > groups_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_grump_2eproto();
  friend void protobuf_AssignDesc_grump_2eproto();
  friend void protobuf_ShutdownFile_grump_2eproto();

  void InitAsDefaultInstance();
  static Grump* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional string name = 1;
inline void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:ddam.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Group.name)
}
inline void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Group.name)
}
inline void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Group.name)
}
inline ::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.Group.name)
}

// map<string, string> members = 2;
inline int Group::members_size() const {
  return members_.size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Group::members() const {
  // @@protoc_insertion_point(field_map:ddam.Group.members)
  return members_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Group.members)
  return members_.MutableMap();
}

// -------------------------------------------------------------------

// Grump

// map<string, .ddam.Group> groups = 1;
inline int Grump::groups_size() const {
  return groups_.size();
}
inline void Grump::clear_groups() {
  groups_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::Group >&
Grump::groups() const {
  // @@protoc_insertion_point(field_map:ddam.Grump.groups)
  return groups_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::Group >*
Grump::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Grump.groups)
  return groups_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 2;
inline bool Grump::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Grump::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Grump::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Grump.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Grump::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Grump.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Grump::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Grump::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Grump.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_grump_2eproto__INCLUDED
