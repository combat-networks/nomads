// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grump.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_MembersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Grump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grump_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grump_GroupsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_grump_2eproto() {
  protobuf_AddDesc_grump_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grump.proto");
  GOOGLE_CHECK(file != NULL);
  Group_descriptor_ = file->message_type(0);
  static const int Group_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, members_),
  };
  Group_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      -1,
      -1,
      -1,
      sizeof(Group),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _is_default_instance_));
  Group_MembersEntry_descriptor_ = Group_descriptor_->nested_type(0);
  Grump_descriptor_ = file->message_type(1);
  static const int Grump_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grump, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grump, timestamp_),
  };
  Grump_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Grump_descriptor_,
      Grump::default_instance_,
      Grump_offsets_,
      -1,
      -1,
      -1,
      sizeof(Grump),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grump, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grump, _is_default_instance_));
  Grump_GroupsEntry_descriptor_ = Grump_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grump_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Group_MembersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Group_MembersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Grump_descriptor_, &Grump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Grump_GroupsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::Group,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Grump_GroupsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_grump_2eproto() {
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Grump::default_instance_;
  delete Grump_reflection_;
}

void protobuf_AddDesc_grump_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013grump.proto\022\004ddam\032\037google/protobuf/tim"
    "estamp.proto\"p\n\005Group\022\014\n\004name\030\001 \001(\t\022)\n\007m"
    "embers\030\002 \003(\0132\030.ddam.Group.MembersEntry\032."
    "\n\014MembersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\t:\0028\001\"\233\001\n\005Grump\022\'\n\006groups\030\001 \003(\0132\027.ddam."
    "Grump.GroupsEntry\022-\n\ttimestamp\030\002 \001(\0132\032.g"
    "oogle.protobuf.Timestamp\032:\n\013GroupsEntry\022"
    "\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.ddam.Group"
    ":\0028\001B#\n\020us.ihmc.aci.ddamB\nGrumpProtoP\001\240\001"
    "\001b\006proto3", 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grump.proto", &protobuf_RegisterTypes);
  Group::default_instance_ = new Group();
  Grump::default_instance_ = new Grump();
  Group::default_instance_->InitAsDefaultInstance();
  Grump::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grump_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grump_2eproto {
  StaticDescriptorInitializer_grump_2eproto() {
    protobuf_AddDesc_grump_2eproto();
  }
} static_descriptor_initializer_grump_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kNameFieldNumber;
const int Group::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Group)
}

void Group::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Group::Group(const Group& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Group)
}

void Group::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  members_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  members_.SetEntryDescriptor(
      &::ddam::Group_MembersEntry_descriptor_);
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:ddam.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grump_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  members_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Group.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // map<string, string> members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          ::google::protobuf::scoped_ptr<Group_MembersEntry> entry(members_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_members())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Group.MembersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Group.MembersEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Group)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> members = 2;
  {
    ::google::protobuf::scoped_ptr<Group_MembersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->members().begin();
        it != this->members().end(); ++it) {
      entry.reset(members_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Group.MembersEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Group.MembersEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Group)
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Group)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> members = 2;
  {
    ::google::protobuf::scoped_ptr<Group_MembersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->members().begin();
        it != this->members().end(); ++it) {
      entry.reset(members_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Group.MembersEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Group.MembersEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Group)
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<string, string> members = 2;
  total_size += 1 * this->members_size();
  {
    ::google::protobuf::scoped_ptr<Group_MembersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->members().begin();
        it != this->members().end(); ++it) {
      entry.reset(members_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Group* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  members_.MergeFrom(from.members_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  name_.Swap(&other->name_);
  members_.Swap(&other->members_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// optional string name = 1;
void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:ddam.Group.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Group::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Group.name)
}
 void Group::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Group.name)
}
 void Group::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Group.name)
}
 ::std::string* Group::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Group::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddam.Group.name)
}

// map<string, string> members = 2;
int Group::members_size() const {
  return members_.size();
}
void Group::clear_members() {
  members_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Group::members() const {
  // @@protoc_insertion_point(field_map:ddam.Group.members)
  return members_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Group.members)
  return members_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grump::kGroupsFieldNumber;
const int Grump::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grump::Grump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Grump)
}

void Grump::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Grump::Grump(const Grump& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Grump)
}

void Grump::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  groups_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  groups_.SetEntryDescriptor(
      &::ddam::Grump_GroupsEntry_descriptor_);
  timestamp_ = NULL;
}

Grump::~Grump() {
  // @@protoc_insertion_point(destructor:ddam.Grump)
  SharedDtor();
}

void Grump::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void Grump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grump_descriptor_;
}

const Grump& Grump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grump_2eproto();
  return *default_instance_;
}

Grump* Grump::default_instance_ = NULL;

Grump* Grump::New(::google::protobuf::Arena* arena) const {
  Grump* n = new Grump;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grump::Clear() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  groups_.Clear();
}

bool Grump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Grump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ddam.Group> groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          ::google::protobuf::scoped_ptr<Grump_GroupsEntry> entry(groups_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_groups())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Grump.GroupsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Grump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Grump)
  return false;
#undef DO_
}

void Grump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Grump)
  // map<string, .ddam.Group> groups = 1;
  {
    ::google::protobuf::scoped_ptr<Grump_GroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Group >::const_iterator
        it = this->groups().begin();
        it != this->groups().end(); ++it) {
      entry.reset(groups_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Grump.GroupsEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Grump)
}

::google::protobuf::uint8* Grump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Grump)
  // map<string, .ddam.Group> groups = 1;
  {
    ::google::protobuf::scoped_ptr<Grump_GroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Group >::const_iterator
        it = this->groups().begin();
        it != this->groups().end(); ++it) {
      entry.reset(groups_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Grump.GroupsEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Grump)
  return target;
}

int Grump::ByteSize() const {
  int total_size = 0;

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // map<string, .ddam.Group> groups = 1;
  total_size += 1 * this->groups_size();
  {
    ::google::protobuf::scoped_ptr<Grump_GroupsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Group >::const_iterator
        it = this->groups().begin();
        it != this->groups().end(); ++it) {
      entry.reset(groups_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grump::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Grump* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Grump>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grump::MergeFrom(const Grump& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  groups_.MergeFrom(from.groups_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Grump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grump::CopyFrom(const Grump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grump::IsInitialized() const {

  return true;
}

void Grump::Swap(Grump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grump::InternalSwap(Grump* other) {
  groups_.Swap(&other->groups_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grump_descriptor_;
  metadata.reflection = Grump_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grump

// map<string, .ddam.Group> groups = 1;
int Grump::groups_size() const {
  return groups_.size();
}
void Grump::clear_groups() {
  groups_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::Group >&
Grump::groups() const {
  // @@protoc_insertion_point(field_map:ddam.Grump.groups)
  return groups_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::Group >*
Grump::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Grump.groups)
  return groups_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 2;
bool Grump::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Grump::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Grump::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Grump.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Grump::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Grump.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Grump::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Grump::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Grump.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
