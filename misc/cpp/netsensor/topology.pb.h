// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#ifndef PROTOBUF_topology_2eproto__INCLUDED
#define PROTOBUF_topology_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_topology_2eproto();
void protobuf_AssignDesc_topology_2eproto();
void protobuf_ShutdownFile_topology_2eproto();

class Host;
class ReadableHost;
class ReadableTopology;
class Topology;
class TopologyParts;

// ===================================================================

class TopologyParts : public ::google::protobuf::Message {
 public:
  TopologyParts();
  virtual ~TopologyParts();

  TopologyParts(const TopologyParts& from);

  inline TopologyParts& operator=(const TopologyParts& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopologyParts& default_instance();

  void Swap(TopologyParts* other);

  // implements Message ----------------------------------------------

  inline TopologyParts* New() const { return New(NULL); }

  TopologyParts* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopologyParts& from);
  void MergeFrom(const TopologyParts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopologyParts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string networkName = 1;
  void clear_networkname();
  static const int kNetworkNameFieldNumber = 1;
  const ::std::string& networkname() const;
  void set_networkname(const ::std::string& value);
  void set_networkname(const char* value);
  void set_networkname(const char* value, size_t size);
  ::std::string* mutable_networkname();
  ::std::string* release_networkname();
  void set_allocated_networkname(::std::string* networkname);

  // optional string subnetMask = 2;
  void clear_subnetmask();
  static const int kSubnetMaskFieldNumber = 2;
  const ::std::string& subnetmask() const;
  void set_subnetmask(const ::std::string& value);
  void set_subnetmask(const char* value);
  void set_subnetmask(const char* value, size_t size);
  ::std::string* mutable_subnetmask();
  ::std::string* release_subnetmask();
  void set_allocated_subnetmask(::std::string* subnetmask);

  // repeated .ddam.Host internals = 3;
  int internals_size() const;
  void clear_internals();
  static const int kInternalsFieldNumber = 3;
  const ::ddam::Host& internals(int index) const;
  ::ddam::Host* mutable_internals(int index);
  ::ddam::Host* add_internals();
  ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
      mutable_internals();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
      internals() const;

  // repeated .ddam.Host localGws = 4;
  int localgws_size() const;
  void clear_localgws();
  static const int kLocalGwsFieldNumber = 4;
  const ::ddam::Host& localgws(int index) const;
  ::ddam::Host* mutable_localgws(int index);
  ::ddam::Host* add_localgws();
  ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
      mutable_localgws();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
      localgws() const;

  // repeated .ddam.Host remoteGws = 5;
  int remotegws_size() const;
  void clear_remotegws();
  static const int kRemoteGwsFieldNumber = 5;
  const ::ddam::Host& remotegws(int index) const;
  ::ddam::Host* mutable_remotegws(int index);
  ::ddam::Host* add_remotegws();
  ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
      mutable_remotegws();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
      remotegws() const;

  // repeated .ddam.Host externals = 6;
  int externals_size() const;
  void clear_externals();
  static const int kExternalsFieldNumber = 6;
  const ::ddam::Host& externals(int index) const;
  ::ddam::Host* mutable_externals(int index);
  ::ddam::Host* add_externals();
  ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
      mutable_externals();
  const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
      externals() const;

  // optional .google.protobuf.Timestamp timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.TopologyParts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr networkname_;
  ::google::protobuf::internal::ArenaStringPtr subnetmask_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Host > internals_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Host > localgws_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Host > remotegws_;
  ::google::protobuf::RepeatedPtrField< ::ddam::Host > externals_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static TopologyParts* default_instance_;
};
// -------------------------------------------------------------------

class Topology : public ::google::protobuf::Message {
 public:
  Topology();
  virtual ~Topology();

  Topology(const Topology& from);

  inline Topology& operator=(const Topology& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topology& default_instance();

  void Swap(Topology* other);

  // implements Message ----------------------------------------------

  inline Topology* New() const { return New(NULL); }

  Topology* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topology& from);
  void MergeFrom(const Topology& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Topology* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string networkName = 1;
  void clear_networkname();
  static const int kNetworkNameFieldNumber = 1;
  const ::std::string& networkname() const;
  void set_networkname(const ::std::string& value);
  void set_networkname(const char* value);
  void set_networkname(const char* value, size_t size);
  ::std::string* mutable_networkname();
  ::std::string* release_networkname();
  void set_allocated_networkname(::std::string* networkname);

  // optional string subnetMask = 2;
  void clear_subnetmask();
  static const int kSubnetMaskFieldNumber = 2;
  const ::std::string& subnetmask() const;
  void set_subnetmask(const ::std::string& value);
  void set_subnetmask(const char* value);
  void set_subnetmask(const char* value, size_t size);
  ::std::string* mutable_subnetmask();
  ::std::string* release_subnetmask();
  void set_allocated_subnetmask(::std::string* subnetmask);

  // map<uint32, .ddam.Host> internals = 4;
  int internals_size() const;
  void clear_internals();
  static const int kInternalsFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
      internals() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
      mutable_internals();

  // map<uint32, .ddam.Host> localGws = 5;
  int localgws_size() const;
  void clear_localgws();
  static const int kLocalGwsFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
      localgws() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
      mutable_localgws();

  // map<uint32, .ddam.Host> remoteGws = 6;
  int remotegws_size() const;
  void clear_remotegws();
  static const int kRemoteGwsFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
      remotegws() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
      mutable_remotegws();

  // map<uint32, .ddam.Host> externals = 7;
  int externals_size() const;
  void clear_externals();
  static const int kExternalsFieldNumber = 7;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
      externals() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
      mutable_externals();

  // optional .google.protobuf.Timestamp timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Topology)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr networkname_;
  ::google::protobuf::internal::ArenaStringPtr subnetmask_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Topology_InternalsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > internals_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Topology_LocalGwsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > localgws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Topology_RemoteGwsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > remotegws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Topology_ExternalsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::ddam::Host,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > externals_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static Topology* default_instance_;
};
// -------------------------------------------------------------------

class Host : public ::google::protobuf::Message {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  inline Host* New() const { return New(NULL); }

  Host* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Host* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // optional string mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // optional string gatewayName = 3;
  void clear_gatewayname();
  static const int kGatewayNameFieldNumber = 3;
  const ::std::string& gatewayname() const;
  void set_gatewayname(const ::std::string& value);
  void set_gatewayname(const char* value);
  void set_gatewayname(const char* value, size_t size);
  ::std::string* mutable_gatewayname();
  ::std::string* release_gatewayname();
  void set_allocated_gatewayname(::std::string* gatewayname);

  // optional bool isDefault = 4;
  void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  bool isdefault() const;
  void set_isdefault(bool value);

  // @@protoc_insertion_point(class_scope:ddam.Host)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::uint32 ip_;
  bool isdefault_;
  ::google::protobuf::internal::ArenaStringPtr gatewayname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static Host* default_instance_;
};
// -------------------------------------------------------------------

class ReadableTopology : public ::google::protobuf::Message {
 public:
  ReadableTopology();
  virtual ~ReadableTopology();

  ReadableTopology(const ReadableTopology& from);

  inline ReadableTopology& operator=(const ReadableTopology& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableTopology& default_instance();

  void Swap(ReadableTopology* other);

  // implements Message ----------------------------------------------

  inline ReadableTopology* New() const { return New(NULL); }

  ReadableTopology* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableTopology& from);
  void MergeFrom(const ReadableTopology& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableTopology* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string networkName = 1;
  void clear_networkname();
  static const int kNetworkNameFieldNumber = 1;
  const ::std::string& networkname() const;
  void set_networkname(const ::std::string& value);
  void set_networkname(const char* value);
  void set_networkname(const char* value, size_t size);
  ::std::string* mutable_networkname();
  ::std::string* release_networkname();
  void set_allocated_networkname(::std::string* networkname);

  // optional string subnetMask = 2;
  void clear_subnetmask();
  static const int kSubnetMaskFieldNumber = 2;
  const ::std::string& subnetmask() const;
  void set_subnetmask(const ::std::string& value);
  void set_subnetmask(const char* value);
  void set_subnetmask(const char* value, size_t size);
  ::std::string* mutable_subnetmask();
  ::std::string* release_subnetmask();
  void set_allocated_subnetmask(::std::string* subnetmask);

  // map<string, .ddam.ReadableHost> internals = 3;
  int internals_size() const;
  void clear_internals();
  static const int kInternalsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
      internals() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
      mutable_internals();

  // map<string, .ddam.ReadableHost> localGws = 4;
  int localgws_size() const;
  void clear_localgws();
  static const int kLocalGwsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
      localgws() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
      mutable_localgws();

  // map<string, .ddam.ReadableHost> remoteGws = 5;
  int remotegws_size() const;
  void clear_remotegws();
  static const int kRemoteGwsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
      remotegws() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
      mutable_remotegws();

  // map<string, .ddam.ReadableHost> externals = 6;
  int externals_size() const;
  void clear_externals();
  static const int kExternalsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
      externals() const;
  ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
      mutable_externals();

  // optional .google.protobuf.Timestamp timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.ReadableTopology)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr networkname_;
  ::google::protobuf::internal::ArenaStringPtr subnetmask_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableTopology_InternalsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > internals_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableTopology_LocalGwsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > localgws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableTopology_RemoteGwsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > remotegws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      ReadableTopology_ExternalsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::ddam::ReadableHost,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > externals_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static ReadableTopology* default_instance_;
};
// -------------------------------------------------------------------

class ReadableHost : public ::google::protobuf::Message {
 public:
  ReadableHost();
  virtual ~ReadableHost();

  ReadableHost(const ReadableHost& from);

  inline ReadableHost& operator=(const ReadableHost& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadableHost& default_instance();

  void Swap(ReadableHost* other);

  // implements Message ----------------------------------------------

  inline ReadableHost* New() const { return New(NULL); }

  ReadableHost* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadableHost& from);
  void MergeFrom(const ReadableHost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadableHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // optional string gatewayName = 3;
  void clear_gatewayname();
  static const int kGatewayNameFieldNumber = 3;
  const ::std::string& gatewayname() const;
  void set_gatewayname(const ::std::string& value);
  void set_gatewayname(const char* value);
  void set_gatewayname(const char* value, size_t size);
  ::std::string* mutable_gatewayname();
  ::std::string* release_gatewayname();
  void set_allocated_gatewayname(::std::string* gatewayname);

  // optional bool isDefault = 4;
  void clear_isdefault();
  static const int kIsDefaultFieldNumber = 4;
  bool isdefault() const;
  void set_isdefault(bool value);

  // @@protoc_insertion_point(class_scope:ddam.ReadableHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr gatewayname_;
  bool isdefault_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static ReadableHost* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TopologyParts

// optional string networkName = 1;
inline void TopologyParts::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopologyParts::networkname() const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.networkName)
  return networkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopologyParts::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.TopologyParts.networkName)
}
inline void TopologyParts::set_networkname(const char* value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.TopologyParts.networkName)
}
inline void TopologyParts::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.TopologyParts.networkName)
}
inline ::std::string* TopologyParts::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopologyParts::release_networkname() {
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopologyParts::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:ddam.TopologyParts.networkName)
}

// optional string subnetMask = 2;
inline void TopologyParts::clear_subnetmask() {
  subnetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopologyParts::subnetmask() const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.subnetMask)
  return subnetmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopologyParts::set_subnetmask(const ::std::string& value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.TopologyParts.subnetMask)
}
inline void TopologyParts::set_subnetmask(const char* value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.TopologyParts.subnetMask)
}
inline void TopologyParts::set_subnetmask(const char* value, size_t size) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.TopologyParts.subnetMask)
}
inline ::std::string* TopologyParts::mutable_subnetmask() {
  
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.subnetMask)
  return subnetmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopologyParts::release_subnetmask() {
  
  return subnetmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopologyParts::set_allocated_subnetmask(::std::string* subnetmask) {
  if (subnetmask != NULL) {
    
  } else {
    
  }
  subnetmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetmask);
  // @@protoc_insertion_point(field_set_allocated:ddam.TopologyParts.subnetMask)
}

// repeated .ddam.Host internals = 3;
inline int TopologyParts::internals_size() const {
  return internals_.size();
}
inline void TopologyParts::clear_internals() {
  internals_.Clear();
}
inline const ::ddam::Host& TopologyParts::internals(int index) const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.internals)
  return internals_.Get(index);
}
inline ::ddam::Host* TopologyParts::mutable_internals(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.internals)
  return internals_.Mutable(index);
}
inline ::ddam::Host* TopologyParts::add_internals() {
  // @@protoc_insertion_point(field_add:ddam.TopologyParts.internals)
  return internals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
TopologyParts::mutable_internals() {
  // @@protoc_insertion_point(field_mutable_list:ddam.TopologyParts.internals)
  return &internals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
TopologyParts::internals() const {
  // @@protoc_insertion_point(field_list:ddam.TopologyParts.internals)
  return internals_;
}

// repeated .ddam.Host localGws = 4;
inline int TopologyParts::localgws_size() const {
  return localgws_.size();
}
inline void TopologyParts::clear_localgws() {
  localgws_.Clear();
}
inline const ::ddam::Host& TopologyParts::localgws(int index) const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.localGws)
  return localgws_.Get(index);
}
inline ::ddam::Host* TopologyParts::mutable_localgws(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.localGws)
  return localgws_.Mutable(index);
}
inline ::ddam::Host* TopologyParts::add_localgws() {
  // @@protoc_insertion_point(field_add:ddam.TopologyParts.localGws)
  return localgws_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
TopologyParts::mutable_localgws() {
  // @@protoc_insertion_point(field_mutable_list:ddam.TopologyParts.localGws)
  return &localgws_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
TopologyParts::localgws() const {
  // @@protoc_insertion_point(field_list:ddam.TopologyParts.localGws)
  return localgws_;
}

// repeated .ddam.Host remoteGws = 5;
inline int TopologyParts::remotegws_size() const {
  return remotegws_.size();
}
inline void TopologyParts::clear_remotegws() {
  remotegws_.Clear();
}
inline const ::ddam::Host& TopologyParts::remotegws(int index) const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.remoteGws)
  return remotegws_.Get(index);
}
inline ::ddam::Host* TopologyParts::mutable_remotegws(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.remoteGws)
  return remotegws_.Mutable(index);
}
inline ::ddam::Host* TopologyParts::add_remotegws() {
  // @@protoc_insertion_point(field_add:ddam.TopologyParts.remoteGws)
  return remotegws_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
TopologyParts::mutable_remotegws() {
  // @@protoc_insertion_point(field_mutable_list:ddam.TopologyParts.remoteGws)
  return &remotegws_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
TopologyParts::remotegws() const {
  // @@protoc_insertion_point(field_list:ddam.TopologyParts.remoteGws)
  return remotegws_;
}

// repeated .ddam.Host externals = 6;
inline int TopologyParts::externals_size() const {
  return externals_.size();
}
inline void TopologyParts::clear_externals() {
  externals_.Clear();
}
inline const ::ddam::Host& TopologyParts::externals(int index) const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.externals)
  return externals_.Get(index);
}
inline ::ddam::Host* TopologyParts::mutable_externals(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.externals)
  return externals_.Mutable(index);
}
inline ::ddam::Host* TopologyParts::add_externals() {
  // @@protoc_insertion_point(field_add:ddam.TopologyParts.externals)
  return externals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ddam::Host >*
TopologyParts::mutable_externals() {
  // @@protoc_insertion_point(field_mutable_list:ddam.TopologyParts.externals)
  return &externals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ddam::Host >&
TopologyParts::externals() const {
  // @@protoc_insertion_point(field_list:ddam.TopologyParts.externals)
  return externals_;
}

// optional .google.protobuf.Timestamp timestamp = 7;
inline bool TopologyParts::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void TopologyParts::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& TopologyParts::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.TopologyParts.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* TopologyParts::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.TopologyParts.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* TopologyParts::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void TopologyParts::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.TopologyParts.timestamp)
}

// -------------------------------------------------------------------

// Topology

// optional string networkName = 1;
inline void Topology::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Topology::networkname() const {
  // @@protoc_insertion_point(field_get:ddam.Topology.networkName)
  return networkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topology::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Topology.networkName)
}
inline void Topology::set_networkname(const char* value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Topology.networkName)
}
inline void Topology::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Topology.networkName)
}
inline ::std::string* Topology::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Topology.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Topology::release_networkname() {
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topology::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:ddam.Topology.networkName)
}

// optional string subnetMask = 2;
inline void Topology::clear_subnetmask() {
  subnetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Topology::subnetmask() const {
  // @@protoc_insertion_point(field_get:ddam.Topology.subnetMask)
  return subnetmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topology::set_subnetmask(const ::std::string& value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Topology.subnetMask)
}
inline void Topology::set_subnetmask(const char* value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Topology.subnetMask)
}
inline void Topology::set_subnetmask(const char* value, size_t size) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Topology.subnetMask)
}
inline ::std::string* Topology::mutable_subnetmask() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Topology.subnetMask)
  return subnetmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Topology::release_subnetmask() {
  
  return subnetmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topology::set_allocated_subnetmask(::std::string* subnetmask) {
  if (subnetmask != NULL) {
    
  } else {
    
  }
  subnetmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetmask);
  // @@protoc_insertion_point(field_set_allocated:ddam.Topology.subnetMask)
}

// map<uint32, .ddam.Host> internals = 4;
inline int Topology::internals_size() const {
  return internals_.size();
}
inline void Topology::clear_internals() {
  internals_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
Topology::internals() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.internals)
  return internals_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
Topology::mutable_internals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.internals)
  return internals_.MutableMap();
}

// map<uint32, .ddam.Host> localGws = 5;
inline int Topology::localgws_size() const {
  return localgws_.size();
}
inline void Topology::clear_localgws() {
  localgws_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
Topology::localgws() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.localGws)
  return localgws_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
Topology::mutable_localgws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.localGws)
  return localgws_.MutableMap();
}

// map<uint32, .ddam.Host> remoteGws = 6;
inline int Topology::remotegws_size() const {
  return remotegws_.size();
}
inline void Topology::clear_remotegws() {
  remotegws_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
Topology::remotegws() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.remoteGws)
  return remotegws_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
Topology::mutable_remotegws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.remoteGws)
  return remotegws_.MutableMap();
}

// map<uint32, .ddam.Host> externals = 7;
inline int Topology::externals_size() const {
  return externals_.size();
}
inline void Topology::clear_externals() {
  externals_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >&
Topology::externals() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.externals)
  return externals_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Host >*
Topology::mutable_externals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.externals)
  return externals_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 8;
inline bool Topology::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Topology::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Topology::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Topology.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Topology::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Topology.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Topology::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Topology::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Topology.timestamp)
}

// -------------------------------------------------------------------

// Host

// optional uint32 ip = 1;
inline void Host::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Host::ip() const {
  // @@protoc_insertion_point(field_get:ddam.Host.ip)
  return ip_;
}
inline void Host::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:ddam.Host.ip)
}

// optional string mac = 2;
inline void Host::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Host::mac() const {
  // @@protoc_insertion_point(field_get:ddam.Host.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Host.mac)
}
inline void Host::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Host.mac)
}
inline void Host::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Host.mac)
}
inline ::std::string* Host::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Host.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_mac() {
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ddam.Host.mac)
}

// optional string gatewayName = 3;
inline void Host::clear_gatewayname() {
  gatewayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Host::gatewayname() const {
  // @@protoc_insertion_point(field_get:ddam.Host.gatewayName)
  return gatewayname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_gatewayname(const ::std::string& value) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Host.gatewayName)
}
inline void Host::set_gatewayname(const char* value) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Host.gatewayName)
}
inline void Host::set_gatewayname(const char* value, size_t size) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Host.gatewayName)
}
inline ::std::string* Host::mutable_gatewayname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Host.gatewayName)
  return gatewayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_gatewayname() {
  
  return gatewayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_gatewayname(::std::string* gatewayname) {
  if (gatewayname != NULL) {
    
  } else {
    
  }
  gatewayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayname);
  // @@protoc_insertion_point(field_set_allocated:ddam.Host.gatewayName)
}

// optional bool isDefault = 4;
inline void Host::clear_isdefault() {
  isdefault_ = false;
}
inline bool Host::isdefault() const {
  // @@protoc_insertion_point(field_get:ddam.Host.isDefault)
  return isdefault_;
}
inline void Host::set_isdefault(bool value) {
  
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:ddam.Host.isDefault)
}

// -------------------------------------------------------------------

// ReadableTopology

// optional string networkName = 1;
inline void ReadableTopology::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableTopology::networkname() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableTopology.networkName)
  return networkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableTopology::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableTopology.networkName)
}
inline void ReadableTopology::set_networkname(const char* value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableTopology.networkName)
}
inline void ReadableTopology::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableTopology.networkName)
}
inline ::std::string* ReadableTopology::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableTopology.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableTopology::release_networkname() {
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableTopology::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableTopology.networkName)
}

// optional string subnetMask = 2;
inline void ReadableTopology::clear_subnetmask() {
  subnetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableTopology::subnetmask() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableTopology.subnetMask)
  return subnetmask_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableTopology::set_subnetmask(const ::std::string& value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableTopology.subnetMask)
}
inline void ReadableTopology::set_subnetmask(const char* value) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableTopology.subnetMask)
}
inline void ReadableTopology::set_subnetmask(const char* value, size_t size) {
  
  subnetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableTopology.subnetMask)
}
inline ::std::string* ReadableTopology::mutable_subnetmask() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableTopology.subnetMask)
  return subnetmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableTopology::release_subnetmask() {
  
  return subnetmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableTopology::set_allocated_subnetmask(::std::string* subnetmask) {
  if (subnetmask != NULL) {
    
  } else {
    
  }
  subnetmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetmask);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableTopology.subnetMask)
}

// map<string, .ddam.ReadableHost> internals = 3;
inline int ReadableTopology::internals_size() const {
  return internals_.size();
}
inline void ReadableTopology::clear_internals() {
  internals_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
ReadableTopology::internals() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTopology.internals)
  return internals_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
ReadableTopology::mutable_internals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTopology.internals)
  return internals_.MutableMap();
}

// map<string, .ddam.ReadableHost> localGws = 4;
inline int ReadableTopology::localgws_size() const {
  return localgws_.size();
}
inline void ReadableTopology::clear_localgws() {
  localgws_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
ReadableTopology::localgws() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTopology.localGws)
  return localgws_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
ReadableTopology::mutable_localgws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTopology.localGws)
  return localgws_.MutableMap();
}

// map<string, .ddam.ReadableHost> remoteGws = 5;
inline int ReadableTopology::remotegws_size() const {
  return remotegws_.size();
}
inline void ReadableTopology::clear_remotegws() {
  remotegws_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
ReadableTopology::remotegws() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTopology.remoteGws)
  return remotegws_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
ReadableTopology::mutable_remotegws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTopology.remoteGws)
  return remotegws_.MutableMap();
}

// map<string, .ddam.ReadableHost> externals = 6;
inline int ReadableTopology::externals_size() const {
  return externals_.size();
}
inline void ReadableTopology::clear_externals() {
  externals_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >&
ReadableTopology::externals() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTopology.externals)
  return externals_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ddam::ReadableHost >*
ReadableTopology::mutable_externals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTopology.externals)
  return externals_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 7;
inline bool ReadableTopology::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void ReadableTopology::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& ReadableTopology::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableTopology.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableTopology::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableTopology.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* ReadableTopology::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadableTopology::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableTopology.timestamp)
}

// -------------------------------------------------------------------

// ReadableHost

// optional string ip = 1;
inline void ReadableHost::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableHost::ip() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableHost.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableHost.ip)
}
inline void ReadableHost::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableHost.ip)
}
inline void ReadableHost::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableHost.ip)
}
inline ::std::string* ReadableHost::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableHost.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableHost::release_ip() {
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableHost.ip)
}

// optional string mac = 2;
inline void ReadableHost::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableHost::mac() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableHost.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableHost.mac)
}
inline void ReadableHost::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableHost.mac)
}
inline void ReadableHost::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableHost.mac)
}
inline ::std::string* ReadableHost::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableHost.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableHost::release_mac() {
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableHost.mac)
}

// optional string gatewayName = 3;
inline void ReadableHost::clear_gatewayname() {
  gatewayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadableHost::gatewayname() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableHost.gatewayName)
  return gatewayname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_gatewayname(const ::std::string& value) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableHost.gatewayName)
}
inline void ReadableHost::set_gatewayname(const char* value) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableHost.gatewayName)
}
inline void ReadableHost::set_gatewayname(const char* value, size_t size) {
  
  gatewayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableHost.gatewayName)
}
inline ::std::string* ReadableHost::mutable_gatewayname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableHost.gatewayName)
  return gatewayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadableHost::release_gatewayname() {
  
  return gatewayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadableHost::set_allocated_gatewayname(::std::string* gatewayname) {
  if (gatewayname != NULL) {
    
  } else {
    
  }
  gatewayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayname);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableHost.gatewayName)
}

// optional bool isDefault = 4;
inline void ReadableHost::clear_isdefault() {
  isdefault_ = false;
}
inline bool ReadableHost::isdefault() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableHost.isDefault)
  return isdefault_;
}
inline void ReadableHost::set_isdefault(bool value) {
  
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:ddam.ReadableHost.isDefault)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_topology_2eproto__INCLUDED
