// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_traffic_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Average;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Microflow;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_traffic_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Stat;
}  // namespace protobuf_traffic_2eproto
namespace netsensor {
class TrafficByInterfaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficByInterface>
      _instance;
} _TrafficByInterface_default_instance_;
class MicroflowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Microflow>
      _instance;
} _Microflow_default_instance_;
class StatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stat>
      _instance;
} _Stat_default_instance_;
class AverageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Average>
      _instance;
} _Average_default_instance_;
}  // namespace netsensor
namespace protobuf_traffic_2eproto {
static void InitDefaultsTrafficByInterface() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_TrafficByInterface_default_instance_;
    new (ptr) ::netsensor::TrafficByInterface();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::TrafficByInterface::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficByInterface =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficByInterface}, {
      &protobuf_traffic_2eproto::scc_info_Microflow.base,}};

static void InitDefaultsMicroflow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_Microflow_default_instance_;
    new (ptr) ::netsensor::Microflow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::Microflow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Microflow =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMicroflow}, {
      &protobuf_traffic_2eproto::scc_info_Stat.base,}};

static void InitDefaultsStat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_Stat_default_instance_;
    new (ptr) ::netsensor::Stat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::Stat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Stat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStat}, {
      &protobuf_traffic_2eproto::scc_info_Average.base,}};

static void InitDefaultsAverage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_Average_default_instance_;
    new (ptr) ::netsensor::Average();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::Average::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Average =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAverage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficByInterface.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Microflow.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Average.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::TrafficByInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::TrafficByInterface, monitoringinterface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::TrafficByInterface, microflows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Microflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Microflow, ipsrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Microflow, ipdst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Microflow, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Microflow, latency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, stattype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, srcport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, dstport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Stat, averages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Average, observed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::netsensor::TrafficByInterface)},
  { 7, -1, sizeof(::netsensor::Microflow)},
  { 16, -1, sizeof(::netsensor::Stat)},
  { 26, -1, sizeof(::netsensor::Average)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_TrafficByInterface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_Microflow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_Average_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "traffic.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rtraffic.proto\022\tnetsensor\032\014prefix.proto"
      "\032\016datatype.proto\"[\n\022TrafficByInterface\022\033"
      "\n\023monitoringInterface\030\001 \001(\t\022(\n\nmicroflow"
      "s\030\002 \003(\0132\024.netsensor.Microflow\"Z\n\tMicrofl"
      "ow\022\r\n\005ipSrc\030\001 \001(\r\022\r\n\005ipDst\030\002 \001(\r\022\036\n\005stat"
      "s\030\003 \003(\0132\017.netsensor.Stat\022\017\n\007latency\030\004 \001("
      "\r\"\207\001\n\004Stat\022%\n\010statType\030\001 \001(\0162\023.netsensor"
      ".StatType\022\020\n\010protocol\030\002 \001(\t\022\017\n\007srcPort\030\003"
      " \001(\r\022\017\n\007dstPort\030\004 \001(\r\022$\n\010averages\030\005 \003(\0132"
      "\022.netsensor.Average\"r\n\007Average\022\022\n\nresolu"
      "tion\030\001 \001(\r\022!\n\006prefix\030\002 \001(\0162\021.netsensor.P"
      "refix\022\014\n\004sent\030\003 \001(\r\022\020\n\010received\030\004 \001(\r\022\020\n"
      "\010observed\030\005 \001(\rB>\n\036us.ihmc.ddam.sensors."
      "netsensorB\014TrafficProtoP\001Z\tnetsensor\240\001\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  ::protobuf_prefix_2eproto::AddDescriptors();
  ::protobuf_datatype_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_traffic_2eproto
namespace netsensor {

// ===================================================================

void TrafficByInterface::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficByInterface::kMonitoringInterfaceFieldNumber;
const int TrafficByInterface::kMicroflowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficByInterface::TrafficByInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_2eproto::scc_info_TrafficByInterface.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.TrafficByInterface)
}
TrafficByInterface::TrafficByInterface(const TrafficByInterface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      microflows_(from.microflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitoringinterface().size() > 0) {
    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
  // @@protoc_insertion_point(copy_constructor:netsensor.TrafficByInterface)
}

void TrafficByInterface::SharedCtor() {
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TrafficByInterface::~TrafficByInterface() {
  // @@protoc_insertion_point(destructor:netsensor.TrafficByInterface)
  SharedDtor();
}

void TrafficByInterface::SharedDtor() {
  monitoringinterface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficByInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficByInterface::descriptor() {
  ::protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficByInterface& TrafficByInterface::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_2eproto::scc_info_TrafficByInterface.base);
  return *internal_default_instance();
}


void TrafficByInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.TrafficByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  microflows_.Clear();
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TrafficByInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.TrafficByInterface)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string monitoringInterface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoringinterface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoringinterface().data(), static_cast<int>(this->monitoringinterface().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.TrafficByInterface.monitoringInterface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Microflow microflows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_microflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.TrafficByInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.TrafficByInterface)
  return false;
#undef DO_
}

void TrafficByInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.TrafficByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), static_cast<int>(this->monitoringinterface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->monitoringinterface(), output);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->microflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->microflows(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.TrafficByInterface)
}

::google::protobuf::uint8* TrafficByInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.TrafficByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), static_cast<int>(this->monitoringinterface().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoringinterface(), target);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->microflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->microflows(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.TrafficByInterface)
  return target;
}

size_t TrafficByInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.TrafficByInterface)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .netsensor.Microflow microflows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->microflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->microflows(static_cast<int>(i)));
    }
  }

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoringinterface());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficByInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.TrafficByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficByInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficByInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.TrafficByInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.TrafficByInterface)
    MergeFrom(*source);
  }
}

void TrafficByInterface::MergeFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.TrafficByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  microflows_.MergeFrom(from.microflows_);
  if (from.monitoringinterface().size() > 0) {

    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
}

void TrafficByInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficByInterface::CopyFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficByInterface::IsInitialized() const {
  return true;
}

void TrafficByInterface::Swap(TrafficByInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficByInterface::InternalSwap(TrafficByInterface* other) {
  using std::swap;
  CastToBase(&microflows_)->InternalSwap(CastToBase(&other->microflows_));
  monitoringinterface_.Swap(&other->monitoringinterface_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficByInterface::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Microflow::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Microflow::kIpSrcFieldNumber;
const int Microflow::kIpDstFieldNumber;
const int Microflow::kStatsFieldNumber;
const int Microflow::kLatencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Microflow::Microflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_2eproto::scc_info_Microflow.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Microflow)
}
Microflow::Microflow(const Microflow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipsrc_, &from.ipsrc_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&ipsrc_)) + sizeof(latency_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Microflow)
}

void Microflow::SharedCtor() {
  ::memset(&ipsrc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&ipsrc_)) + sizeof(latency_));
}

Microflow::~Microflow() {
  // @@protoc_insertion_point(destructor:netsensor.Microflow)
  SharedDtor();
}

void Microflow::SharedDtor() {
}

void Microflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Microflow::descriptor() {
  ::protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Microflow& Microflow::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_2eproto::scc_info_Microflow.base);
  return *internal_default_instance();
}


void Microflow::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Microflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  ::memset(&ipsrc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&ipsrc_)) + sizeof(latency_));
  _internal_metadata_.Clear();
}

bool Microflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Microflow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ipSrc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipsrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipDst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipdst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Stat stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Microflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Microflow)
  return false;
#undef DO_
}

void Microflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Microflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ipsrc(), output);
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipdst(), output);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->stats(static_cast<int>(i)),
      output);
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latency(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.Microflow)
}

::google::protobuf::uint8* Microflow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Microflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ipsrc(), target);
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipdst(), target);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->stats(static_cast<int>(i)), deterministic, target);
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latency(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Microflow)
  return target;
}

size_t Microflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Microflow)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .netsensor.Stat stats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipsrc());
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipdst());
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Microflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Microflow)
  GOOGLE_DCHECK_NE(&from, this);
  const Microflow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Microflow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Microflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Microflow)
    MergeFrom(*source);
  }
}

void Microflow::MergeFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Microflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.ipsrc() != 0) {
    set_ipsrc(from.ipsrc());
  }
  if (from.ipdst() != 0) {
    set_ipdst(from.ipdst());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
}

void Microflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Microflow::CopyFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Microflow::IsInitialized() const {
  return true;
}

void Microflow::Swap(Microflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Microflow::InternalSwap(Microflow* other) {
  using std::swap;
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  swap(ipsrc_, other->ipsrc_);
  swap(ipdst_, other->ipdst_);
  swap(latency_, other->latency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Microflow::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kStatTypeFieldNumber;
const int Stat::kProtocolFieldNumber;
const int Stat::kSrcPortFieldNumber;
const int Stat::kDstPortFieldNumber;
const int Stat::kAveragesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_2eproto::scc_info_Stat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Stat)
}
Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      averages_(from.averages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  ::memcpy(&stattype_, &from.stattype_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&stattype_)) + sizeof(dstport_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Stat)
}

void Stat::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stattype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstport_) -
      reinterpret_cast<char*>(&stattype_)) + sizeof(dstport_));
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:netsensor.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  ::protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stat& Stat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_2eproto::scc_info_Stat.base);
  return *internal_default_instance();
}


void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  averages_.Clear();
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stattype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstport_) -
      reinterpret_cast<char*>(&stattype_)) + sizeof(dstport_));
  _internal_metadata_.Clear();
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Stat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netsensor.StatType statType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stattype(static_cast< ::netsensor::StatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.Stat.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 srcPort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dstPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Average averages = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_averages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stattype(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcport(), output);
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstport(), output);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->averages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->averages(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.Stat)
}

::google::protobuf::uint8* Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stattype(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcport(), target);
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstport(), target);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->averages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->averages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Stat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .netsensor.Average averages = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->averages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->averages(static_cast<int>(i)));
    }
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stattype());
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcport());
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Stat)
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  averages_.MergeFrom(from.averages_);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.stattype() != 0) {
    set_stattype(from.stattype());
  }
  if (from.srcport() != 0) {
    set_srcport(from.srcport());
  }
  if (from.dstport() != 0) {
    set_dstport(from.dstport());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  using std::swap;
  CastToBase(&averages_)->InternalSwap(CastToBase(&other->averages_));
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stattype_, other->stattype_);
  swap(srcport_, other->srcport_);
  swap(dstport_, other->dstport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Average::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Average::kResolutionFieldNumber;
const int Average::kPrefixFieldNumber;
const int Average::kSentFieldNumber;
const int Average::kReceivedFieldNumber;
const int Average::kObservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Average::Average()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_traffic_2eproto::scc_info_Average.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Average)
}
Average::Average(const Average& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&observed_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(observed_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Average)
}

void Average::SharedCtor() {
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&observed_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(observed_));
}

Average::~Average() {
  // @@protoc_insertion_point(destructor:netsensor.Average)
  SharedDtor();
}

void Average::SharedDtor() {
}

void Average::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Average::descriptor() {
  ::protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Average& Average::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_traffic_2eproto::scc_info_Average.base);
  return *internal_default_instance();
}


void Average::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Average)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&observed_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(observed_));
  _internal_metadata_.Clear();
}

bool Average::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Average)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.Prefix prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_prefix(static_cast< ::netsensor::Prefix >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 received = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 observed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Average)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Average)
  return false;
#undef DO_
}

void Average::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Average)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resolution(), output);
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prefix(), output);
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sent(), output);
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->received(), output);
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->observed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.Average)
}

::google::protobuf::uint8* Average::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Average)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resolution(), target);
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prefix(), target);
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sent(), target);
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->received(), target);
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->observed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Average)
  return target;
}

size_t Average::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Average)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolution());
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->prefix());
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent());
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received());
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->observed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Average::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Average)
  GOOGLE_DCHECK_NE(&from, this);
  const Average* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Average>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Average)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Average)
    MergeFrom(*source);
  }
}

void Average::MergeFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Average)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
  if (from.sent() != 0) {
    set_sent(from.sent());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.observed() != 0) {
    set_observed(from.observed());
  }
}

void Average::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Average::CopyFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Average::IsInitialized() const {
  return true;
}

void Average::Swap(Average* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Average::InternalSwap(Average* other) {
  using std::swap;
  swap(resolution_, other->resolution_);
  swap(prefix_, other->prefix_);
  swap(sent_, other->sent_);
  swap(received_, other->received_);
  swap(observed_, other->observed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Average::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netsensor
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::TrafficByInterface* Arena::CreateMaybeMessage< ::netsensor::TrafficByInterface >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::TrafficByInterface >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::Microflow* Arena::CreateMaybeMessage< ::netsensor::Microflow >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::Microflow >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::Stat* Arena::CreateMaybeMessage< ::netsensor::Stat >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::Stat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::Average* Arena::CreateMaybeMessage< ::netsensor::Average >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::Average >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
