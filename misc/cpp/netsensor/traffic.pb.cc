// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* Traffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Traffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Traffic_SourcesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Source_reflection_ = NULL;
const ::google::protobuf::Descriptor* Source_DestinationsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Description_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Description_reflection_ = NULL;
const ::google::protobuf::Descriptor* MocketSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MocketSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadableTraffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadableTraffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadableTraffic_SourcesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadableSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadableSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadableSource_DestinationsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReadableLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadableLink_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_2eproto() {
  protobuf_AddDesc_traffic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic.proto");
  GOOGLE_CHECK(file != NULL);
  Traffic_descriptor_ = file->message_type(0);
  static const int Traffic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, sources_),
  };
  Traffic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Traffic_descriptor_,
      Traffic::default_instance_,
      Traffic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Traffic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _is_default_instance_));
  Traffic_SourcesEntry_descriptor_ = Traffic_descriptor_->nested_type(0);
  Source_descriptor_ = file->message_type(1);
  static const int Source_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, destinations_),
  };
  Source_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Source_descriptor_,
      Source::default_instance_,
      Source_offsets_,
      -1,
      -1,
      -1,
      sizeof(Source),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _is_default_instance_));
  Source_DestinationsEntry_descriptor_ = Source_descriptor_->nested_type(0);
  Link_descriptor_ = file->message_type(2);
  static const int Link_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, ipsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, ipdst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, mocketsensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, timestamp_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      -1,
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _is_default_instance_));
  Stat_descriptor_ = file->message_type(3);
  static const int Stat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, sentfivesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, receivedfivesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, observedfivesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, sentminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, receivedminute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, observedminute_),
  };
  Stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _is_default_instance_));
  Description_descriptor_ = file->message_type(4);
  static const int Description_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, throughput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, packetloss_),
  };
  Description_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Description_descriptor_,
      Description::default_instance_,
      Description_offsets_,
      -1,
      -1,
      -1,
      sizeof(Description),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Description, _is_default_instance_));
  MocketSensor_descriptor_ = file->message_type(5);
  static const int MocketSensor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocketSensor, rtt_),
  };
  MocketSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MocketSensor_descriptor_,
      MocketSensor::default_instance_,
      MocketSensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(MocketSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocketSensor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocketSensor, _is_default_instance_));
  ReadableTraffic_descriptor_ = file->message_type(6);
  static const int ReadableTraffic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableTraffic, sources_),
  };
  ReadableTraffic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadableTraffic_descriptor_,
      ReadableTraffic::default_instance_,
      ReadableTraffic_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadableTraffic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableTraffic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableTraffic, _is_default_instance_));
  ReadableTraffic_SourcesEntry_descriptor_ = ReadableTraffic_descriptor_->nested_type(0);
  ReadableSource_descriptor_ = file->message_type(7);
  static const int ReadableSource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableSource, destinations_),
  };
  ReadableSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadableSource_descriptor_,
      ReadableSource::default_instance_,
      ReadableSource_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadableSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableSource, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableSource, _is_default_instance_));
  ReadableSource_DestinationsEntry_descriptor_ = ReadableSource_descriptor_->nested_type(0);
  ReadableLink_descriptor_ = file->message_type(8);
  static const int ReadableLink_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, ipsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, ipdst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, mocketsensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, timestamp_),
  };
  ReadableLink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadableLink_descriptor_,
      ReadableLink::default_instance_,
      ReadableLink_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReadableLink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadableLink, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Traffic_descriptor_, &Traffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Traffic_SourcesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::ddam::Source,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Traffic_SourcesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Source_descriptor_, &Source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Source_DestinationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::ddam::Link,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Source_DestinationsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stat_descriptor_, &Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Description_descriptor_, &Description::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MocketSensor_descriptor_, &MocketSensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadableTraffic_descriptor_, &ReadableTraffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ReadableTraffic_SourcesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::ReadableSource,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ReadableTraffic_SourcesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadableSource_descriptor_, &ReadableSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ReadableSource_DestinationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::ReadableLink,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ReadableSource_DestinationsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadableLink_descriptor_, &ReadableLink::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_2eproto() {
  delete Traffic::default_instance_;
  delete Traffic_reflection_;
  delete Source::default_instance_;
  delete Source_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete Stat::default_instance_;
  delete Stat_reflection_;
  delete Description::default_instance_;
  delete Description_reflection_;
  delete MocketSensor::default_instance_;
  delete MocketSensor_reflection_;
  delete ReadableTraffic::default_instance_;
  delete ReadableTraffic_reflection_;
  delete ReadableSource::default_instance_;
  delete ReadableSource_reflection_;
  delete ReadableLink::default_instance_;
  delete ReadableLink_reflection_;
}

void protobuf_AddDesc_traffic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtraffic.proto\022\004ddam\032\037google/protobuf/t"
    "imestamp.proto\"t\n\007Traffic\022+\n\007sources\030\001 \003"
    "(\0132\032.ddam.Traffic.SourcesEntry\032<\n\014Source"
    "sEntry\022\013\n\003key\030\001 \001(\r\022\033\n\005value\030\002 \001(\0132\014.dda"
    "m.Source:\0028\001\"\177\n\006Source\0224\n\014destinations\030\001"
    " \003(\0132\036.ddam.Source.DestinationsEntry\032\?\n\021"
    "DestinationsEntry\022\013\n\003key\030\001 \001(\r\022\031\n\005value\030"
    "\002 \001(\0132\n.ddam.Link:\0028\001\"\300\001\n\004Link\022\r\n\005ipSrc\030"
    "\001 \001(\r\022\r\n\005ipDst\030\002 \001(\r\022\031\n\005stats\030\003 \003(\0132\n.dd"
    "am.Stat\022&\n\013description\030\004 \001(\0132\021.ddam.Desc"
    "ription\022(\n\014mocketSensor\030\005 \001(\0132\022.ddam.Moc"
    "ketSensor\022-\n\ttimestamp\030\006 \001(\0132\032.google.pr"
    "otobuf.Timestamp\"\261\001\n\004Stat\022\020\n\010protocol\030\001 "
    "\001(\t\022\014\n\004port\030\002 \001(\r\022\023\n\013sentFiveSec\030\003 \001(\r\022\027"
    "\n\017receivedFiveSec\030\004 \001(\r\022\027\n\017observedFiveS"
    "ec\030\005 \001(\r\022\022\n\nsentMinute\030\006 \001(\r\022\026\n\016received"
    "Minute\030\007 \001(\r\022\026\n\016observedMinute\030\010 \001(\r\"g\n\013"
    "Description\022\014\n\004type\030\001 \001(\t\022\021\n\tcondition\030\002"
    " \001(\t\022\022\n\nthroughput\030\003 \001(\001\022\017\n\007latency\030\004 \001("
    "\r\022\022\n\npacketLoss\030\005 \001(\r\"\033\n\014MocketSensor\022\013\n"
    "\003RTT\030\001 \001(\001\"\214\001\n\017ReadableTraffic\0223\n\007source"
    "s\030\001 \003(\0132\".ddam.ReadableTraffic.SourcesEn"
    "try\032D\n\014SourcesEntry\022\013\n\003key\030\001 \001(\t\022#\n\005valu"
    "e\030\002 \001(\0132\024.ddam.ReadableSource:\0028\001\"\227\001\n\016Re"
    "adableSource\022<\n\014destinations\030\001 \003(\0132&.dda"
    "m.ReadableSource.DestinationsEntry\032G\n\021De"
    "stinationsEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 "
    "\001(\0132\022.ddam.ReadableLink:\0028\001\"\310\001\n\014Readable"
    "Link\022\r\n\005ipSrc\030\001 \001(\t\022\r\n\005ipDst\030\002 \001(\t\022\031\n\005st"
    "ats\030\003 \003(\0132\n.ddam.Stat\022&\n\013description\030\004 \001"
    "(\0132\021.ddam.Description\022(\n\014mocketSensor\030\005 "
    "\001(\0132\022.ddam.MocketSensor\022-\n\ttimestamp\030\006 \001"
    "(\0132\032.google.protobuf.TimestampB%\n\020us.ihm"
    "c.aci.ddamB\014TrafficProtoP\001\240\001\001b\006proto3", 1357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  Traffic::default_instance_ = new Traffic();
  Source::default_instance_ = new Source();
  Link::default_instance_ = new Link();
  Stat::default_instance_ = new Stat();
  Description::default_instance_ = new Description();
  MocketSensor::default_instance_ = new MocketSensor();
  ReadableTraffic::default_instance_ = new ReadableTraffic();
  ReadableSource::default_instance_ = new ReadableSource();
  ReadableLink::default_instance_ = new ReadableLink();
  Traffic::default_instance_->InitAsDefaultInstance();
  Source::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  Stat::default_instance_->InitAsDefaultInstance();
  Description::default_instance_->InitAsDefaultInstance();
  MocketSensor::default_instance_->InitAsDefaultInstance();
  ReadableTraffic::default_instance_->InitAsDefaultInstance();
  ReadableSource::default_instance_->InitAsDefaultInstance();
  ReadableLink::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_2eproto {
  StaticDescriptorInitializer_traffic_2eproto() {
    protobuf_AddDesc_traffic_2eproto();
  }
} static_descriptor_initializer_traffic_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Traffic::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Traffic::Traffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Traffic)
}

void Traffic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Traffic::Traffic(const Traffic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Traffic)
}

void Traffic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sources_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sources_.SetEntryDescriptor(
      &::ddam::Traffic_SourcesEntry_descriptor_);
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:ddam.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Traffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Traffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Traffic_descriptor_;
}

const Traffic& Traffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Traffic* Traffic::default_instance_ = NULL;

Traffic* Traffic::New(::google::protobuf::Arena* arena) const {
  Traffic* n = new Traffic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Traffic::Clear() {
  sources_.Clear();
}

bool Traffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Traffic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .ddam.Source> sources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry(sources_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sources())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Traffic)
  return false;
#undef DO_
}

void Traffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Traffic)
  // map<uint32, .ddam.Source> sources = 1;
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Traffic)
}

::google::protobuf::uint8* Traffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Traffic)
  // map<uint32, .ddam.Source> sources = 1;
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Traffic)
  return target;
}

int Traffic::ByteSize() const {
  int total_size = 0;

  // map<uint32, .ddam.Source> sources = 1;
  total_size += 1 * this->sources_size();
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Traffic::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Traffic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Traffic>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sources_.MergeFrom(from.sources_);
}

void Traffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {

  return true;
}

void Traffic::Swap(Traffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Traffic::InternalSwap(Traffic* other) {
  sources_.Swap(&other->sources_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Traffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Traffic_descriptor_;
  metadata.reflection = Traffic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Traffic

// map<uint32, .ddam.Source> sources = 1;
int Traffic::sources_size() const {
  return sources_.size();
}
void Traffic::clear_sources() {
  sources_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >&
Traffic::sources() const {
  // @@protoc_insertion_point(field_map:ddam.Traffic.sources)
  return sources_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Source >*
Traffic::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Traffic.sources)
  return sources_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source::kDestinationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source::Source()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Source)
}

void Source::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Source::Source(const Source& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Source)
}

void Source::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  destinations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  destinations_.SetEntryDescriptor(
      &::ddam::Source_DestinationsEntry_descriptor_);
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:ddam.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Source_descriptor_;
}

const Source& Source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Source* Source::default_instance_ = NULL;

Source* Source::New(::google::protobuf::Arena* arena) const {
  Source* n = new Source;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Source::Clear() {
  destinations_.Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .ddam.Link> destinations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry(destinations_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_destinations())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Source)
  // map<uint32, .ddam.Link> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Source)
}

::google::protobuf::uint8* Source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Source)
  // map<uint32, .ddam.Link> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Source)
  return target;
}

int Source::ByteSize() const {
  int total_size = 0;

  // map<uint32, .ddam.Link> destinations = 1;
  total_size += 1 * this->destinations_size();
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Source* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Source>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {

  return true;
}

void Source::Swap(Source* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Source::InternalSwap(Source* other) {
  destinations_.Swap(&other->destinations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Source_descriptor_;
  metadata.reflection = Source_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Source

// map<uint32, .ddam.Link> destinations = 1;
int Source::destinations_size() const {
  return destinations_.size();
}
void Source::clear_destinations() {
  destinations_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >&
Source::destinations() const {
  // @@protoc_insertion_point(field_map:ddam.Source.destinations)
  return destinations_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Link >*
Source::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Source.destinations)
  return destinations_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kIpSrcFieldNumber;
const int Link::kIpDstFieldNumber;
const int Link::kStatsFieldNumber;
const int Link::kDescriptionFieldNumber;
const int Link::kMocketSensorFieldNumber;
const int Link::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Link)
}

void Link::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  description_ = const_cast< ::ddam::Description*>(&::ddam::Description::default_instance());
  mocketsensor_ = const_cast< ::ddam::MocketSensor*>(&::ddam::MocketSensor::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Link)
}

void Link::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ipsrc_ = 0u;
  ipdst_ = 0u;
  description_ = NULL;
  mocketsensor_ = NULL;
  timestamp_ = NULL;
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:ddam.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != default_instance_) {
    delete description_;
    delete mocketsensor_;
    delete timestamp_;
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Link*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ipsrc_, ipdst_);
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  stats_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ipSrc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipsrc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ipDst;
        break;
      }

      // optional uint32 ipDst = 2;
      case 2: {
        if (tag == 16) {
         parse_ipDst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipdst_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }

      // repeated .ddam.Stat stats = 3;
      case 3: {
        if (tag == 26) {
         parse_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional .ddam.Description description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mocketSensor;
        break;
      }

      // optional .ddam.MocketSensor mocketSensor = 5;
      case 5: {
        if (tag == 42) {
         parse_mocketSensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mocketsensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Link)
  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ipsrc(), output);
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipdst(), output);
  }

  // repeated .ddam.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->description_, output);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mocketsensor_, output);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Link)
  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ipsrc(), target);
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipdst(), target);
  }

  // repeated .ddam.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(i), target);
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->description_, target);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->mocketsensor_, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipsrc());
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipdst());
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mocketsensor_);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated .ddam.Stat stats = 3;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stats_.MergeFrom(from.stats_);
  if (from.ipsrc() != 0) {
    set_ipsrc(from.ipsrc());
  }
  if (from.ipdst() != 0) {
    set_ipdst(from.ipdst());
  }
  if (from.has_description()) {
    mutable_description()->::ddam::Description::MergeFrom(from.description());
  }
  if (from.has_mocketsensor()) {
    mutable_mocketsensor()->::ddam::MocketSensor::MergeFrom(from.mocketsensor());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  std::swap(ipsrc_, other->ipsrc_);
  std::swap(ipdst_, other->ipdst_);
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(description_, other->description_);
  std::swap(mocketsensor_, other->mocketsensor_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional uint32 ipSrc = 1;
void Link::clear_ipsrc() {
  ipsrc_ = 0u;
}
 ::google::protobuf::uint32 Link::ipsrc() const {
  // @@protoc_insertion_point(field_get:ddam.Link.ipSrc)
  return ipsrc_;
}
 void Link::set_ipsrc(::google::protobuf::uint32 value) {
  
  ipsrc_ = value;
  // @@protoc_insertion_point(field_set:ddam.Link.ipSrc)
}

// optional uint32 ipDst = 2;
void Link::clear_ipdst() {
  ipdst_ = 0u;
}
 ::google::protobuf::uint32 Link::ipdst() const {
  // @@protoc_insertion_point(field_get:ddam.Link.ipDst)
  return ipdst_;
}
 void Link::set_ipdst(::google::protobuf::uint32 value) {
  
  ipdst_ = value;
  // @@protoc_insertion_point(field_set:ddam.Link.ipDst)
}

// repeated .ddam.Stat stats = 3;
int Link::stats_size() const {
  return stats_.size();
}
void Link::clear_stats() {
  stats_.Clear();
}
const ::ddam::Stat& Link::stats(int index) const {
  // @@protoc_insertion_point(field_get:ddam.Link.stats)
  return stats_.Get(index);
}
::ddam::Stat* Link::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.Link.stats)
  return stats_.Mutable(index);
}
::ddam::Stat* Link::add_stats() {
  // @@protoc_insertion_point(field_add:ddam.Link.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
Link::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ddam.Link.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
Link::stats() const {
  // @@protoc_insertion_point(field_list:ddam.Link.stats)
  return stats_;
}

// optional .ddam.Description description = 4;
bool Link::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
void Link::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
const ::ddam::Description& Link::description() const {
  // @@protoc_insertion_point(field_get:ddam.Link.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
::ddam::Description* Link::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::ddam::Description;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.description)
  return description_;
}
::ddam::Description* Link::release_description() {
  
  ::ddam::Description* temp = description_;
  description_ = NULL;
  return temp;
}
void Link::set_allocated_description(::ddam::Description* description) {
  delete description_;
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.description)
}

// optional .ddam.MocketSensor mocketSensor = 5;
bool Link::has_mocketsensor() const {
  return !_is_default_instance_ && mocketsensor_ != NULL;
}
void Link::clear_mocketsensor() {
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
}
const ::ddam::MocketSensor& Link::mocketsensor() const {
  // @@protoc_insertion_point(field_get:ddam.Link.mocketSensor)
  return mocketsensor_ != NULL ? *mocketsensor_ : *default_instance_->mocketsensor_;
}
::ddam::MocketSensor* Link::mutable_mocketsensor() {
  
  if (mocketsensor_ == NULL) {
    mocketsensor_ = new ::ddam::MocketSensor;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.mocketSensor)
  return mocketsensor_;
}
::ddam::MocketSensor* Link::release_mocketsensor() {
  
  ::ddam::MocketSensor* temp = mocketsensor_;
  mocketsensor_ = NULL;
  return temp;
}
void Link::set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor) {
  delete mocketsensor_;
  mocketsensor_ = mocketsensor;
  if (mocketsensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.mocketSensor)
}

// optional .google.protobuf.Timestamp timestamp = 6;
bool Link::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Link::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Link::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Link.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Link::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Link::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Link::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kProtocolFieldNumber;
const int Stat::kPortFieldNumber;
const int Stat::kSentFiveSecFieldNumber;
const int Stat::kReceivedFiveSecFieldNumber;
const int Stat::kObservedFiveSecFieldNumber;
const int Stat::kSentMinuteFieldNumber;
const int Stat::kReceivedMinuteFieldNumber;
const int Stat::kObservedMinuteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Stat)
}

void Stat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Stat)
}

void Stat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  sentfivesec_ = 0u;
  receivedfivesec_ = 0u;
  observedfivesec_ = 0u;
  sentminute_ = 0u;
  receivedminute_ = 0u;
  observedminute_ = 0u;
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:ddam.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, observedminute_);
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string protocol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Stat.protocol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sentFiveSec;
        break;
      }

      // optional uint32 sentFiveSec = 3;
      case 3: {
        if (tag == 24) {
         parse_sentFiveSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentfivesec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_receivedFiveSec;
        break;
      }

      // optional uint32 receivedFiveSec = 4;
      case 4: {
        if (tag == 32) {
         parse_receivedFiveSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivedfivesec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_observedFiveSec;
        break;
      }

      // optional uint32 observedFiveSec = 5;
      case 5: {
        if (tag == 40) {
         parse_observedFiveSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observedfivesec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sentMinute;
        break;
      }

      // optional uint32 sentMinute = 6;
      case 6: {
        if (tag == 48) {
         parse_sentMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sentminute_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_receivedMinute;
        break;
      }

      // optional uint32 receivedMinute = 7;
      case 7: {
        if (tag == 56) {
         parse_receivedMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivedminute_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_observedMinute;
        break;
      }

      // optional uint32 observedMinute = 8;
      case 8: {
        if (tag == 64) {
         parse_observedMinute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observedminute_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Stat)
  // optional string protocol = 1;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Stat.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol(), output);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint32 sentFiveSec = 3;
  if (this->sentfivesec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sentfivesec(), output);
  }

  // optional uint32 receivedFiveSec = 4;
  if (this->receivedfivesec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receivedfivesec(), output);
  }

  // optional uint32 observedFiveSec = 5;
  if (this->observedfivesec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->observedfivesec(), output);
  }

  // optional uint32 sentMinute = 6;
  if (this->sentminute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sentminute(), output);
  }

  // optional uint32 receivedMinute = 7;
  if (this->receivedminute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->receivedminute(), output);
  }

  // optional uint32 observedMinute = 8;
  if (this->observedminute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->observedminute(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Stat)
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Stat)
  // optional string protocol = 1;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Stat.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol(), target);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint32 sentFiveSec = 3;
  if (this->sentfivesec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sentfivesec(), target);
  }

  // optional uint32 receivedFiveSec = 4;
  if (this->receivedfivesec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receivedfivesec(), target);
  }

  // optional uint32 observedFiveSec = 5;
  if (this->observedfivesec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->observedfivesec(), target);
  }

  // optional uint32 sentMinute = 6;
  if (this->sentminute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sentminute(), target);
  }

  // optional uint32 receivedMinute = 7;
  if (this->receivedminute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->receivedminute(), target);
  }

  // optional uint32 observedMinute = 8;
  if (this->observedminute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->observedminute(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Stat)
  return target;
}

int Stat::ByteSize() const {
  int total_size = 0;

  // optional string protocol = 1;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 sentFiveSec = 3;
  if (this->sentfivesec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentfivesec());
  }

  // optional uint32 receivedFiveSec = 4;
  if (this->receivedfivesec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receivedfivesec());
  }

  // optional uint32 observedFiveSec = 5;
  if (this->observedfivesec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->observedfivesec());
  }

  // optional uint32 sentMinute = 6;
  if (this->sentminute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sentminute());
  }

  // optional uint32 receivedMinute = 7;
  if (this->receivedminute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receivedminute());
  }

  // optional uint32 observedMinute = 8;
  if (this->observedminute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->observedminute());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.sentfivesec() != 0) {
    set_sentfivesec(from.sentfivesec());
  }
  if (from.receivedfivesec() != 0) {
    set_receivedfivesec(from.receivedfivesec());
  }
  if (from.observedfivesec() != 0) {
    set_observedfivesec(from.observedfivesec());
  }
  if (from.sentminute() != 0) {
    set_sentminute(from.sentminute());
  }
  if (from.receivedminute() != 0) {
    set_receivedminute(from.receivedminute());
  }
  if (from.observedminute() != 0) {
    set_observedminute(from.observedminute());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {

  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  protocol_.Swap(&other->protocol_);
  std::swap(port_, other->port_);
  std::swap(sentfivesec_, other->sentfivesec_);
  std::swap(receivedfivesec_, other->receivedfivesec_);
  std::swap(observedfivesec_, other->observedfivesec_);
  std::swap(sentminute_, other->sentminute_);
  std::swap(receivedminute_, other->receivedminute_);
  std::swap(observedminute_, other->observedminute_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// optional string protocol = 1;
void Stat::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Stat::protocol() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stat::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Stat.protocol)
}
 void Stat::set_protocol(const char* value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Stat.protocol)
}
 void Stat::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Stat.protocol)
}
 ::std::string* Stat::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Stat.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Stat::release_protocol() {
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Stat::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:ddam.Stat.protocol)
}

// optional uint32 port = 2;
void Stat::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 Stat::port() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.port)
  return port_;
}
 void Stat::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.port)
}

// optional uint32 sentFiveSec = 3;
void Stat::clear_sentfivesec() {
  sentfivesec_ = 0u;
}
 ::google::protobuf::uint32 Stat::sentfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.sentFiveSec)
  return sentfivesec_;
}
 void Stat::set_sentfivesec(::google::protobuf::uint32 value) {
  
  sentfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.sentFiveSec)
}

// optional uint32 receivedFiveSec = 4;
void Stat::clear_receivedfivesec() {
  receivedfivesec_ = 0u;
}
 ::google::protobuf::uint32 Stat::receivedfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.receivedFiveSec)
  return receivedfivesec_;
}
 void Stat::set_receivedfivesec(::google::protobuf::uint32 value) {
  
  receivedfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.receivedFiveSec)
}

// optional uint32 observedFiveSec = 5;
void Stat::clear_observedfivesec() {
  observedfivesec_ = 0u;
}
 ::google::protobuf::uint32 Stat::observedfivesec() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.observedFiveSec)
  return observedfivesec_;
}
 void Stat::set_observedfivesec(::google::protobuf::uint32 value) {
  
  observedfivesec_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.observedFiveSec)
}

// optional uint32 sentMinute = 6;
void Stat::clear_sentminute() {
  sentminute_ = 0u;
}
 ::google::protobuf::uint32 Stat::sentminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.sentMinute)
  return sentminute_;
}
 void Stat::set_sentminute(::google::protobuf::uint32 value) {
  
  sentminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.sentMinute)
}

// optional uint32 receivedMinute = 7;
void Stat::clear_receivedminute() {
  receivedminute_ = 0u;
}
 ::google::protobuf::uint32 Stat::receivedminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.receivedMinute)
  return receivedminute_;
}
 void Stat::set_receivedminute(::google::protobuf::uint32 value) {
  
  receivedminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.receivedMinute)
}

// optional uint32 observedMinute = 8;
void Stat::clear_observedminute() {
  observedminute_ = 0u;
}
 ::google::protobuf::uint32 Stat::observedminute() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.observedMinute)
  return observedminute_;
}
 void Stat::set_observedminute(::google::protobuf::uint32 value) {
  
  observedminute_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.observedMinute)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Description::kTypeFieldNumber;
const int Description::kConditionFieldNumber;
const int Description::kThroughputFieldNumber;
const int Description::kLatencyFieldNumber;
const int Description::kPacketLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Description::Description()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Description)
}

void Description::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Description::Description(const Description& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Description)
}

void Description::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  condition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  throughput_ = 0;
  latency_ = 0u;
  packetloss_ = 0u;
}

Description::~Description() {
  // @@protoc_insertion_point(destructor:ddam.Description)
  SharedDtor();
}

void Description::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  condition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Description::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Description::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Description_descriptor_;
}

const Description& Description::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Description* Description::default_instance_ = NULL;

Description* Description::New(::google::protobuf::Arena* arena) const {
  Description* n = new Description;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Description::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Description*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(throughput_, packetloss_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Description)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Description.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }

      // optional string condition = 2;
      case 2: {
        if (tag == 18) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Description.condition"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_throughput;
        break;
      }

      // optional double throughput = 3;
      case 3: {
        if (tag == 25) {
         parse_throughput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throughput_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latency;
        break;
      }

      // optional uint32 latency = 4;
      case 4: {
        if (tag == 32) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_packetLoss;
        break;
      }

      // optional uint32 packetLoss = 5;
      case 5: {
        if (tag == 40) {
         parse_packetLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packetloss_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Description)
  return false;
#undef DO_
}

void Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Description)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Description.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string condition = 2;
  if (this->condition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Description.condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->condition(), output);
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throughput(), output);
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latency(), output);
  }

  // optional uint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->packetloss(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Description)
}

::google::protobuf::uint8* Description::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Description)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Description.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string condition = 2;
  if (this->condition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.Description.condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->condition(), target);
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throughput(), target);
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latency(), target);
  }

  // optional uint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->packetloss(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Description)
  return target;
}

int Description::ByteSize() const {
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string condition = 2;
  if (this->condition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->condition());
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    total_size += 1 + 8;
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  // optional uint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packetloss());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Description::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Description* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Description>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Description::MergeFrom(const Description& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.condition().size() > 0) {

    condition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.condition_);
  }
  if (from.throughput() != 0) {
    set_throughput(from.throughput());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
  if (from.packetloss() != 0) {
    set_packetloss(from.packetloss());
  }
}

void Description::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Description::CopyFrom(const Description& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {

  return true;
}

void Description::Swap(Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Description::InternalSwap(Description* other) {
  type_.Swap(&other->type_);
  condition_.Swap(&other->condition_);
  std::swap(throughput_, other->throughput_);
  std::swap(latency_, other->latency_);
  std::swap(packetloss_, other->packetloss_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Description::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Description_descriptor_;
  metadata.reflection = Description_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Description

// optional string type = 1;
void Description::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Description::type() const {
  // @@protoc_insertion_point(field_get:ddam.Description.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Description::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Description.type)
}
 void Description::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Description.type)
}
 void Description::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Description.type)
}
 ::std::string* Description::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Description.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Description::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Description::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ddam.Description.type)
}

// optional string condition = 2;
void Description::clear_condition() {
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Description::condition() const {
  // @@protoc_insertion_point(field_get:ddam.Description.condition)
  return condition_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Description::set_condition(const ::std::string& value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.Description.condition)
}
 void Description::set_condition(const char* value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.Description.condition)
}
 void Description::set_condition(const char* value, size_t size) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.Description.condition)
}
 ::std::string* Description::mutable_condition() {
  
  // @@protoc_insertion_point(field_mutable:ddam.Description.condition)
  return condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Description::release_condition() {
  
  return condition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Description::set_allocated_condition(::std::string* condition) {
  if (condition != NULL) {
    
  } else {
    
  }
  condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:ddam.Description.condition)
}

// optional double throughput = 3;
void Description::clear_throughput() {
  throughput_ = 0;
}
 double Description::throughput() const {
  // @@protoc_insertion_point(field_get:ddam.Description.throughput)
  return throughput_;
}
 void Description::set_throughput(double value) {
  
  throughput_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.throughput)
}

// optional uint32 latency = 4;
void Description::clear_latency() {
  latency_ = 0u;
}
 ::google::protobuf::uint32 Description::latency() const {
  // @@protoc_insertion_point(field_get:ddam.Description.latency)
  return latency_;
}
 void Description::set_latency(::google::protobuf::uint32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.latency)
}

// optional uint32 packetLoss = 5;
void Description::clear_packetloss() {
  packetloss_ = 0u;
}
 ::google::protobuf::uint32 Description::packetloss() const {
  // @@protoc_insertion_point(field_get:ddam.Description.packetLoss)
  return packetloss_;
}
 void Description::set_packetloss(::google::protobuf::uint32 value) {
  
  packetloss_ = value;
  // @@protoc_insertion_point(field_set:ddam.Description.packetLoss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MocketSensor::kRTTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MocketSensor::MocketSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.MocketSensor)
}

void MocketSensor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MocketSensor::MocketSensor(const MocketSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.MocketSensor)
}

void MocketSensor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rtt_ = 0;
}

MocketSensor::~MocketSensor() {
  // @@protoc_insertion_point(destructor:ddam.MocketSensor)
  SharedDtor();
}

void MocketSensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MocketSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MocketSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MocketSensor_descriptor_;
}

const MocketSensor& MocketSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

MocketSensor* MocketSensor::default_instance_ = NULL;

MocketSensor* MocketSensor::New(::google::protobuf::Arena* arena) const {
  MocketSensor* n = new MocketSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MocketSensor::Clear() {
  rtt_ = 0;
}

bool MocketSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.MocketSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double RTT = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.MocketSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.MocketSensor)
  return false;
#undef DO_
}

void MocketSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.MocketSensor)
  // optional double RTT = 1;
  if (this->rtt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rtt(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.MocketSensor)
}

::google::protobuf::uint8* MocketSensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.MocketSensor)
  // optional double RTT = 1;
  if (this->rtt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rtt(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.MocketSensor)
  return target;
}

int MocketSensor::ByteSize() const {
  int total_size = 0;

  // optional double RTT = 1;
  if (this->rtt() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MocketSensor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MocketSensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MocketSensor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MocketSensor::MergeFrom(const MocketSensor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.rtt() != 0) {
    set_rtt(from.rtt());
  }
}

void MocketSensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MocketSensor::CopyFrom(const MocketSensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocketSensor::IsInitialized() const {

  return true;
}

void MocketSensor::Swap(MocketSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MocketSensor::InternalSwap(MocketSensor* other) {
  std::swap(rtt_, other->rtt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MocketSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MocketSensor_descriptor_;
  metadata.reflection = MocketSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MocketSensor

// optional double RTT = 1;
void MocketSensor::clear_rtt() {
  rtt_ = 0;
}
 double MocketSensor::rtt() const {
  // @@protoc_insertion_point(field_get:ddam.MocketSensor.RTT)
  return rtt_;
}
 void MocketSensor::set_rtt(double value) {
  
  rtt_ = value;
  // @@protoc_insertion_point(field_set:ddam.MocketSensor.RTT)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadableTraffic::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadableTraffic::ReadableTraffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.ReadableTraffic)
}

void ReadableTraffic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadableTraffic::ReadableTraffic(const ReadableTraffic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.ReadableTraffic)
}

void ReadableTraffic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sources_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sources_.SetEntryDescriptor(
      &::ddam::ReadableTraffic_SourcesEntry_descriptor_);
}

ReadableTraffic::~ReadableTraffic() {
  // @@protoc_insertion_point(destructor:ddam.ReadableTraffic)
  SharedDtor();
}

void ReadableTraffic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadableTraffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadableTraffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadableTraffic_descriptor_;
}

const ReadableTraffic& ReadableTraffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

ReadableTraffic* ReadableTraffic::default_instance_ = NULL;

ReadableTraffic* ReadableTraffic::New(::google::protobuf::Arena* arena) const {
  ReadableTraffic* n = new ReadableTraffic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadableTraffic::Clear() {
  sources_.Clear();
}

bool ReadableTraffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.ReadableTraffic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ddam.ReadableSource> sources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          ::google::protobuf::scoped_ptr<ReadableTraffic_SourcesEntry> entry(sources_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sources())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableTraffic.SourcesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.ReadableTraffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.ReadableTraffic)
  return false;
#undef DO_
}

void ReadableTraffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.ReadableTraffic)
  // map<string, .ddam.ReadableSource> sources = 1;
  {
    ::google::protobuf::scoped_ptr<ReadableTraffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableTraffic.SourcesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.ReadableTraffic)
}

::google::protobuf::uint8* ReadableTraffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.ReadableTraffic)
  // map<string, .ddam.ReadableSource> sources = 1;
  {
    ::google::protobuf::scoped_ptr<ReadableTraffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableTraffic.SourcesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.ReadableTraffic)
  return target;
}

int ReadableTraffic::ByteSize() const {
  int total_size = 0;

  // map<string, .ddam.ReadableSource> sources = 1;
  total_size += 1 * this->sources_size();
  {
    ::google::protobuf::scoped_ptr<ReadableTraffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadableTraffic::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadableTraffic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadableTraffic>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadableTraffic::MergeFrom(const ReadableTraffic& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sources_.MergeFrom(from.sources_);
}

void ReadableTraffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadableTraffic::CopyFrom(const ReadableTraffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadableTraffic::IsInitialized() const {

  return true;
}

void ReadableTraffic::Swap(ReadableTraffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadableTraffic::InternalSwap(ReadableTraffic* other) {
  sources_.Swap(&other->sources_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadableTraffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadableTraffic_descriptor_;
  metadata.reflection = ReadableTraffic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadableTraffic

// map<string, .ddam.ReadableSource> sources = 1;
int ReadableTraffic::sources_size() const {
  return sources_.size();
}
void ReadableTraffic::clear_sources() {
  sources_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >&
ReadableTraffic::sources() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableTraffic.sources)
  return sources_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::ReadableSource >*
ReadableTraffic::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableTraffic.sources)
  return sources_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadableSource::kDestinationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadableSource::ReadableSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.ReadableSource)
}

void ReadableSource::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReadableSource::ReadableSource(const ReadableSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.ReadableSource)
}

void ReadableSource::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  destinations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  destinations_.SetEntryDescriptor(
      &::ddam::ReadableSource_DestinationsEntry_descriptor_);
}

ReadableSource::~ReadableSource() {
  // @@protoc_insertion_point(destructor:ddam.ReadableSource)
  SharedDtor();
}

void ReadableSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadableSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadableSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadableSource_descriptor_;
}

const ReadableSource& ReadableSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

ReadableSource* ReadableSource::default_instance_ = NULL;

ReadableSource* ReadableSource::New(::google::protobuf::Arena* arena) const {
  ReadableSource* n = new ReadableSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadableSource::Clear() {
  destinations_.Clear();
}

bool ReadableSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.ReadableSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ddam.ReadableLink> destinations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          ::google::protobuf::scoped_ptr<ReadableSource_DestinationsEntry> entry(destinations_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_destinations())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableSource.DestinationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.ReadableSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.ReadableSource)
  return false;
#undef DO_
}

void ReadableSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.ReadableSource)
  // map<string, .ddam.ReadableLink> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<ReadableSource_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableSource.DestinationsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.ReadableSource)
}

::google::protobuf::uint8* ReadableSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.ReadableSource)
  // map<string, .ddam.ReadableLink> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<ReadableSource_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.ReadableSource.DestinationsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.ReadableSource)
  return target;
}

int ReadableSource::ByteSize() const {
  int total_size = 0;

  // map<string, .ddam.ReadableLink> destinations = 1;
  total_size += 1 * this->destinations_size();
  {
    ::google::protobuf::scoped_ptr<ReadableSource_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadableSource::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadableSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadableSource>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadableSource::MergeFrom(const ReadableSource& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
}

void ReadableSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadableSource::CopyFrom(const ReadableSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadableSource::IsInitialized() const {

  return true;
}

void ReadableSource::Swap(ReadableSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadableSource::InternalSwap(ReadableSource* other) {
  destinations_.Swap(&other->destinations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadableSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadableSource_descriptor_;
  metadata.reflection = ReadableSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadableSource

// map<string, .ddam.ReadableLink> destinations = 1;
int ReadableSource::destinations_size() const {
  return destinations_.size();
}
void ReadableSource::clear_destinations() {
  destinations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >&
ReadableSource::destinations() const {
  // @@protoc_insertion_point(field_map:ddam.ReadableSource.destinations)
  return destinations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::ReadableLink >*
ReadableSource::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_map:ddam.ReadableSource.destinations)
  return destinations_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadableLink::kIpSrcFieldNumber;
const int ReadableLink::kIpDstFieldNumber;
const int ReadableLink::kStatsFieldNumber;
const int ReadableLink::kDescriptionFieldNumber;
const int ReadableLink::kMocketSensorFieldNumber;
const int ReadableLink::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadableLink::ReadableLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.ReadableLink)
}

void ReadableLink::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  description_ = const_cast< ::ddam::Description*>(&::ddam::Description::default_instance());
  mocketsensor_ = const_cast< ::ddam::MocketSensor*>(&::ddam::MocketSensor::default_instance());
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

ReadableLink::ReadableLink(const ReadableLink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.ReadableLink)
}

void ReadableLink::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipsrc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipdst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = NULL;
  mocketsensor_ = NULL;
  timestamp_ = NULL;
}

ReadableLink::~ReadableLink() {
  // @@protoc_insertion_point(destructor:ddam.ReadableLink)
  SharedDtor();
}

void ReadableLink::SharedDtor() {
  ipsrc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipdst_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete description_;
    delete mocketsensor_;
    delete timestamp_;
  }
}

void ReadableLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadableLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadableLink_descriptor_;
}

const ReadableLink& ReadableLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

ReadableLink* ReadableLink::default_instance_ = NULL;

ReadableLink* ReadableLink::New(::google::protobuf::Arena* arena) const {
  ReadableLink* n = new ReadableLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadableLink::Clear() {
  ipsrc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipdst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  stats_.Clear();
}

bool ReadableLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.ReadableLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ipSrc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipsrc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipsrc().data(), this->ipsrc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableLink.ipSrc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ipDst;
        break;
      }

      // optional string ipDst = 2;
      case 2: {
        if (tag == 18) {
         parse_ipDst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipdst()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipdst().data(), this->ipdst().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.ReadableLink.ipDst"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }

      // repeated .ddam.Stat stats = 3;
      case 3: {
        if (tag == 26) {
         parse_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional .ddam.Description description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mocketSensor;
        break;
      }

      // optional .ddam.MocketSensor mocketSensor = 5;
      case 5: {
        if (tag == 42) {
         parse_mocketSensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mocketsensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.ReadableLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.ReadableLink)
  return false;
#undef DO_
}

void ReadableLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.ReadableLink)
  // optional string ipSrc = 1;
  if (this->ipsrc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipsrc().data(), this->ipsrc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableLink.ipSrc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipsrc(), output);
  }

  // optional string ipDst = 2;
  if (this->ipdst().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipdst().data(), this->ipdst().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableLink.ipDst");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipdst(), output);
  }

  // repeated .ddam.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->description_, output);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mocketsensor_, output);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.ReadableLink)
}

::google::protobuf::uint8* ReadableLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.ReadableLink)
  // optional string ipSrc = 1;
  if (this->ipsrc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipsrc().data(), this->ipsrc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableLink.ipSrc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipsrc(), target);
  }

  // optional string ipDst = 2;
  if (this->ipdst().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipdst().data(), this->ipdst().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.ReadableLink.ipDst");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ipdst(), target);
  }

  // repeated .ddam.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stats(i), target);
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->description_, target);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->mocketsensor_, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.ReadableLink)
  return target;
}

int ReadableLink::ByteSize() const {
  int total_size = 0;

  // optional string ipSrc = 1;
  if (this->ipsrc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipsrc());
  }

  // optional string ipDst = 2;
  if (this->ipdst().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipdst());
  }

  // optional .ddam.Description description = 4;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  // optional .ddam.MocketSensor mocketSensor = 5;
  if (this->has_mocketsensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mocketsensor_);
  }

  // optional .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // repeated .ddam.Stat stats = 3;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadableLink::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadableLink* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadableLink>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadableLink::MergeFrom(const ReadableLink& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stats_.MergeFrom(from.stats_);
  if (from.ipsrc().size() > 0) {

    ipsrc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipsrc_);
  }
  if (from.ipdst().size() > 0) {

    ipdst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipdst_);
  }
  if (from.has_description()) {
    mutable_description()->::ddam::Description::MergeFrom(from.description());
  }
  if (from.has_mocketsensor()) {
    mutable_mocketsensor()->::ddam::MocketSensor::MergeFrom(from.mocketsensor());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void ReadableLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadableLink::CopyFrom(const ReadableLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadableLink::IsInitialized() const {

  return true;
}

void ReadableLink::Swap(ReadableLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadableLink::InternalSwap(ReadableLink* other) {
  ipsrc_.Swap(&other->ipsrc_);
  ipdst_.Swap(&other->ipdst_);
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(description_, other->description_);
  std::swap(mocketsensor_, other->mocketsensor_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadableLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadableLink_descriptor_;
  metadata.reflection = ReadableLink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadableLink

// optional string ipSrc = 1;
void ReadableLink::clear_ipsrc() {
  ipsrc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadableLink::ipsrc() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.ipSrc)
  return ipsrc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableLink::set_ipsrc(const ::std::string& value) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableLink.ipSrc)
}
 void ReadableLink::set_ipsrc(const char* value) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableLink.ipSrc)
}
 void ReadableLink::set_ipsrc(const char* value, size_t size) {
  
  ipsrc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableLink.ipSrc)
}
 ::std::string* ReadableLink::mutable_ipsrc() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.ipSrc)
  return ipsrc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadableLink::release_ipsrc() {
  
  return ipsrc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableLink::set_allocated_ipsrc(::std::string* ipsrc) {
  if (ipsrc != NULL) {
    
  } else {
    
  }
  ipsrc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipsrc);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.ipSrc)
}

// optional string ipDst = 2;
void ReadableLink::clear_ipdst() {
  ipdst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReadableLink::ipdst() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.ipDst)
  return ipdst_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableLink::set_ipdst(const ::std::string& value) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.ReadableLink.ipDst)
}
 void ReadableLink::set_ipdst(const char* value) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.ReadableLink.ipDst)
}
 void ReadableLink::set_ipdst(const char* value, size_t size) {
  
  ipdst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.ReadableLink.ipDst)
}
 ::std::string* ReadableLink::mutable_ipdst() {
  
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.ipDst)
  return ipdst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReadableLink::release_ipdst() {
  
  return ipdst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReadableLink::set_allocated_ipdst(::std::string* ipdst) {
  if (ipdst != NULL) {
    
  } else {
    
  }
  ipdst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipdst);
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.ipDst)
}

// repeated .ddam.Stat stats = 3;
int ReadableLink::stats_size() const {
  return stats_.size();
}
void ReadableLink::clear_stats() {
  stats_.Clear();
}
const ::ddam::Stat& ReadableLink::stats(int index) const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.stats)
  return stats_.Get(index);
}
::ddam::Stat* ReadableLink::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.stats)
  return stats_.Mutable(index);
}
::ddam::Stat* ReadableLink::add_stats() {
  // @@protoc_insertion_point(field_add:ddam.ReadableLink.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::ddam::Stat >*
ReadableLink::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:ddam.ReadableLink.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::ddam::Stat >&
ReadableLink::stats() const {
  // @@protoc_insertion_point(field_list:ddam.ReadableLink.stats)
  return stats_;
}

// optional .ddam.Description description = 4;
bool ReadableLink::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
void ReadableLink::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
const ::ddam::Description& ReadableLink::description() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
::ddam::Description* ReadableLink::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::ddam::Description;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.description)
  return description_;
}
::ddam::Description* ReadableLink::release_description() {
  
  ::ddam::Description* temp = description_;
  description_ = NULL;
  return temp;
}
void ReadableLink::set_allocated_description(::ddam::Description* description) {
  delete description_;
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.description)
}

// optional .ddam.MocketSensor mocketSensor = 5;
bool ReadableLink::has_mocketsensor() const {
  return !_is_default_instance_ && mocketsensor_ != NULL;
}
void ReadableLink::clear_mocketsensor() {
  if (GetArenaNoVirtual() == NULL && mocketsensor_ != NULL) delete mocketsensor_;
  mocketsensor_ = NULL;
}
const ::ddam::MocketSensor& ReadableLink::mocketsensor() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.mocketSensor)
  return mocketsensor_ != NULL ? *mocketsensor_ : *default_instance_->mocketsensor_;
}
::ddam::MocketSensor* ReadableLink::mutable_mocketsensor() {
  
  if (mocketsensor_ == NULL) {
    mocketsensor_ = new ::ddam::MocketSensor;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.mocketSensor)
  return mocketsensor_;
}
::ddam::MocketSensor* ReadableLink::release_mocketsensor() {
  
  ::ddam::MocketSensor* temp = mocketsensor_;
  mocketsensor_ = NULL;
  return temp;
}
void ReadableLink::set_allocated_mocketsensor(::ddam::MocketSensor* mocketsensor) {
  delete mocketsensor_;
  mocketsensor_ = mocketsensor;
  if (mocketsensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.mocketSensor)
}

// optional .google.protobuf.Timestamp timestamp = 6;
bool ReadableLink::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void ReadableLink::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ReadableLink::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.ReadableLink.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* ReadableLink::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.ReadableLink.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* ReadableLink::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ReadableLink::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.ReadableLink.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
