// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {

namespace {

const ::google::protobuf::Descriptor* TrafficByInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficByInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* Microflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Microflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Average_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Average_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_traffic_2eproto() {
  protobuf_AddDesc_traffic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic.proto");
  GOOGLE_CHECK(file != NULL);
  TrafficByInterface_descriptor_ = file->message_type(0);
  static const int TrafficByInterface_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, monitoringinterface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, microflows_),
  };
  TrafficByInterface_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficByInterface_descriptor_,
      TrafficByInterface::internal_default_instance(),
      TrafficByInterface_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrafficByInterface),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, _internal_metadata_));
  Microflow_descriptor_ = file->message_type(1);
  static const int Microflow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, ipsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, ipdst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, latency_),
  };
  Microflow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Microflow_descriptor_,
      Microflow::internal_default_instance(),
      Microflow_offsets_,
      -1,
      -1,
      -1,
      sizeof(Microflow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, _internal_metadata_));
  Stat_descriptor_ = file->message_type(2);
  static const int Stat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, stattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, srcport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, dstport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, averages_),
  };
  Stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stat_descriptor_,
      Stat::internal_default_instance(),
      Stat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_));
  Average_descriptor_ = file->message_type(3);
  static const int Average_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, observed_),
  };
  Average_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Average_descriptor_,
      Average::internal_default_instance(),
      Average_offsets_,
      -1,
      -1,
      -1,
      sizeof(Average),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficByInterface_descriptor_, TrafficByInterface::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Microflow_descriptor_, Microflow::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stat_descriptor_, Stat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Average_descriptor_, Average::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_2eproto() {
  TrafficByInterface_default_instance_.Shutdown();
  delete TrafficByInterface_reflection_;
  Microflow_default_instance_.Shutdown();
  delete Microflow_reflection_;
  Stat_default_instance_.Shutdown();
  delete Stat_reflection_;
  Average_default_instance_.Shutdown();
  delete Average_reflection_;
}

void protobuf_InitDefaults_traffic_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::netsensor::protobuf_InitDefaults_prefix_2eproto();
  ::netsensor::protobuf_InitDefaults_datatype_2eproto();
  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TrafficByInterface_default_instance_.DefaultConstruct();
  Microflow_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Stat_default_instance_.DefaultConstruct();
  Average_default_instance_.DefaultConstruct();
  TrafficByInterface_default_instance_.get_mutable()->InitAsDefaultInstance();
  Microflow_default_instance_.get_mutable()->InitAsDefaultInstance();
  Stat_default_instance_.get_mutable()->InitAsDefaultInstance();
  Average_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_traffic_2eproto_once_);
void protobuf_InitDefaults_traffic_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_traffic_2eproto_once_,
                 &protobuf_InitDefaults_traffic_2eproto_impl);
}
void protobuf_AddDesc_traffic_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_traffic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtraffic.proto\022\tnetsensor\032\014prefix.proto"
    "\032\016datatype.proto\032\037google/protobuf/timest"
    "amp.proto\"[\n\022TrafficByInterface\022\033\n\023monit"
    "oringInterface\030\001 \001(\t\022(\n\nmicroflows\030\002 \003(\013"
    "2\024.netsensor.Microflow\"Z\n\tMicroflow\022\r\n\005i"
    "pSrc\030\001 \001(\r\022\r\n\005ipDst\030\002 \001(\r\022\036\n\005stats\030\003 \003(\013"
    "2\017.netsensor.Stat\022\017\n\007latency\030\004 \001(\r\"\207\001\n\004S"
    "tat\022%\n\010statType\030\001 \001(\0162\023.netsensor.StatTy"
    "pe\022\020\n\010protocol\030\002 \001(\t\022\017\n\007srcPort\030\003 \001(\r\022\017\n"
    "\007dstPort\030\004 \001(\r\022$\n\010averages\030\005 \003(\0132\022.netse"
    "nsor.Average\"r\n\007Average\022\022\n\nresolution\030\001 "
    "\001(\r\022!\n\006prefix\030\002 \001(\0162\021.netsensor.Prefix\022\014"
    "\n\004sent\030\003 \001(\r\022\020\n\010received\030\004 \001(\r\022\020\n\010observ"
    "ed\030\005 \001(\rB>\n\036us.ihmc.ddam.sensors.netsens"
    "orB\014TrafficProtoP\001Z\tnetsensor\240\001\001b\006proto3", 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  ::netsensor::protobuf_AddDesc_prefix_2eproto();
  ::netsensor::protobuf_AddDesc_datatype_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_traffic_2eproto_once_);
void protobuf_AddDesc_traffic_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_traffic_2eproto_once_,
                 &protobuf_AddDesc_traffic_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_2eproto {
  StaticDescriptorInitializer_traffic_2eproto() {
    protobuf_AddDesc_traffic_2eproto();
  }
} static_descriptor_initializer_traffic_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficByInterface::kMonitoringInterfaceFieldNumber;
const int TrafficByInterface::kMicroflowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficByInterface::TrafficByInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_traffic_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.TrafficByInterface)
}

void TrafficByInterface::InitAsDefaultInstance() {
}

TrafficByInterface::TrafficByInterface(const TrafficByInterface& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.TrafficByInterface)
}

void TrafficByInterface::SharedCtor() {
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TrafficByInterface::~TrafficByInterface() {
  // @@protoc_insertion_point(destructor:netsensor.TrafficByInterface)
  SharedDtor();
}

void TrafficByInterface::SharedDtor() {
  monitoringinterface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficByInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficByInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficByInterface_descriptor_;
}

const TrafficByInterface& TrafficByInterface::default_instance() {
  protobuf_InitDefaults_traffic_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrafficByInterface> TrafficByInterface_default_instance_;

TrafficByInterface* TrafficByInterface::New(::google::protobuf::Arena* arena) const {
  TrafficByInterface* n = new TrafficByInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficByInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.TrafficByInterface)
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  microflows_.Clear();
}

bool TrafficByInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.TrafficByInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string monitoringInterface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoringinterface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoringinterface().data(), this->monitoringinterface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.TrafficByInterface.monitoringInterface"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_microflows;
        break;
      }

      // repeated .netsensor.Microflow microflows = 2;
      case 2: {
        if (tag == 18) {
         parse_microflows:
          DO_(input->IncrementRecursionDepth());
         parse_loop_microflows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_microflows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_microflows;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.TrafficByInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.TrafficByInterface)
  return false;
#undef DO_
}

void TrafficByInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.TrafficByInterface)
  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->monitoringinterface(), output);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0, n = this->microflows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->microflows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.TrafficByInterface)
}

::google::protobuf::uint8* TrafficByInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.TrafficByInterface)
  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoringinterface(), target);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0, n = this->microflows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->microflows(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.TrafficByInterface)
  return target;
}

size_t TrafficByInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.TrafficByInterface)
  size_t total_size = 0;

  // optional string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoringinterface());
  }

  // repeated .netsensor.Microflow microflows = 2;
  {
    unsigned int count = this->microflows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->microflows(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficByInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.TrafficByInterface)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrafficByInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficByInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.TrafficByInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.TrafficByInterface)
    UnsafeMergeFrom(*source);
  }
}

void TrafficByInterface::MergeFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.TrafficByInterface)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrafficByInterface::UnsafeMergeFrom(const TrafficByInterface& from) {
  GOOGLE_DCHECK(&from != this);
  microflows_.MergeFrom(from.microflows_);
  if (from.monitoringinterface().size() > 0) {

    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
}

void TrafficByInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficByInterface::CopyFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrafficByInterface::IsInitialized() const {

  return true;
}

void TrafficByInterface::Swap(TrafficByInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficByInterface::InternalSwap(TrafficByInterface* other) {
  monitoringinterface_.Swap(&other->monitoringinterface_);
  microflows_.UnsafeArenaSwap(&other->microflows_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficByInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficByInterface_descriptor_;
  metadata.reflection = TrafficByInterface_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficByInterface

// optional string monitoringInterface = 1;
void TrafficByInterface::clear_monitoringinterface() {
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrafficByInterface::monitoringinterface() const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficByInterface::set_monitoringinterface(const ::std::string& value) {

  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.TrafficByInterface.monitoringInterface)
}
void TrafficByInterface::set_monitoringinterface(const char* value) {

  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.TrafficByInterface.monitoringInterface)
}
void TrafficByInterface::set_monitoringinterface(const char* value, size_t size) {

  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.TrafficByInterface.monitoringInterface)
}
::std::string* TrafficByInterface::mutable_monitoringinterface() {

  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficByInterface::release_monitoringinterface() {
  // @@protoc_insertion_point(field_release:netsensor.TrafficByInterface.monitoringInterface)

  return monitoringinterface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficByInterface::set_allocated_monitoringinterface(::std::string* monitoringinterface) {
  if (monitoringinterface != NULL) {

  } else {

  }
  monitoringinterface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoringinterface);
  // @@protoc_insertion_point(field_set_allocated:netsensor.TrafficByInterface.monitoringInterface)
}

// repeated .netsensor.Microflow microflows = 2;
int TrafficByInterface::microflows_size() const {
  return microflows_.size();
}
void TrafficByInterface::clear_microflows() {
  microflows_.Clear();
}
const ::netsensor::Microflow& TrafficByInterface::microflows(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.microflows)
  return microflows_.Get(index);
}
::netsensor::Microflow* TrafficByInterface::mutable_microflows(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.microflows)
  return microflows_.Mutable(index);
}
::netsensor::Microflow* TrafficByInterface::add_microflows() {
  // @@protoc_insertion_point(field_add:netsensor.TrafficByInterface.microflows)
  return microflows_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >*
TrafficByInterface::mutable_microflows() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.TrafficByInterface.microflows)
  return &microflows_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >&
TrafficByInterface::microflows() const {
  // @@protoc_insertion_point(field_list:netsensor.TrafficByInterface.microflows)
  return microflows_;
}

inline const TrafficByInterface* TrafficByInterface::internal_default_instance() {
  return &TrafficByInterface_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Microflow::kIpSrcFieldNumber;
const int Microflow::kIpDstFieldNumber;
const int Microflow::kStatsFieldNumber;
const int Microflow::kLatencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Microflow::Microflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_traffic_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Microflow)
}

void Microflow::InitAsDefaultInstance() {
}

Microflow::Microflow(const Microflow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.Microflow)
}

void Microflow::SharedCtor() {
  ::memset(&ipsrc_, 0, reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&ipsrc_) + sizeof(latency_));
  _cached_size_ = 0;
}

Microflow::~Microflow() {
  // @@protoc_insertion_point(destructor:netsensor.Microflow)
  SharedDtor();
}

void Microflow::SharedDtor() {
}

void Microflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Microflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Microflow_descriptor_;
}

const Microflow& Microflow::default_instance() {
  protobuf_InitDefaults_traffic_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Microflow> Microflow_default_instance_;

Microflow* Microflow::New(::google::protobuf::Arena* arena) const {
  Microflow* n = new Microflow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Microflow::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Microflow)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Microflow, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Microflow*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ipsrc_, latency_);

#undef ZR_HELPER_
#undef ZR_

  stats_.Clear();
}

bool Microflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Microflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ipSrc = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipsrc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ipDst;
        break;
      }

      // optional uint32 ipDst = 2;
      case 2: {
        if (tag == 16) {
         parse_ipDst:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipdst_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }

      // repeated .netsensor.Stat stats = 3;
      case 3: {
        if (tag == 26) {
         parse_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_latency;
        break;
      }

      // optional uint32 latency = 4;
      case 4: {
        if (tag == 32) {
         parse_latency:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Microflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Microflow)
  return false;
#undef DO_
}

void Microflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Microflow)
  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ipsrc(), output);
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipdst(), output);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latency(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Microflow)
}

::google::protobuf::uint8* Microflow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Microflow)
  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ipsrc(), target);
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipdst(), target);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stats(i), false, target);
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Microflow)
  return target;
}

size_t Microflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Microflow)
  size_t total_size = 0;

  // optional uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipsrc());
  }

  // optional uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipdst());
  }

  // optional uint32 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  // repeated .netsensor.Stat stats = 3;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Microflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Microflow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Microflow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Microflow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Microflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Microflow)
    UnsafeMergeFrom(*source);
  }
}

void Microflow::MergeFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Microflow)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Microflow::UnsafeMergeFrom(const Microflow& from) {
  GOOGLE_DCHECK(&from != this);
  stats_.MergeFrom(from.stats_);
  if (from.ipsrc() != 0) {
    set_ipsrc(from.ipsrc());
  }
  if (from.ipdst() != 0) {
    set_ipdst(from.ipdst());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
}

void Microflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Microflow::CopyFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Microflow::IsInitialized() const {

  return true;
}

void Microflow::Swap(Microflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Microflow::InternalSwap(Microflow* other) {
  std::swap(ipsrc_, other->ipsrc_);
  std::swap(ipdst_, other->ipdst_);
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(latency_, other->latency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Microflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Microflow_descriptor_;
  metadata.reflection = Microflow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Microflow

// optional uint32 ipSrc = 1;
void Microflow::clear_ipsrc() {
  ipsrc_ = 0u;
}
::google::protobuf::uint32 Microflow::ipsrc() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipSrc)
  return ipsrc_;
}
void Microflow::set_ipsrc(::google::protobuf::uint32 value) {

  ipsrc_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipSrc)
}

// optional uint32 ipDst = 2;
void Microflow::clear_ipdst() {
  ipdst_ = 0u;
}
::google::protobuf::uint32 Microflow::ipdst() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipDst)
  return ipdst_;
}
void Microflow::set_ipdst(::google::protobuf::uint32 value) {

  ipdst_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipDst)
}

// repeated .netsensor.Stat stats = 3;
int Microflow::stats_size() const {
  return stats_.size();
}
void Microflow::clear_stats() {
  stats_.Clear();
}
const ::netsensor::Stat& Microflow::stats(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.stats)
  return stats_.Get(index);
}
::netsensor::Stat* Microflow::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Microflow.stats)
  return stats_.Mutable(index);
}
::netsensor::Stat* Microflow::add_stats() {
  // @@protoc_insertion_point(field_add:netsensor.Microflow.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Stat >*
Microflow::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Microflow.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >&
Microflow::stats() const {
  // @@protoc_insertion_point(field_list:netsensor.Microflow.stats)
  return stats_;
}

// optional uint32 latency = 4;
void Microflow::clear_latency() {
  latency_ = 0u;
}
::google::protobuf::uint32 Microflow::latency() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.latency)
  return latency_;
}
void Microflow::set_latency(::google::protobuf::uint32 value) {

  latency_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.latency)
}

inline const Microflow* Microflow::internal_default_instance() {
  return &Microflow_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kStatTypeFieldNumber;
const int Stat::kProtocolFieldNumber;
const int Stat::kSrcPortFieldNumber;
const int Stat::kDstPortFieldNumber;
const int Stat::kAveragesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_traffic_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Stat)
}

void Stat::InitAsDefaultInstance() {
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.Stat)
}

void Stat::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stattype_, 0, reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&stattype_) + sizeof(dstport_));
  _cached_size_ = 0;
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:netsensor.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  protobuf_InitDefaults_traffic_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Stat> Stat_default_instance_;

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Stat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Stat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(stattype_, dstport_);
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  averages_.Clear();
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .netsensor.StatType statType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stattype(static_cast< ::netsensor::StatType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_protocol;
        break;
      }

      // optional string protocol = 2;
      case 2: {
        if (tag == 18) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.Stat.protocol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcPort;
        break;
      }

      // optional uint32 srcPort = 3;
      case 3: {
        if (tag == 24) {
         parse_srcPort:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dstPort;
        break;
      }

      // optional uint32 dstPort = 4;
      case 4: {
        if (tag == 32) {
         parse_dstPort:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_averages;
        break;
      }

      // repeated .netsensor.Average averages = 5;
      case 5: {
        if (tag == 42) {
         parse_averages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_averages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_averages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_averages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Stat)
  // optional .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stattype(), output);
  }

  // optional string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // optional uint32 srcPort = 3;
  if (this->srcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcport(), output);
  }

  // optional uint32 dstPort = 4;
  if (this->dstport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstport(), output);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0, n = this->averages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->averages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Stat)
}

::google::protobuf::uint8* Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Stat)
  // optional .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stattype(), target);
  }

  // optional string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // optional uint32 srcPort = 3;
  if (this->srcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcport(), target);
  }

  // optional uint32 dstPort = 4;
  if (this->dstport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstport(), target);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0, n = this->averages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->averages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Stat)
  size_t total_size = 0;

  // optional .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stattype());
  }

  // optional string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // optional uint32 srcPort = 3;
  if (this->srcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcport());
  }

  // optional uint32 dstPort = 4;
  if (this->dstport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstport());
  }

  // repeated .netsensor.Average averages = 5;
  {
    unsigned int count = this->averages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->averages(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Stat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Stat)
    UnsafeMergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Stat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Stat::UnsafeMergeFrom(const Stat& from) {
  GOOGLE_DCHECK(&from != this);
  averages_.MergeFrom(from.averages_);
  if (from.stattype() != 0) {
    set_stattype(from.stattype());
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.srcport() != 0) {
    set_srcport(from.srcport());
  }
  if (from.dstport() != 0) {
    set_dstport(from.dstport());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Stat::IsInitialized() const {

  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  std::swap(stattype_, other->stattype_);
  protocol_.Swap(&other->protocol_);
  std::swap(srcport_, other->srcport_);
  std::swap(dstport_, other->dstport_);
  averages_.UnsafeArenaSwap(&other->averages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// optional .netsensor.StatType statType = 1;
void Stat::clear_stattype() {
  stattype_ = 0;
}
::netsensor::StatType Stat::stattype() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.statType)
  return static_cast< ::netsensor::StatType >(stattype_);
}
void Stat::set_stattype(::netsensor::StatType value) {

  stattype_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.statType)
}

// optional string protocol = 2;
void Stat::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Stat::protocol() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stat::set_protocol(const ::std::string& value) {

  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.Stat.protocol)
}
void Stat::set_protocol(const char* value) {

  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.Stat.protocol)
}
void Stat::set_protocol(const char* value, size_t size) {

  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.Stat.protocol)
}
::std::string* Stat::mutable_protocol() {

  // @@protoc_insertion_point(field_mutable:netsensor.Stat.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stat::release_protocol() {
  // @@protoc_insertion_point(field_release:netsensor.Stat.protocol)

  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stat::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {

  } else {

  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:netsensor.Stat.protocol)
}

// optional uint32 srcPort = 3;
void Stat::clear_srcport() {
  srcport_ = 0u;
}
::google::protobuf::uint32 Stat::srcport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.srcPort)
  return srcport_;
}
void Stat::set_srcport(::google::protobuf::uint32 value) {

  srcport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.srcPort)
}

// optional uint32 dstPort = 4;
void Stat::clear_dstport() {
  dstport_ = 0u;
}
::google::protobuf::uint32 Stat::dstport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.dstPort)
  return dstport_;
}
void Stat::set_dstport(::google::protobuf::uint32 value) {

  dstport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.dstPort)
}

// repeated .netsensor.Average averages = 5;
int Stat::averages_size() const {
  return averages_.size();
}
void Stat::clear_averages() {
  averages_.Clear();
}
const ::netsensor::Average& Stat::averages(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.averages)
  return averages_.Get(index);
}
::netsensor::Average* Stat::mutable_averages(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Stat.averages)
  return averages_.Mutable(index);
}
::netsensor::Average* Stat::add_averages() {
  // @@protoc_insertion_point(field_add:netsensor.Stat.averages)
  return averages_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Average >*
Stat::mutable_averages() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Stat.averages)
  return &averages_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Average >&
Stat::averages() const {
  // @@protoc_insertion_point(field_list:netsensor.Stat.averages)
  return averages_;
}

inline const Stat* Stat::internal_default_instance() {
  return &Stat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Average::kResolutionFieldNumber;
const int Average::kPrefixFieldNumber;
const int Average::kSentFieldNumber;
const int Average::kReceivedFieldNumber;
const int Average::kObservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Average::Average()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_traffic_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Average)
}

void Average::InitAsDefaultInstance() {
}

Average::Average(const Average& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:netsensor.Average)
}

void Average::SharedCtor() {
  ::memset(&resolution_, 0, reinterpret_cast<char*>(&observed_) -
    reinterpret_cast<char*>(&resolution_) + sizeof(observed_));
  _cached_size_ = 0;
}

Average::~Average() {
  // @@protoc_insertion_point(destructor:netsensor.Average)
  SharedDtor();
}

void Average::SharedDtor() {
}

void Average::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Average::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Average_descriptor_;
}

const Average& Average::default_instance() {
  protobuf_InitDefaults_traffic_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Average> Average_default_instance_;

Average* Average::New(::google::protobuf::Arena* arena) const {
  Average* n = new Average;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Average::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Average)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Average, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Average*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resolution_, observed_);

#undef ZR_HELPER_
#undef ZR_

}

bool Average::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Average)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resolution = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prefix;
        break;
      }

      // optional .netsensor.Prefix prefix = 2;
      case 2: {
        if (tag == 16) {
         parse_prefix:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_prefix(static_cast< ::netsensor::Prefix >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sent;
        break;
      }

      // optional uint32 sent = 3;
      case 3: {
        if (tag == 24) {
         parse_sent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_received;
        break;
      }

      // optional uint32 received = 4;
      case 4: {
        if (tag == 32) {
         parse_received:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_observed;
        break;
      }

      // optional uint32 observed = 5;
      case 5: {
        if (tag == 40) {
         parse_observed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Average)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Average)
  return false;
#undef DO_
}

void Average::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Average)
  // optional uint32 resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resolution(), output);
  }

  // optional .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prefix(), output);
  }

  // optional uint32 sent = 3;
  if (this->sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sent(), output);
  }

  // optional uint32 received = 4;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->received(), output);
  }

  // optional uint32 observed = 5;
  if (this->observed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->observed(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Average)
}

::google::protobuf::uint8* Average::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Average)
  // optional uint32 resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resolution(), target);
  }

  // optional .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prefix(), target);
  }

  // optional uint32 sent = 3;
  if (this->sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sent(), target);
  }

  // optional uint32 received = 4;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->received(), target);
  }

  // optional uint32 observed = 5;
  if (this->observed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->observed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Average)
  return target;
}

size_t Average::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Average)
  size_t total_size = 0;

  // optional uint32 resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolution());
  }

  // optional .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->prefix());
  }

  // optional uint32 sent = 3;
  if (this->sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent());
  }

  // optional uint32 received = 4;
  if (this->received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received());
  }

  // optional uint32 observed = 5;
  if (this->observed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->observed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Average::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Average)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Average* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Average>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Average)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Average)
    UnsafeMergeFrom(*source);
  }
}

void Average::MergeFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Average)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Average::UnsafeMergeFrom(const Average& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
  if (from.sent() != 0) {
    set_sent(from.sent());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.observed() != 0) {
    set_observed(from.observed());
  }
}

void Average::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Average::CopyFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Average::IsInitialized() const {

  return true;
}

void Average::Swap(Average* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Average::InternalSwap(Average* other) {
  std::swap(resolution_, other->resolution_);
  std::swap(prefix_, other->prefix_);
  std::swap(sent_, other->sent_);
  std::swap(received_, other->received_);
  std::swap(observed_, other->observed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Average::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Average_descriptor_;
  metadata.reflection = Average_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Average

// optional uint32 resolution = 1;
void Average::clear_resolution() {
  resolution_ = 0u;
}
::google::protobuf::uint32 Average::resolution() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.resolution)
  return resolution_;
}
void Average::set_resolution(::google::protobuf::uint32 value) {

  resolution_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.resolution)
}

// optional .netsensor.Prefix prefix = 2;
void Average::clear_prefix() {
  prefix_ = 0;
}
::netsensor::Prefix Average::prefix() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.prefix)
  return static_cast< ::netsensor::Prefix >(prefix_);
}
void Average::set_prefix(::netsensor::Prefix value) {

  prefix_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.prefix)
}

// optional uint32 sent = 3;
void Average::clear_sent() {
  sent_ = 0u;
}
::google::protobuf::uint32 Average::sent() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.sent)
  return sent_;
}
void Average::set_sent(::google::protobuf::uint32 value) {

  sent_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.sent)
}

// optional uint32 received = 4;
void Average::clear_received() {
  received_ = 0u;
}
::google::protobuf::uint32 Average::received() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.received)
  return received_;
}
void Average::set_received(::google::protobuf::uint32 value) {

  received_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.received)
}

// optional uint32 observed = 5;
void Average::clear_observed() {
  observed_ = 0u;
}
::google::protobuf::uint32 Average::observed() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.observed)
  return observed_;
}
void Average::set_observed(::google::protobuf::uint32 value) {

  observed_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.observed)
}

inline const Average* Average::internal_default_instance() {
  return &Average_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
