// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icmpinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "icmpinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {
class ICMPPacketsByInterfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ICMPPacketsByInterface> {
} _ICMPPacketsByInterface_default_instance_;
class ProtoICMPInfoContainerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoICMPInfoContainer> {
} _ProtoICMPInfoContainer_default_instance_;
class ProtoDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoData> {
} _ProtoData_default_instance_;
class ProtoIdentificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoIdentification> {
} _ProtoIdentification_default_instance_;
class ProtoIpHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoIpHeader> {
} _ProtoIpHeader_default_instance_;
class ProtoDatagramInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoDatagramInfo> {
} _ProtoDatagramInfo_default_instance_;
class ProtoICMPTimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoICMPTime> {
} _ProtoICMPTime_default_instance_;
class ProtoExtraAddressesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtoExtraAddresses> {
} _ProtoExtraAddresses_default_instance_;

namespace protobuf_icmpinfo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, monitoringinterface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICMPPacketsByInterface, icmpcontainers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, sourcemac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, destmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, sourceipaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, destipaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, icmppayload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPInfoContainer, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, pointertoerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, ipheader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, dgram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, icmptimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoData, extraaddresses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIdentification, sequencenumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, tos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, origsourceipaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoIpHeader, origdestipaddr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, sourceport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDatagramInfo, destport_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, originatetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, receivetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoICMPTime, transmittimestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, ipaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoExtraAddresses, timesrepeated_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ICMPPacketsByInterface)},
  { 7, -1, sizeof(ProtoICMPInfoContainer)},
  { 21, -1, sizeof(ProtoData)},
  { 32, -1, sizeof(ProtoIdentification)},
  { 39, -1, sizeof(ProtoIpHeader)},
  { 49, -1, sizeof(ProtoDatagramInfo)},
  { 56, -1, sizeof(ProtoICMPTime)},
  { 64, -1, sizeof(ProtoExtraAddresses)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ICMPPacketsByInterface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoICMPInfoContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoIdentification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoIpHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoDatagramInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoICMPTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtoExtraAddresses_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "icmpinfo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _ICMPPacketsByInterface_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProtoICMPInfoContainer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtoData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ProtoIdentification_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ProtoIpHeader_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ProtoDatagramInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ProtoICMPTime_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ProtoExtraAddresses_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _ICMPPacketsByInterface_default_instance_.DefaultConstruct();
  _ProtoICMPInfoContainer_default_instance_.DefaultConstruct();
  _ProtoData_default_instance_.DefaultConstruct();
  _ProtoIdentification_default_instance_.DefaultConstruct();
  _ProtoIpHeader_default_instance_.DefaultConstruct();
  _ProtoDatagramInfo_default_instance_.DefaultConstruct();
  _ProtoICMPTime_default_instance_.DefaultConstruct();
  _ProtoExtraAddresses_default_instance_.DefaultConstruct();
  _ProtoICMPInfoContainer_default_instance_.get_mutable()->icmppayload_ = const_cast< ::netsensor::ProtoData*>(
      ::netsensor::ProtoData::internal_default_instance());
  _ProtoICMPInfoContainer_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ProtoData_default_instance_.get_mutable()->id_ = const_cast< ::netsensor::ProtoIdentification*>(
      ::netsensor::ProtoIdentification::internal_default_instance());
  _ProtoData_default_instance_.get_mutable()->ipheader_ = const_cast< ::netsensor::ProtoIpHeader*>(
      ::netsensor::ProtoIpHeader::internal_default_instance());
  _ProtoData_default_instance_.get_mutable()->dgram_ = const_cast< ::netsensor::ProtoDatagramInfo*>(
      ::netsensor::ProtoDatagramInfo::internal_default_instance());
  _ProtoData_default_instance_.get_mutable()->icmptimestamp_ = const_cast< ::netsensor::ProtoICMPTime*>(
      ::netsensor::ProtoICMPTime::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016icmpinfo.proto\022\tnetsensor\032\037google/prot"
      "obuf/timestamp.proto\"p\n\026ICMPPacketsByInt"
      "erface\022\033\n\023monitoringInterface\030\001 \001(\t\0229\n\016i"
      "cmpContainers\030\002 \003(\0132!.netsensor.ProtoICM"
      "PInfoContainer\"\353\001\n\026ProtoICMPInfoContaine"
      "r\022\021\n\tsourceMAC\030\001 \001(\t\022\017\n\007destMAC\030\002 \001(\t\022\024\n"
      "\014sourceIPAddr\030\003 \001(\t\022\022\n\ndestIPAddr\030\004 \001(\t\022"
      "\014\n\004type\030\005 \001(\r\022\014\n\004code\030\006 \001(\r\022\r\n\005count\030\007 \001"
      "(\r\022)\n\013ICMPPayload\030\010 \001(\0132\024.netsensor.Prot"
      "oData\022-\n\ttimestamp\030\t \001(\0132\032.google.protob"
      "uf.Timestamp\"\221\002\n\tProtoData\022\026\n\016pointerToE"
      "rror\030\001 \001(\r\022*\n\002id\030\002 \001(\0132\036.netsensor.Proto"
      "Identification\022*\n\010ipHeader\030\003 \001(\0132\030.netse"
      "nsor.ProtoIpHeader\022+\n\005dgram\030\004 \001(\0132\034.nets"
      "ensor.ProtoDatagramInfo\022/\n\ricmpTimestamp"
      "\030\005 \001(\0132\030.netsensor.ProtoICMPTime\0226\n\016extr"
      "aAddresses\030\006 \003(\0132\036.netsensor.ProtoExtraA"
      "ddresses\"A\n\023ProtoIdentification\022\022\n\nident"
      "ifier\030\001 \001(\r\022\026\n\016sequenceNumber\030\002 \001(\r\"p\n\rP"
      "rotoIpHeader\022\013\n\003tos\030\001 \001(\r\022\016\n\006length\030\002 \001("
      "\r\022\020\n\010protocol\030\003 \001(\r\022\030\n\020origSourceIPAddr\030"
      "\004 \001(\t\022\026\n\016origDestIPAddr\030\005 \001(\t\"9\n\021ProtoDa"
      "tagramInfo\022\022\n\nsourcePort\030\001 \001(\r\022\020\n\010destPo"
      "rt\030\002 \001(\r\"`\n\rProtoICMPTime\022\032\n\022originateTi"
      "mestamp\030\001 \001(\r\022\030\n\020receiveTimestamp\030\002 \001(\r\022"
      "\031\n\021transmitTimestamp\030\003 \001(\r\"\?\n\023ProtoExtra"
      "Addresses\022\021\n\tIPAddress\030\001 \001(\t\022\025\n\rtimesRep"
      "eated\030\002 \001(\rB\013Z\tnetsensorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "icmpinfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_icmpinfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ICMPPacketsByInterface::kMonitoringInterfaceFieldNumber;
const int ICMPPacketsByInterface::kIcmpContainersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ICMPPacketsByInterface::ICMPPacketsByInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ICMPPacketsByInterface)
}
ICMPPacketsByInterface::ICMPPacketsByInterface(const ICMPPacketsByInterface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      icmpcontainers_(from.icmpcontainers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitoringinterface().size() > 0) {
    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
  // @@protoc_insertion_point(copy_constructor:netsensor.ICMPPacketsByInterface)
}

void ICMPPacketsByInterface::SharedCtor() {
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ICMPPacketsByInterface::~ICMPPacketsByInterface() {
  // @@protoc_insertion_point(destructor:netsensor.ICMPPacketsByInterface)
  SharedDtor();
}

void ICMPPacketsByInterface::SharedDtor() {
  monitoringinterface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ICMPPacketsByInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICMPPacketsByInterface::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ICMPPacketsByInterface& ICMPPacketsByInterface::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ICMPPacketsByInterface* ICMPPacketsByInterface::New(::google::protobuf::Arena* arena) const {
  ICMPPacketsByInterface* n = new ICMPPacketsByInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ICMPPacketsByInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ICMPPacketsByInterface)
  icmpcontainers_.Clear();
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ICMPPacketsByInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ICMPPacketsByInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string monitoringInterface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoringinterface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoringinterface().data(), this->monitoringinterface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ICMPPacketsByInterface.monitoringInterface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icmpcontainers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ICMPPacketsByInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ICMPPacketsByInterface)
  return false;
#undef DO_
}

void ICMPPacketsByInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ICMPPacketsByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ICMPPacketsByInterface.monitoringInterface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->monitoringinterface(), output);
  }

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  for (unsigned int i = 0, n = this->icmpcontainers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->icmpcontainers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ICMPPacketsByInterface)
}

::google::protobuf::uint8* ICMPPacketsByInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ICMPPacketsByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ICMPPacketsByInterface.monitoringInterface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoringinterface(), target);
  }

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  for (unsigned int i = 0, n = this->icmpcontainers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->icmpcontainers(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ICMPPacketsByInterface)
  return target;
}

size_t ICMPPacketsByInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ICMPPacketsByInterface)
  size_t total_size = 0;

  // repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
  {
    unsigned int count = this->icmpcontainers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icmpcontainers(i));
    }
  }

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoringinterface());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICMPPacketsByInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ICMPPacketsByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const ICMPPacketsByInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ICMPPacketsByInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ICMPPacketsByInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ICMPPacketsByInterface)
    MergeFrom(*source);
  }
}

void ICMPPacketsByInterface::MergeFrom(const ICMPPacketsByInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ICMPPacketsByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icmpcontainers_.MergeFrom(from.icmpcontainers_);
  if (from.monitoringinterface().size() > 0) {

    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
}

void ICMPPacketsByInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ICMPPacketsByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICMPPacketsByInterface::CopyFrom(const ICMPPacketsByInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ICMPPacketsByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICMPPacketsByInterface::IsInitialized() const {
  return true;
}

void ICMPPacketsByInterface::Swap(ICMPPacketsByInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ICMPPacketsByInterface::InternalSwap(ICMPPacketsByInterface* other) {
  icmpcontainers_.InternalSwap(&other->icmpcontainers_);
  monitoringinterface_.Swap(&other->monitoringinterface_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ICMPPacketsByInterface::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ICMPPacketsByInterface

// string monitoringInterface = 1;
void ICMPPacketsByInterface::clear_monitoringinterface() {
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ICMPPacketsByInterface::monitoringinterface() const {
  // @@protoc_insertion_point(field_get:netsensor.ICMPPacketsByInterface.monitoringInterface)
  return monitoringinterface_.GetNoArena();
}
void ICMPPacketsByInterface::set_monitoringinterface(const ::std::string& value) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
#if LANG_CXX11
void ICMPPacketsByInterface::set_monitoringinterface(::std::string&& value) {
  
  monitoringinterface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
#endif
void ICMPPacketsByInterface::set_monitoringinterface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
void ICMPPacketsByInterface::set_monitoringinterface(const char* value, size_t size) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ICMPPacketsByInterface.monitoringInterface)
}
::std::string* ICMPPacketsByInterface::mutable_monitoringinterface() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ICMPPacketsByInterface.monitoringInterface)
  return monitoringinterface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ICMPPacketsByInterface::release_monitoringinterface() {
  // @@protoc_insertion_point(field_release:netsensor.ICMPPacketsByInterface.monitoringInterface)
  
  return monitoringinterface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ICMPPacketsByInterface::set_allocated_monitoringinterface(::std::string* monitoringinterface) {
  if (monitoringinterface != NULL) {
    
  } else {
    
  }
  monitoringinterface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoringinterface);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ICMPPacketsByInterface.monitoringInterface)
}

// repeated .netsensor.ProtoICMPInfoContainer icmpContainers = 2;
int ICMPPacketsByInterface::icmpcontainers_size() const {
  return icmpcontainers_.size();
}
void ICMPPacketsByInterface::clear_icmpcontainers() {
  icmpcontainers_.Clear();
}
const ::netsensor::ProtoICMPInfoContainer& ICMPPacketsByInterface::icmpcontainers(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Get(index);
}
::netsensor::ProtoICMPInfoContainer* ICMPPacketsByInterface::mutable_icmpcontainers(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Mutable(index);
}
::netsensor::ProtoICMPInfoContainer* ICMPPacketsByInterface::add_icmpcontainers() {
  // @@protoc_insertion_point(field_add:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::ProtoICMPInfoContainer >*
ICMPPacketsByInterface::mutable_icmpcontainers() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.ICMPPacketsByInterface.icmpContainers)
  return &icmpcontainers_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::ProtoICMPInfoContainer >&
ICMPPacketsByInterface::icmpcontainers() const {
  // @@protoc_insertion_point(field_list:netsensor.ICMPPacketsByInterface.icmpContainers)
  return icmpcontainers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoICMPInfoContainer::kSourceMACFieldNumber;
const int ProtoICMPInfoContainer::kDestMACFieldNumber;
const int ProtoICMPInfoContainer::kSourceIPAddrFieldNumber;
const int ProtoICMPInfoContainer::kDestIPAddrFieldNumber;
const int ProtoICMPInfoContainer::kTypeFieldNumber;
const int ProtoICMPInfoContainer::kCodeFieldNumber;
const int ProtoICMPInfoContainer::kCountFieldNumber;
const int ProtoICMPInfoContainer::kICMPPayloadFieldNumber;
const int ProtoICMPInfoContainer::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoICMPInfoContainer::ProtoICMPInfoContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoICMPInfoContainer)
}
ProtoICMPInfoContainer::ProtoICMPInfoContainer(const ProtoICMPInfoContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourcemac().size() > 0) {
    sourcemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcemac_);
  }
  destmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destmac().size() > 0) {
    destmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destmac_);
  }
  sourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourceipaddr().size() > 0) {
    sourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceipaddr_);
  }
  destipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destipaddr().size() > 0) {
    destipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destipaddr_);
  }
  if (from.has_icmppayload()) {
    icmppayload_ = new ::netsensor::ProtoData(*from.icmppayload_);
  } else {
    icmppayload_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoICMPInfoContainer)
}

void ProtoICMPInfoContainer::SharedCtor() {
  sourcemac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&icmppayload_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&icmppayload_) + sizeof(count_));
  _cached_size_ = 0;
}

ProtoICMPInfoContainer::~ProtoICMPInfoContainer() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoICMPInfoContainer)
  SharedDtor();
}

void ProtoICMPInfoContainer::SharedDtor() {
  sourcemac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete icmppayload_;
  }
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
}

void ProtoICMPInfoContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoICMPInfoContainer::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoICMPInfoContainer& ProtoICMPInfoContainer::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoICMPInfoContainer* ProtoICMPInfoContainer::New(::google::protobuf::Arena* arena) const {
  ProtoICMPInfoContainer* n = new ProtoICMPInfoContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoICMPInfoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoICMPInfoContainer)
  sourcemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && icmppayload_ != NULL) {
    delete icmppayload_;
  }
  icmppayload_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
}

bool ProtoICMPInfoContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoICMPInfoContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sourceMAC = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcemac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourcemac().data(), this->sourcemac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.sourceMAC"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destMAC = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destmac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destmac().data(), this->destmac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.destMAC"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sourceIPAddr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourceipaddr().data(), this->sourceipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.sourceIPAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destIPAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destipaddr().data(), this->destipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoICMPInfoContainer.destIPAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.ProtoData ICMPPayload = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icmppayload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoICMPInfoContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoICMPInfoContainer)
  return false;
#undef DO_
}

void ProtoICMPInfoContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoICMPInfoContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcemac().data(), this->sourcemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceMAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcemac(), output);
  }

  // string destMAC = 2;
  if (this->destmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destmac().data(), this->destmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destMAC");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destmac(), output);
  }

  // string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceipaddr().data(), this->sourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sourceipaddr(), output);
  }

  // string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destipaddr().data(), this->destipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destipaddr(), output);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // uint32 code = 6;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->code(), output);
  }

  // uint32 count = 7;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->icmppayload_, output);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoICMPInfoContainer)
}

::google::protobuf::uint8* ProtoICMPInfoContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoICMPInfoContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourcemac().data(), this->sourcemac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceMAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcemac(), target);
  }

  // string destMAC = 2;
  if (this->destmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destmac().data(), this->destmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destMAC");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destmac(), target);
  }

  // string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceipaddr().data(), this->sourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.sourceIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sourceipaddr(), target);
  }

  // string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destipaddr().data(), this->destipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoICMPInfoContainer.destIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destipaddr(), target);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // uint32 code = 6;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->code(), target);
  }

  // uint32 count = 7;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->icmppayload_, deterministic, target);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->timestamp_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoICMPInfoContainer)
  return target;
}

size_t ProtoICMPInfoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoICMPInfoContainer)
  size_t total_size = 0;

  // string sourceMAC = 1;
  if (this->sourcemac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourcemac());
  }

  // string destMAC = 2;
  if (this->destmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destmac());
  }

  // string sourceIPAddr = 3;
  if (this->sourceipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceipaddr());
  }

  // string destIPAddr = 4;
  if (this->destipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destipaddr());
  }

  // .netsensor.ProtoData ICMPPayload = 8;
  if (this->has_icmppayload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->icmppayload_);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 code = 6;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  // uint32 count = 7;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoICMPInfoContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoICMPInfoContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoICMPInfoContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoICMPInfoContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoICMPInfoContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoICMPInfoContainer)
    MergeFrom(*source);
  }
}

void ProtoICMPInfoContainer::MergeFrom(const ProtoICMPInfoContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoICMPInfoContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourcemac().size() > 0) {

    sourcemac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourcemac_);
  }
  if (from.destmac().size() > 0) {

    destmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destmac_);
  }
  if (from.sourceipaddr().size() > 0) {

    sourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceipaddr_);
  }
  if (from.destipaddr().size() > 0) {

    destipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destipaddr_);
  }
  if (from.has_icmppayload()) {
    mutable_icmppayload()->::netsensor::ProtoData::MergeFrom(from.icmppayload());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ProtoICMPInfoContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoICMPInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoICMPInfoContainer::CopyFrom(const ProtoICMPInfoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoICMPInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoICMPInfoContainer::IsInitialized() const {
  return true;
}

void ProtoICMPInfoContainer::Swap(ProtoICMPInfoContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoICMPInfoContainer::InternalSwap(ProtoICMPInfoContainer* other) {
  sourcemac_.Swap(&other->sourcemac_);
  destmac_.Swap(&other->destmac_);
  sourceipaddr_.Swap(&other->sourceipaddr_);
  destipaddr_.Swap(&other->destipaddr_);
  std::swap(icmppayload_, other->icmppayload_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(type_, other->type_);
  std::swap(code_, other->code_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoICMPInfoContainer::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoICMPInfoContainer

// string sourceMAC = 1;
void ProtoICMPInfoContainer::clear_sourcemac() {
  sourcemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::sourcemac() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.sourceMAC)
  return sourcemac_.GetNoArena();
}
void ProtoICMPInfoContainer::set_sourcemac(const ::std::string& value) {
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
#if LANG_CXX11
void ProtoICMPInfoContainer::set_sourcemac(::std::string&& value) {
  
  sourcemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
#endif
void ProtoICMPInfoContainer::set_sourcemac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
void ProtoICMPInfoContainer::set_sourcemac(const char* value, size_t size) {
  
  sourcemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.sourceMAC)
}
::std::string* ProtoICMPInfoContainer::mutable_sourcemac() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.sourceMAC)
  return sourcemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_sourcemac() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.sourceMAC)
  
  return sourcemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_sourcemac(::std::string* sourcemac) {
  if (sourcemac != NULL) {
    
  } else {
    
  }
  sourcemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcemac);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.sourceMAC)
}

// string destMAC = 2;
void ProtoICMPInfoContainer::clear_destmac() {
  destmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::destmac() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.destMAC)
  return destmac_.GetNoArena();
}
void ProtoICMPInfoContainer::set_destmac(const ::std::string& value) {
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.destMAC)
}
#if LANG_CXX11
void ProtoICMPInfoContainer::set_destmac(::std::string&& value) {
  
  destmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoICMPInfoContainer.destMAC)
}
#endif
void ProtoICMPInfoContainer::set_destmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.destMAC)
}
void ProtoICMPInfoContainer::set_destmac(const char* value, size_t size) {
  
  destmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.destMAC)
}
::std::string* ProtoICMPInfoContainer::mutable_destmac() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.destMAC)
  return destmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_destmac() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.destMAC)
  
  return destmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_destmac(::std::string* destmac) {
  if (destmac != NULL) {
    
  } else {
    
  }
  destmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destmac);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.destMAC)
}

// string sourceIPAddr = 3;
void ProtoICMPInfoContainer::clear_sourceipaddr() {
  sourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::sourceipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  return sourceipaddr_.GetNoArena();
}
void ProtoICMPInfoContainer::set_sourceipaddr(const ::std::string& value) {
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
#if LANG_CXX11
void ProtoICMPInfoContainer::set_sourceipaddr(::std::string&& value) {
  
  sourceipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
#endif
void ProtoICMPInfoContainer::set_sourceipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
void ProtoICMPInfoContainer::set_sourceipaddr(const char* value, size_t size) {
  
  sourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}
::std::string* ProtoICMPInfoContainer::mutable_sourceipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  return sourceipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_sourceipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
  
  return sourceipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_sourceipaddr(::std::string* sourceipaddr) {
  if (sourceipaddr != NULL) {
    
  } else {
    
  }
  sourceipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.sourceIPAddr)
}

// string destIPAddr = 4;
void ProtoICMPInfoContainer::clear_destipaddr() {
  destipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoICMPInfoContainer::destipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.destIPAddr)
  return destipaddr_.GetNoArena();
}
void ProtoICMPInfoContainer::set_destipaddr(const ::std::string& value) {
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
#if LANG_CXX11
void ProtoICMPInfoContainer::set_destipaddr(::std::string&& value) {
  
  destipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
#endif
void ProtoICMPInfoContainer::set_destipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
void ProtoICMPInfoContainer::set_destipaddr(const char* value, size_t size) {
  
  destipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoICMPInfoContainer.destIPAddr)
}
::std::string* ProtoICMPInfoContainer::mutable_destipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.destIPAddr)
  return destipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoICMPInfoContainer::release_destipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.destIPAddr)
  
  return destipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoICMPInfoContainer::set_allocated_destipaddr(::std::string* destipaddr) {
  if (destipaddr != NULL) {
    
  } else {
    
  }
  destipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.destIPAddr)
}

// uint32 type = 5;
void ProtoICMPInfoContainer::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::type() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.type)
  return type_;
}
void ProtoICMPInfoContainer::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.type)
}

// uint32 code = 6;
void ProtoICMPInfoContainer::clear_code() {
  code_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::code() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.code)
  return code_;
}
void ProtoICMPInfoContainer::set_code(::google::protobuf::uint32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.code)
}

// uint32 count = 7;
void ProtoICMPInfoContainer::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 ProtoICMPInfoContainer::count() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.count)
  return count_;
}
void ProtoICMPInfoContainer::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPInfoContainer.count)
}

// .netsensor.ProtoData ICMPPayload = 8;
bool ProtoICMPInfoContainer::has_icmppayload() const {
  return this != internal_default_instance() && icmppayload_ != NULL;
}
void ProtoICMPInfoContainer::clear_icmppayload() {
  if (GetArenaNoVirtual() == NULL && icmppayload_ != NULL) delete icmppayload_;
  icmppayload_ = NULL;
}
const ::netsensor::ProtoData& ProtoICMPInfoContainer::icmppayload() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  return icmppayload_ != NULL ? *icmppayload_
                         : *::netsensor::ProtoData::internal_default_instance();
}
::netsensor::ProtoData* ProtoICMPInfoContainer::mutable_icmppayload() {
  
  if (icmppayload_ == NULL) {
    icmppayload_ = new ::netsensor::ProtoData;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  return icmppayload_;
}
::netsensor::ProtoData* ProtoICMPInfoContainer::release_icmppayload() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.ICMPPayload)
  
  ::netsensor::ProtoData* temp = icmppayload_;
  icmppayload_ = NULL;
  return temp;
}
void ProtoICMPInfoContainer::set_allocated_icmppayload(::netsensor::ProtoData* icmppayload) {
  delete icmppayload_;
  icmppayload_ = icmppayload;
  if (icmppayload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.ICMPPayload)
}

// .google.protobuf.Timestamp timestamp = 9;
bool ProtoICMPInfoContainer::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void ProtoICMPInfoContainer::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ProtoICMPInfoContainer::timestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPInfoContainer.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ProtoICMPInfoContainer::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoICMPInfoContainer.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* ProtoICMPInfoContainer::release_timestamp() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoICMPInfoContainer.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void ProtoICMPInfoContainer::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoICMPInfoContainer.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoData::kPointerToErrorFieldNumber;
const int ProtoData::kIdFieldNumber;
const int ProtoData::kIpHeaderFieldNumber;
const int ProtoData::kDgramFieldNumber;
const int ProtoData::kIcmpTimestampFieldNumber;
const int ProtoData::kExtraAddressesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoData::ProtoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoData)
}
ProtoData::ProtoData(const ProtoData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extraaddresses_(from.extraaddresses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::netsensor::ProtoIdentification(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_ipheader()) {
    ipheader_ = new ::netsensor::ProtoIpHeader(*from.ipheader_);
  } else {
    ipheader_ = NULL;
  }
  if (from.has_dgram()) {
    dgram_ = new ::netsensor::ProtoDatagramInfo(*from.dgram_);
  } else {
    dgram_ = NULL;
  }
  if (from.has_icmptimestamp()) {
    icmptimestamp_ = new ::netsensor::ProtoICMPTime(*from.icmptimestamp_);
  } else {
    icmptimestamp_ = NULL;
  }
  pointertoerror_ = from.pointertoerror_;
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoData)
}

void ProtoData::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&pointertoerror_) -
    reinterpret_cast<char*>(&id_) + sizeof(pointertoerror_));
  _cached_size_ = 0;
}

ProtoData::~ProtoData() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoData)
  SharedDtor();
}

void ProtoData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete ipheader_;
  }
  if (this != internal_default_instance()) {
    delete dgram_;
  }
  if (this != internal_default_instance()) {
    delete icmptimestamp_;
  }
}

void ProtoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoData::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoData& ProtoData::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoData* ProtoData::New(::google::protobuf::Arena* arena) const {
  ProtoData* n = new ProtoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoData)
  extraaddresses_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && ipheader_ != NULL) {
    delete ipheader_;
  }
  ipheader_ = NULL;
  if (GetArenaNoVirtual() == NULL && dgram_ != NULL) {
    delete dgram_;
  }
  dgram_ = NULL;
  if (GetArenaNoVirtual() == NULL && icmptimestamp_ != NULL) {
    delete icmptimestamp_;
  }
  icmptimestamp_ = NULL;
  pointertoerror_ = 0u;
}

bool ProtoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pointerToError = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointertoerror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.ProtoIdentification id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.ProtoIpHeader ipHeader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.ProtoDatagramInfo dgram = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dgram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.ProtoICMPTime icmpTimestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icmptimestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extraaddresses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoData)
  return false;
#undef DO_
}

void ProtoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pointertoerror(), output);
  }

  // .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ipheader_, output);
  }

  // .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dgram_, output);
  }

  // .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->icmptimestamp_, output);
  }

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  for (unsigned int i = 0, n = this->extraaddresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->extraaddresses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoData)
}

::google::protobuf::uint8* ProtoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pointertoerror(), target);
  }

  // .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, deterministic, target);
  }

  // .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ipheader_, deterministic, target);
  }

  // .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dgram_, deterministic, target);
  }

  // .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->icmptimestamp_, deterministic, target);
  }

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  for (unsigned int i = 0, n = this->extraaddresses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->extraaddresses(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoData)
  return target;
}

size_t ProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoData)
  size_t total_size = 0;

  // repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
  {
    unsigned int count = this->extraaddresses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraaddresses(i));
    }
  }

  // .netsensor.ProtoIdentification id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // .netsensor.ProtoIpHeader ipHeader = 3;
  if (this->has_ipheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ipheader_);
  }

  // .netsensor.ProtoDatagramInfo dgram = 4;
  if (this->has_dgram()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dgram_);
  }

  // .netsensor.ProtoICMPTime icmpTimestamp = 5;
  if (this->has_icmptimestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->icmptimestamp_);
  }

  // uint32 pointerToError = 1;
  if (this->pointertoerror() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pointertoerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoData)
    MergeFrom(*source);
  }
}

void ProtoData::MergeFrom(const ProtoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extraaddresses_.MergeFrom(from.extraaddresses_);
  if (from.has_id()) {
    mutable_id()->::netsensor::ProtoIdentification::MergeFrom(from.id());
  }
  if (from.has_ipheader()) {
    mutable_ipheader()->::netsensor::ProtoIpHeader::MergeFrom(from.ipheader());
  }
  if (from.has_dgram()) {
    mutable_dgram()->::netsensor::ProtoDatagramInfo::MergeFrom(from.dgram());
  }
  if (from.has_icmptimestamp()) {
    mutable_icmptimestamp()->::netsensor::ProtoICMPTime::MergeFrom(from.icmptimestamp());
  }
  if (from.pointertoerror() != 0) {
    set_pointertoerror(from.pointertoerror());
  }
}

void ProtoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoData::CopyFrom(const ProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoData::IsInitialized() const {
  return true;
}

void ProtoData::Swap(ProtoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoData::InternalSwap(ProtoData* other) {
  extraaddresses_.InternalSwap(&other->extraaddresses_);
  std::swap(id_, other->id_);
  std::swap(ipheader_, other->ipheader_);
  std::swap(dgram_, other->dgram_);
  std::swap(icmptimestamp_, other->icmptimestamp_);
  std::swap(pointertoerror_, other->pointertoerror_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoData::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoData

// uint32 pointerToError = 1;
void ProtoData::clear_pointertoerror() {
  pointertoerror_ = 0u;
}
::google::protobuf::uint32 ProtoData::pointertoerror() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.pointerToError)
  return pointertoerror_;
}
void ProtoData::set_pointertoerror(::google::protobuf::uint32 value) {
  
  pointertoerror_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoData.pointerToError)
}

// .netsensor.ProtoIdentification id = 2;
bool ProtoData::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void ProtoData::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::netsensor::ProtoIdentification& ProtoData::id() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.id)
  return id_ != NULL ? *id_
                         : *::netsensor::ProtoIdentification::internal_default_instance();
}
::netsensor::ProtoIdentification* ProtoData::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::netsensor::ProtoIdentification;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.id)
  return id_;
}
::netsensor::ProtoIdentification* ProtoData::release_id() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.id)
  
  ::netsensor::ProtoIdentification* temp = id_;
  id_ = NULL;
  return temp;
}
void ProtoData::set_allocated_id(::netsensor::ProtoIdentification* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.id)
}

// .netsensor.ProtoIpHeader ipHeader = 3;
bool ProtoData::has_ipheader() const {
  return this != internal_default_instance() && ipheader_ != NULL;
}
void ProtoData::clear_ipheader() {
  if (GetArenaNoVirtual() == NULL && ipheader_ != NULL) delete ipheader_;
  ipheader_ = NULL;
}
const ::netsensor::ProtoIpHeader& ProtoData::ipheader() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.ipHeader)
  return ipheader_ != NULL ? *ipheader_
                         : *::netsensor::ProtoIpHeader::internal_default_instance();
}
::netsensor::ProtoIpHeader* ProtoData::mutable_ipheader() {
  
  if (ipheader_ == NULL) {
    ipheader_ = new ::netsensor::ProtoIpHeader;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.ipHeader)
  return ipheader_;
}
::netsensor::ProtoIpHeader* ProtoData::release_ipheader() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.ipHeader)
  
  ::netsensor::ProtoIpHeader* temp = ipheader_;
  ipheader_ = NULL;
  return temp;
}
void ProtoData::set_allocated_ipheader(::netsensor::ProtoIpHeader* ipheader) {
  delete ipheader_;
  ipheader_ = ipheader;
  if (ipheader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.ipHeader)
}

// .netsensor.ProtoDatagramInfo dgram = 4;
bool ProtoData::has_dgram() const {
  return this != internal_default_instance() && dgram_ != NULL;
}
void ProtoData::clear_dgram() {
  if (GetArenaNoVirtual() == NULL && dgram_ != NULL) delete dgram_;
  dgram_ = NULL;
}
const ::netsensor::ProtoDatagramInfo& ProtoData::dgram() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.dgram)
  return dgram_ != NULL ? *dgram_
                         : *::netsensor::ProtoDatagramInfo::internal_default_instance();
}
::netsensor::ProtoDatagramInfo* ProtoData::mutable_dgram() {
  
  if (dgram_ == NULL) {
    dgram_ = new ::netsensor::ProtoDatagramInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.dgram)
  return dgram_;
}
::netsensor::ProtoDatagramInfo* ProtoData::release_dgram() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.dgram)
  
  ::netsensor::ProtoDatagramInfo* temp = dgram_;
  dgram_ = NULL;
  return temp;
}
void ProtoData::set_allocated_dgram(::netsensor::ProtoDatagramInfo* dgram) {
  delete dgram_;
  dgram_ = dgram;
  if (dgram) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.dgram)
}

// .netsensor.ProtoICMPTime icmpTimestamp = 5;
bool ProtoData::has_icmptimestamp() const {
  return this != internal_default_instance() && icmptimestamp_ != NULL;
}
void ProtoData::clear_icmptimestamp() {
  if (GetArenaNoVirtual() == NULL && icmptimestamp_ != NULL) delete icmptimestamp_;
  icmptimestamp_ = NULL;
}
const ::netsensor::ProtoICMPTime& ProtoData::icmptimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.icmpTimestamp)
  return icmptimestamp_ != NULL ? *icmptimestamp_
                         : *::netsensor::ProtoICMPTime::internal_default_instance();
}
::netsensor::ProtoICMPTime* ProtoData::mutable_icmptimestamp() {
  
  if (icmptimestamp_ == NULL) {
    icmptimestamp_ = new ::netsensor::ProtoICMPTime;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.icmpTimestamp)
  return icmptimestamp_;
}
::netsensor::ProtoICMPTime* ProtoData::release_icmptimestamp() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoData.icmpTimestamp)
  
  ::netsensor::ProtoICMPTime* temp = icmptimestamp_;
  icmptimestamp_ = NULL;
  return temp;
}
void ProtoData::set_allocated_icmptimestamp(::netsensor::ProtoICMPTime* icmptimestamp) {
  delete icmptimestamp_;
  icmptimestamp_ = icmptimestamp;
  if (icmptimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoData.icmpTimestamp)
}

// repeated .netsensor.ProtoExtraAddresses extraAddresses = 6;
int ProtoData::extraaddresses_size() const {
  return extraaddresses_.size();
}
void ProtoData::clear_extraaddresses() {
  extraaddresses_.Clear();
}
const ::netsensor::ProtoExtraAddresses& ProtoData::extraaddresses(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Get(index);
}
::netsensor::ProtoExtraAddresses* ProtoData::mutable_extraaddresses(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Mutable(index);
}
::netsensor::ProtoExtraAddresses* ProtoData::add_extraaddresses() {
  // @@protoc_insertion_point(field_add:netsensor.ProtoData.extraAddresses)
  return extraaddresses_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::ProtoExtraAddresses >*
ProtoData::mutable_extraaddresses() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.ProtoData.extraAddresses)
  return &extraaddresses_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::ProtoExtraAddresses >&
ProtoData::extraaddresses() const {
  // @@protoc_insertion_point(field_list:netsensor.ProtoData.extraAddresses)
  return extraaddresses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoIdentification::kIdentifierFieldNumber;
const int ProtoIdentification::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoIdentification::ProtoIdentification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoIdentification)
}
ProtoIdentification::ProtoIdentification(const ProtoIdentification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&identifier_, &from.identifier_,
    reinterpret_cast<char*>(&sequencenumber_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(sequencenumber_));
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoIdentification)
}

void ProtoIdentification::SharedCtor() {
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&sequencenumber_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(sequencenumber_));
  _cached_size_ = 0;
}

ProtoIdentification::~ProtoIdentification() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoIdentification)
  SharedDtor();
}

void ProtoIdentification::SharedDtor() {
}

void ProtoIdentification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoIdentification::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoIdentification& ProtoIdentification::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoIdentification* ProtoIdentification::New(::google::protobuf::Arena* arena) const {
  ProtoIdentification* n = new ProtoIdentification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoIdentification::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoIdentification)
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&sequencenumber_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(sequencenumber_));
}

bool ProtoIdentification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoIdentification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 identifier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequenceNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequencenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoIdentification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoIdentification)
  return false;
#undef DO_
}

void ProtoIdentification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequencenumber(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoIdentification)
}

::google::protobuf::uint8* ProtoIdentification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoIdentification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequencenumber(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoIdentification)
  return target;
}

size_t ProtoIdentification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoIdentification)
  size_t total_size = 0;

  // uint32 identifier = 1;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->identifier());
  }

  // uint32 sequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequencenumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoIdentification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoIdentification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoIdentification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoIdentification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoIdentification)
    MergeFrom(*source);
  }
}

void ProtoIdentification::MergeFrom(const ProtoIdentification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoIdentification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier() != 0) {
    set_identifier(from.identifier());
  }
  if (from.sequencenumber() != 0) {
    set_sequencenumber(from.sequencenumber());
  }
}

void ProtoIdentification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoIdentification::CopyFrom(const ProtoIdentification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoIdentification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoIdentification::IsInitialized() const {
  return true;
}

void ProtoIdentification::Swap(ProtoIdentification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoIdentification::InternalSwap(ProtoIdentification* other) {
  std::swap(identifier_, other->identifier_);
  std::swap(sequencenumber_, other->sequencenumber_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoIdentification::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoIdentification

// uint32 identifier = 1;
void ProtoIdentification::clear_identifier() {
  identifier_ = 0u;
}
::google::protobuf::uint32 ProtoIdentification::identifier() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIdentification.identifier)
  return identifier_;
}
void ProtoIdentification::set_identifier(::google::protobuf::uint32 value) {
  
  identifier_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIdentification.identifier)
}

// uint32 sequenceNumber = 2;
void ProtoIdentification::clear_sequencenumber() {
  sequencenumber_ = 0u;
}
::google::protobuf::uint32 ProtoIdentification::sequencenumber() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIdentification.sequenceNumber)
  return sequencenumber_;
}
void ProtoIdentification::set_sequencenumber(::google::protobuf::uint32 value) {
  
  sequencenumber_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIdentification.sequenceNumber)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoIpHeader::kTosFieldNumber;
const int ProtoIpHeader::kLengthFieldNumber;
const int ProtoIpHeader::kProtocolFieldNumber;
const int ProtoIpHeader::kOrigSourceIPAddrFieldNumber;
const int ProtoIpHeader::kOrigDestIPAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoIpHeader::ProtoIpHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoIpHeader)
}
ProtoIpHeader::ProtoIpHeader(const ProtoIpHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origsourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origsourceipaddr().size() > 0) {
    origsourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origsourceipaddr_);
  }
  origdestipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.origdestipaddr().size() > 0) {
    origdestipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origdestipaddr_);
  }
  ::memcpy(&tos_, &from.tos_,
    reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&tos_) + sizeof(protocol_));
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoIpHeader)
}

void ProtoIpHeader::SharedCtor() {
  origsourceipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tos_, 0, reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&tos_) + sizeof(protocol_));
  _cached_size_ = 0;
}

ProtoIpHeader::~ProtoIpHeader() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoIpHeader)
  SharedDtor();
}

void ProtoIpHeader::SharedDtor() {
  origsourceipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoIpHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoIpHeader::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoIpHeader& ProtoIpHeader::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoIpHeader* ProtoIpHeader::New(::google::protobuf::Arena* arena) const {
  ProtoIpHeader* n = new ProtoIpHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoIpHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoIpHeader)
  origsourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origdestipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tos_, 0, reinterpret_cast<char*>(&protocol_) -
    reinterpret_cast<char*>(&tos_) + sizeof(protocol_));
}

bool ProtoIpHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoIpHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origSourceIPAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origsourceipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origsourceipaddr().data(), this->origsourceipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoIpHeader.origSourceIPAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string origDestIPAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origdestipaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->origdestipaddr().data(), this->origdestipaddr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoIpHeader.origDestIPAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoIpHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoIpHeader)
  return false;
#undef DO_
}

void ProtoIpHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoIpHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tos = 1;
  if (this->tos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tos(), output);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol(), output);
  }

  // string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origsourceipaddr().data(), this->origsourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origSourceIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->origsourceipaddr(), output);
  }

  // string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origdestipaddr().data(), this->origdestipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origDestIPAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->origdestipaddr(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoIpHeader)
}

::google::protobuf::uint8* ProtoIpHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoIpHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tos = 1;
  if (this->tos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tos(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->protocol(), target);
  }

  // string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origsourceipaddr().data(), this->origsourceipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origSourceIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origsourceipaddr(), target);
  }

  // string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->origdestipaddr().data(), this->origdestipaddr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoIpHeader.origDestIPAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->origdestipaddr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoIpHeader)
  return target;
}

size_t ProtoIpHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoIpHeader)
  size_t total_size = 0;

  // string origSourceIPAddr = 4;
  if (this->origsourceipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origsourceipaddr());
  }

  // string origDestIPAddr = 5;
  if (this->origdestipaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->origdestipaddr());
  }

  // uint32 tos = 1;
  if (this->tos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tos());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoIpHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoIpHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoIpHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoIpHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoIpHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoIpHeader)
    MergeFrom(*source);
  }
}

void ProtoIpHeader::MergeFrom(const ProtoIpHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoIpHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origsourceipaddr().size() > 0) {

    origsourceipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origsourceipaddr_);
  }
  if (from.origdestipaddr().size() > 0) {

    origdestipaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origdestipaddr_);
  }
  if (from.tos() != 0) {
    set_tos(from.tos());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
}

void ProtoIpHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoIpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoIpHeader::CopyFrom(const ProtoIpHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoIpHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoIpHeader::IsInitialized() const {
  return true;
}

void ProtoIpHeader::Swap(ProtoIpHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoIpHeader::InternalSwap(ProtoIpHeader* other) {
  origsourceipaddr_.Swap(&other->origsourceipaddr_);
  origdestipaddr_.Swap(&other->origdestipaddr_);
  std::swap(tos_, other->tos_);
  std::swap(length_, other->length_);
  std::swap(protocol_, other->protocol_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoIpHeader::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoIpHeader

// uint32 tos = 1;
void ProtoIpHeader::clear_tos() {
  tos_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::tos() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.tos)
  return tos_;
}
void ProtoIpHeader::set_tos(::google::protobuf::uint32 value) {
  
  tos_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.tos)
}

// uint32 length = 2;
void ProtoIpHeader::clear_length() {
  length_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::length() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.length)
  return length_;
}
void ProtoIpHeader::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.length)
}

// uint32 protocol = 3;
void ProtoIpHeader::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 ProtoIpHeader::protocol() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.protocol)
  return protocol_;
}
void ProtoIpHeader::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.protocol)
}

// string origSourceIPAddr = 4;
void ProtoIpHeader::clear_origsourceipaddr() {
  origsourceipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoIpHeader::origsourceipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.origSourceIPAddr)
  return origsourceipaddr_.GetNoArena();
}
void ProtoIpHeader::set_origsourceipaddr(const ::std::string& value) {
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.origSourceIPAddr)
}
#if LANG_CXX11
void ProtoIpHeader::set_origsourceipaddr(::std::string&& value) {
  
  origsourceipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoIpHeader.origSourceIPAddr)
}
#endif
void ProtoIpHeader::set_origsourceipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoIpHeader.origSourceIPAddr)
}
void ProtoIpHeader::set_origsourceipaddr(const char* value, size_t size) {
  
  origsourceipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoIpHeader.origSourceIPAddr)
}
::std::string* ProtoIpHeader::mutable_origsourceipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoIpHeader.origSourceIPAddr)
  return origsourceipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoIpHeader::release_origsourceipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoIpHeader.origSourceIPAddr)
  
  return origsourceipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_allocated_origsourceipaddr(::std::string* origsourceipaddr) {
  if (origsourceipaddr != NULL) {
    
  } else {
    
  }
  origsourceipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origsourceipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoIpHeader.origSourceIPAddr)
}

// string origDestIPAddr = 5;
void ProtoIpHeader::clear_origdestipaddr() {
  origdestipaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoIpHeader::origdestipaddr() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoIpHeader.origDestIPAddr)
  return origdestipaddr_.GetNoArena();
}
void ProtoIpHeader::set_origdestipaddr(const ::std::string& value) {
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoIpHeader.origDestIPAddr)
}
#if LANG_CXX11
void ProtoIpHeader::set_origdestipaddr(::std::string&& value) {
  
  origdestipaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoIpHeader.origDestIPAddr)
}
#endif
void ProtoIpHeader::set_origdestipaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoIpHeader.origDestIPAddr)
}
void ProtoIpHeader::set_origdestipaddr(const char* value, size_t size) {
  
  origdestipaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoIpHeader.origDestIPAddr)
}
::std::string* ProtoIpHeader::mutable_origdestipaddr() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoIpHeader.origDestIPAddr)
  return origdestipaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoIpHeader::release_origdestipaddr() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoIpHeader.origDestIPAddr)
  
  return origdestipaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoIpHeader::set_allocated_origdestipaddr(::std::string* origdestipaddr) {
  if (origdestipaddr != NULL) {
    
  } else {
    
  }
  origdestipaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origdestipaddr);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoIpHeader.origDestIPAddr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoDatagramInfo::kSourcePortFieldNumber;
const int ProtoDatagramInfo::kDestPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoDatagramInfo::ProtoDatagramInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoDatagramInfo)
}
ProtoDatagramInfo::ProtoDatagramInfo(const ProtoDatagramInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sourceport_, &from.sourceport_,
    reinterpret_cast<char*>(&destport_) -
    reinterpret_cast<char*>(&sourceport_) + sizeof(destport_));
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoDatagramInfo)
}

void ProtoDatagramInfo::SharedCtor() {
  ::memset(&sourceport_, 0, reinterpret_cast<char*>(&destport_) -
    reinterpret_cast<char*>(&sourceport_) + sizeof(destport_));
  _cached_size_ = 0;
}

ProtoDatagramInfo::~ProtoDatagramInfo() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoDatagramInfo)
  SharedDtor();
}

void ProtoDatagramInfo::SharedDtor() {
}

void ProtoDatagramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDatagramInfo::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoDatagramInfo& ProtoDatagramInfo::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoDatagramInfo* ProtoDatagramInfo::New(::google::protobuf::Arena* arena) const {
  ProtoDatagramInfo* n = new ProtoDatagramInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoDatagramInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoDatagramInfo)
  ::memset(&sourceport_, 0, reinterpret_cast<char*>(&destport_) -
    reinterpret_cast<char*>(&sourceport_) + sizeof(destport_));
}

bool ProtoDatagramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoDatagramInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sourcePort = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 destPort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoDatagramInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoDatagramInfo)
  return false;
#undef DO_
}

void ProtoDatagramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoDatagramInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceport(), output);
  }

  // uint32 destPort = 2;
  if (this->destport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destport(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoDatagramInfo)
}

::google::protobuf::uint8* ProtoDatagramInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoDatagramInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceport(), target);
  }

  // uint32 destPort = 2;
  if (this->destport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destport(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoDatagramInfo)
  return target;
}

size_t ProtoDatagramInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoDatagramInfo)
  size_t total_size = 0;

  // uint32 sourcePort = 1;
  if (this->sourceport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sourceport());
  }

  // uint32 destPort = 2;
  if (this->destport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->destport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDatagramInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoDatagramInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoDatagramInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoDatagramInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoDatagramInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoDatagramInfo)
    MergeFrom(*source);
  }
}

void ProtoDatagramInfo::MergeFrom(const ProtoDatagramInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoDatagramInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sourceport() != 0) {
    set_sourceport(from.sourceport());
  }
  if (from.destport() != 0) {
    set_destport(from.destport());
  }
}

void ProtoDatagramInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoDatagramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDatagramInfo::CopyFrom(const ProtoDatagramInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoDatagramInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDatagramInfo::IsInitialized() const {
  return true;
}

void ProtoDatagramInfo::Swap(ProtoDatagramInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoDatagramInfo::InternalSwap(ProtoDatagramInfo* other) {
  std::swap(sourceport_, other->sourceport_);
  std::swap(destport_, other->destport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoDatagramInfo::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoDatagramInfo

// uint32 sourcePort = 1;
void ProtoDatagramInfo::clear_sourceport() {
  sourceport_ = 0u;
}
::google::protobuf::uint32 ProtoDatagramInfo::sourceport() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoDatagramInfo.sourcePort)
  return sourceport_;
}
void ProtoDatagramInfo::set_sourceport(::google::protobuf::uint32 value) {
  
  sourceport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoDatagramInfo.sourcePort)
}

// uint32 destPort = 2;
void ProtoDatagramInfo::clear_destport() {
  destport_ = 0u;
}
::google::protobuf::uint32 ProtoDatagramInfo::destport() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoDatagramInfo.destPort)
  return destport_;
}
void ProtoDatagramInfo::set_destport(::google::protobuf::uint32 value) {
  
  destport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoDatagramInfo.destPort)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoICMPTime::kOriginateTimestampFieldNumber;
const int ProtoICMPTime::kReceiveTimestampFieldNumber;
const int ProtoICMPTime::kTransmitTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoICMPTime::ProtoICMPTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoICMPTime)
}
ProtoICMPTime::ProtoICMPTime(const ProtoICMPTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&originatetimestamp_, &from.originatetimestamp_,
    reinterpret_cast<char*>(&transmittimestamp_) -
    reinterpret_cast<char*>(&originatetimestamp_) + sizeof(transmittimestamp_));
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoICMPTime)
}

void ProtoICMPTime::SharedCtor() {
  ::memset(&originatetimestamp_, 0, reinterpret_cast<char*>(&transmittimestamp_) -
    reinterpret_cast<char*>(&originatetimestamp_) + sizeof(transmittimestamp_));
  _cached_size_ = 0;
}

ProtoICMPTime::~ProtoICMPTime() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoICMPTime)
  SharedDtor();
}

void ProtoICMPTime::SharedDtor() {
}

void ProtoICMPTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoICMPTime::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoICMPTime& ProtoICMPTime::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoICMPTime* ProtoICMPTime::New(::google::protobuf::Arena* arena) const {
  ProtoICMPTime* n = new ProtoICMPTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoICMPTime::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoICMPTime)
  ::memset(&originatetimestamp_, 0, reinterpret_cast<char*>(&transmittimestamp_) -
    reinterpret_cast<char*>(&originatetimestamp_) + sizeof(transmittimestamp_));
}

bool ProtoICMPTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoICMPTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 originateTimestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiveTimestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transmitTimestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmittimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoICMPTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoICMPTime)
  return false;
#undef DO_
}

void ProtoICMPTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoICMPTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->originatetimestamp(), output);
  }

  // uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->receivetimestamp(), output);
  }

  // uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->transmittimestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoICMPTime)
}

::google::protobuf::uint8* ProtoICMPTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoICMPTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->originatetimestamp(), target);
  }

  // uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->receivetimestamp(), target);
  }

  // uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->transmittimestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoICMPTime)
  return target;
}

size_t ProtoICMPTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoICMPTime)
  size_t total_size = 0;

  // uint32 originateTimestamp = 1;
  if (this->originatetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->originatetimestamp());
  }

  // uint32 receiveTimestamp = 2;
  if (this->receivetimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receivetimestamp());
  }

  // uint32 transmitTimestamp = 3;
  if (this->transmittimestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transmittimestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoICMPTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoICMPTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoICMPTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoICMPTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoICMPTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoICMPTime)
    MergeFrom(*source);
  }
}

void ProtoICMPTime::MergeFrom(const ProtoICMPTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoICMPTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.originatetimestamp() != 0) {
    set_originatetimestamp(from.originatetimestamp());
  }
  if (from.receivetimestamp() != 0) {
    set_receivetimestamp(from.receivetimestamp());
  }
  if (from.transmittimestamp() != 0) {
    set_transmittimestamp(from.transmittimestamp());
  }
}

void ProtoICMPTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoICMPTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoICMPTime::CopyFrom(const ProtoICMPTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoICMPTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoICMPTime::IsInitialized() const {
  return true;
}

void ProtoICMPTime::Swap(ProtoICMPTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoICMPTime::InternalSwap(ProtoICMPTime* other) {
  std::swap(originatetimestamp_, other->originatetimestamp_);
  std::swap(receivetimestamp_, other->receivetimestamp_);
  std::swap(transmittimestamp_, other->transmittimestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoICMPTime::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoICMPTime

// uint32 originateTimestamp = 1;
void ProtoICMPTime::clear_originatetimestamp() {
  originatetimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::originatetimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.originateTimestamp)
  return originatetimestamp_;
}
void ProtoICMPTime::set_originatetimestamp(::google::protobuf::uint32 value) {
  
  originatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.originateTimestamp)
}

// uint32 receiveTimestamp = 2;
void ProtoICMPTime::clear_receivetimestamp() {
  receivetimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::receivetimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.receiveTimestamp)
  return receivetimestamp_;
}
void ProtoICMPTime::set_receivetimestamp(::google::protobuf::uint32 value) {
  
  receivetimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.receiveTimestamp)
}

// uint32 transmitTimestamp = 3;
void ProtoICMPTime::clear_transmittimestamp() {
  transmittimestamp_ = 0u;
}
::google::protobuf::uint32 ProtoICMPTime::transmittimestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoICMPTime.transmitTimestamp)
  return transmittimestamp_;
}
void ProtoICMPTime::set_transmittimestamp(::google::protobuf::uint32 value) {
  
  transmittimestamp_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoICMPTime.transmitTimestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoExtraAddresses::kIPAddressFieldNumber;
const int ProtoExtraAddresses::kTimesRepeatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoExtraAddresses::ProtoExtraAddresses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icmpinfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.ProtoExtraAddresses)
}
ProtoExtraAddresses::ProtoExtraAddresses(const ProtoExtraAddresses& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  timesrepeated_ = from.timesrepeated_;
  // @@protoc_insertion_point(copy_constructor:netsensor.ProtoExtraAddresses)
}

void ProtoExtraAddresses::SharedCtor() {
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timesrepeated_ = 0u;
  _cached_size_ = 0;
}

ProtoExtraAddresses::~ProtoExtraAddresses() {
  // @@protoc_insertion_point(destructor:netsensor.ProtoExtraAddresses)
  SharedDtor();
}

void ProtoExtraAddresses::SharedDtor() {
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoExtraAddresses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoExtraAddresses::descriptor() {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoExtraAddresses& ProtoExtraAddresses::default_instance() {
  protobuf_icmpinfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtoExtraAddresses* ProtoExtraAddresses::New(::google::protobuf::Arena* arena) const {
  ProtoExtraAddresses* n = new ProtoExtraAddresses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoExtraAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.ProtoExtraAddresses)
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timesrepeated_ = 0u;
}

bool ProtoExtraAddresses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.ProtoExtraAddresses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string IPAddress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.ProtoExtraAddresses.IPAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timesRepeated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timesrepeated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.ProtoExtraAddresses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.ProtoExtraAddresses)
  return false;
#undef DO_
}

void ProtoExtraAddresses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.ProtoExtraAddresses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoExtraAddresses.IPAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ipaddress(), output);
  }

  // uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timesrepeated(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.ProtoExtraAddresses)
}

::google::protobuf::uint8* ProtoExtraAddresses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.ProtoExtraAddresses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.ProtoExtraAddresses.IPAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddress(), target);
  }

  // uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timesrepeated(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.ProtoExtraAddresses)
  return target;
}

size_t ProtoExtraAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.ProtoExtraAddresses)
  size_t total_size = 0;

  // string IPAddress = 1;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // uint32 timesRepeated = 2;
  if (this->timesrepeated() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timesrepeated());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoExtraAddresses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.ProtoExtraAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoExtraAddresses* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoExtraAddresses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.ProtoExtraAddresses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.ProtoExtraAddresses)
    MergeFrom(*source);
  }
}

void ProtoExtraAddresses::MergeFrom(const ProtoExtraAddresses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.ProtoExtraAddresses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.timesrepeated() != 0) {
    set_timesrepeated(from.timesrepeated());
  }
}

void ProtoExtraAddresses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.ProtoExtraAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoExtraAddresses::CopyFrom(const ProtoExtraAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.ProtoExtraAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoExtraAddresses::IsInitialized() const {
  return true;
}

void ProtoExtraAddresses::Swap(ProtoExtraAddresses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoExtraAddresses::InternalSwap(ProtoExtraAddresses* other) {
  ipaddress_.Swap(&other->ipaddress_);
  std::swap(timesrepeated_, other->timesrepeated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoExtraAddresses::GetMetadata() const {
  protobuf_icmpinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icmpinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoExtraAddresses

// string IPAddress = 1;
void ProtoExtraAddresses::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtoExtraAddresses::ipaddress() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoExtraAddresses.IPAddress)
  return ipaddress_.GetNoArena();
}
void ProtoExtraAddresses::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.ProtoExtraAddresses.IPAddress)
}
#if LANG_CXX11
void ProtoExtraAddresses::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.ProtoExtraAddresses.IPAddress)
}
#endif
void ProtoExtraAddresses::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.ProtoExtraAddresses.IPAddress)
}
void ProtoExtraAddresses::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.ProtoExtraAddresses.IPAddress)
}
::std::string* ProtoExtraAddresses::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.ProtoExtraAddresses.IPAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtoExtraAddresses::release_ipaddress() {
  // @@protoc_insertion_point(field_release:netsensor.ProtoExtraAddresses.IPAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtoExtraAddresses::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:netsensor.ProtoExtraAddresses.IPAddress)
}

// uint32 timesRepeated = 2;
void ProtoExtraAddresses::clear_timesrepeated() {
  timesrepeated_ = 0u;
}
::google::protobuf::uint32 ProtoExtraAddresses::timesrepeated() const {
  // @@protoc_insertion_point(field_get:netsensor.ProtoExtraAddresses.timesRepeated)
  return timesrepeated_;
}
void ProtoExtraAddresses::set_timesrepeated(::google::protobuf::uint32 value) {
  
  timesrepeated_ = value;
  // @@protoc_insertion_point(field_set:netsensor.ProtoExtraAddresses.timesRepeated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
