// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {
class TrafficByInterfaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficByInterface> {
} _TrafficByInterface_default_instance_;
class MicroflowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Microflow> {
} _Microflow_default_instance_;
class StatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stat> {
} _Stat_default_instance_;
class AverageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Average> {
} _Average_default_instance_;

namespace protobuf_traffic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, monitoringinterface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficByInterface, microflows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, ipsrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, ipdst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Microflow, latency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, stattype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, srcport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, dstport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, averages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Average, observed_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TrafficByInterface)},
  { 7, -1, sizeof(Microflow)},
  { 16, -1, sizeof(Stat)},
  { 26, -1, sizeof(Average)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficByInterface_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Microflow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Average_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "traffic.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TrafficByInterface_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Microflow_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Stat_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Average_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::netsensor::protobuf_prefix_2eproto::InitDefaults();
  ::netsensor::protobuf_datatype_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _TrafficByInterface_default_instance_.DefaultConstruct();
  _Microflow_default_instance_.DefaultConstruct();
  _Stat_default_instance_.DefaultConstruct();
  _Average_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rtraffic.proto\022\tnetsensor\032\014prefix.proto"
      "\032\016datatype.proto\032\037google/protobuf/timest"
      "amp.proto\"[\n\022TrafficByInterface\022\033\n\023monit"
      "oringInterface\030\001 \001(\t\022(\n\nmicroflows\030\002 \003(\013"
      "2\024.netsensor.Microflow\"Z\n\tMicroflow\022\r\n\005i"
      "pSrc\030\001 \001(\r\022\r\n\005ipDst\030\002 \001(\r\022\036\n\005stats\030\003 \003(\013"
      "2\017.netsensor.Stat\022\017\n\007latency\030\004 \001(\r\"\207\001\n\004S"
      "tat\022%\n\010statType\030\001 \001(\0162\023.netsensor.StatTy"
      "pe\022\020\n\010protocol\030\002 \001(\t\022\017\n\007srcPort\030\003 \001(\r\022\017\n"
      "\007dstPort\030\004 \001(\r\022$\n\010averages\030\005 \003(\0132\022.netse"
      "nsor.Average\"r\n\007Average\022\022\n\nresolution\030\001 "
      "\001(\r\022!\n\006prefix\030\002 \001(\0162\021.netsensor.Prefix\022\014"
      "\n\004sent\030\003 \001(\r\022\020\n\010received\030\004 \001(\r\022\020\n\010observ"
      "ed\030\005 \001(\rB>\n\036us.ihmc.ddam.sensors.netsens"
      "orB\014TrafficProtoP\001Z\tnetsensor\240\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  ::netsensor::protobuf_prefix_2eproto::AddDescriptors();
  ::netsensor::protobuf_datatype_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_traffic_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficByInterface::kMonitoringInterfaceFieldNumber;
const int TrafficByInterface::kMicroflowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficByInterface::TrafficByInterface()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.TrafficByInterface)
}
TrafficByInterface::TrafficByInterface(const TrafficByInterface& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      microflows_(from.microflows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.monitoringinterface().size() > 0) {
    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
  // @@protoc_insertion_point(copy_constructor:netsensor.TrafficByInterface)
}

void TrafficByInterface::SharedCtor() {
  monitoringinterface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

TrafficByInterface::~TrafficByInterface() {
  // @@protoc_insertion_point(destructor:netsensor.TrafficByInterface)
  SharedDtor();
}

void TrafficByInterface::SharedDtor() {
  monitoringinterface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficByInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficByInterface::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficByInterface& TrafficByInterface::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficByInterface* TrafficByInterface::New(::google::protobuf::Arena* arena) const {
  TrafficByInterface* n = new TrafficByInterface;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficByInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.TrafficByInterface)
  microflows_.Clear();
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TrafficByInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.TrafficByInterface)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string monitoringInterface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitoringinterface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitoringinterface().data(), this->monitoringinterface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.TrafficByInterface.monitoringInterface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Microflow microflows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_microflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.TrafficByInterface)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.TrafficByInterface)
  return false;
#undef DO_
}

void TrafficByInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.TrafficByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->monitoringinterface(), output);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0, n = this->microflows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->microflows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.TrafficByInterface)
}

::google::protobuf::uint8* TrafficByInterface::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.TrafficByInterface)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitoringinterface().data(), this->monitoringinterface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.TrafficByInterface.monitoringInterface");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->monitoringinterface(), target);
  }

  // repeated .netsensor.Microflow microflows = 2;
  for (unsigned int i = 0, n = this->microflows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->microflows(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.TrafficByInterface)
  return target;
}

size_t TrafficByInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.TrafficByInterface)
  size_t total_size = 0;

  // repeated .netsensor.Microflow microflows = 2;
  {
    unsigned int count = this->microflows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->microflows(i));
    }
  }

  // string monitoringInterface = 1;
  if (this->monitoringinterface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitoringinterface());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficByInterface::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.TrafficByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficByInterface* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficByInterface>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.TrafficByInterface)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.TrafficByInterface)
    MergeFrom(*source);
  }
}

void TrafficByInterface::MergeFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.TrafficByInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  microflows_.MergeFrom(from.microflows_);
  if (from.monitoringinterface().size() > 0) {

    monitoringinterface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitoringinterface_);
  }
}

void TrafficByInterface::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficByInterface::CopyFrom(const TrafficByInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.TrafficByInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficByInterface::IsInitialized() const {
  return true;
}

void TrafficByInterface::Swap(TrafficByInterface* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficByInterface::InternalSwap(TrafficByInterface* other) {
  microflows_.InternalSwap(&other->microflows_);
  monitoringinterface_.Swap(&other->monitoringinterface_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficByInterface::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficByInterface

// string monitoringInterface = 1;
void TrafficByInterface::clear_monitoringinterface() {
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrafficByInterface::monitoringinterface() const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.GetNoArena();
}
void TrafficByInterface::set_monitoringinterface(const ::std::string& value) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.TrafficByInterface.monitoringInterface)
}
#if LANG_CXX11
void TrafficByInterface::set_monitoringinterface(::std::string&& value) {
  
  monitoringinterface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.TrafficByInterface.monitoringInterface)
}
#endif
void TrafficByInterface::set_monitoringinterface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.TrafficByInterface.monitoringInterface)
}
void TrafficByInterface::set_monitoringinterface(const char* value, size_t size) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.TrafficByInterface.monitoringInterface)
}
::std::string* TrafficByInterface::mutable_monitoringinterface() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficByInterface::release_monitoringinterface() {
  // @@protoc_insertion_point(field_release:netsensor.TrafficByInterface.monitoringInterface)
  
  return monitoringinterface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficByInterface::set_allocated_monitoringinterface(::std::string* monitoringinterface) {
  if (monitoringinterface != NULL) {
    
  } else {
    
  }
  monitoringinterface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoringinterface);
  // @@protoc_insertion_point(field_set_allocated:netsensor.TrafficByInterface.monitoringInterface)
}

// repeated .netsensor.Microflow microflows = 2;
int TrafficByInterface::microflows_size() const {
  return microflows_.size();
}
void TrafficByInterface::clear_microflows() {
  microflows_.Clear();
}
const ::netsensor::Microflow& TrafficByInterface::microflows(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.microflows)
  return microflows_.Get(index);
}
::netsensor::Microflow* TrafficByInterface::mutable_microflows(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.microflows)
  return microflows_.Mutable(index);
}
::netsensor::Microflow* TrafficByInterface::add_microflows() {
  // @@protoc_insertion_point(field_add:netsensor.TrafficByInterface.microflows)
  return microflows_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >*
TrafficByInterface::mutable_microflows() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.TrafficByInterface.microflows)
  return &microflows_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >&
TrafficByInterface::microflows() const {
  // @@protoc_insertion_point(field_list:netsensor.TrafficByInterface.microflows)
  return microflows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Microflow::kIpSrcFieldNumber;
const int Microflow::kIpDstFieldNumber;
const int Microflow::kStatsFieldNumber;
const int Microflow::kLatencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Microflow::Microflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Microflow)
}
Microflow::Microflow(const Microflow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stats_(from.stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipsrc_, &from.ipsrc_,
    reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&ipsrc_) + sizeof(latency_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Microflow)
}

void Microflow::SharedCtor() {
  ::memset(&ipsrc_, 0, reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&ipsrc_) + sizeof(latency_));
  _cached_size_ = 0;
}

Microflow::~Microflow() {
  // @@protoc_insertion_point(destructor:netsensor.Microflow)
  SharedDtor();
}

void Microflow::SharedDtor() {
}

void Microflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Microflow::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Microflow& Microflow::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Microflow* Microflow::New(::google::protobuf::Arena* arena) const {
  Microflow* n = new Microflow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Microflow::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Microflow)
  stats_.Clear();
  ::memset(&ipsrc_, 0, reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&ipsrc_) + sizeof(latency_));
}

bool Microflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Microflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ipSrc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipsrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ipDst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipdst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Stat stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 latency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Microflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Microflow)
  return false;
#undef DO_
}

void Microflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Microflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ipsrc(), output);
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ipdst(), output);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stats(i), output);
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latency(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Microflow)
}

::google::protobuf::uint8* Microflow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Microflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ipsrc(), target);
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ipdst(), target);
  }

  // repeated .netsensor.Stat stats = 3;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stats(i), deterministic, target);
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Microflow)
  return target;
}

size_t Microflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Microflow)
  size_t total_size = 0;

  // repeated .netsensor.Stat stats = 3;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  // uint32 ipSrc = 1;
  if (this->ipsrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipsrc());
  }

  // uint32 ipDst = 2;
  if (this->ipdst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipdst());
  }

  // uint32 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Microflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Microflow)
  GOOGLE_DCHECK_NE(&from, this);
  const Microflow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Microflow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Microflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Microflow)
    MergeFrom(*source);
  }
}

void Microflow::MergeFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Microflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.ipsrc() != 0) {
    set_ipsrc(from.ipsrc());
  }
  if (from.ipdst() != 0) {
    set_ipdst(from.ipdst());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
}

void Microflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Microflow::CopyFrom(const Microflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Microflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Microflow::IsInitialized() const {
  return true;
}

void Microflow::Swap(Microflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Microflow::InternalSwap(Microflow* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(ipsrc_, other->ipsrc_);
  std::swap(ipdst_, other->ipdst_);
  std::swap(latency_, other->latency_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Microflow::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Microflow

// uint32 ipSrc = 1;
void Microflow::clear_ipsrc() {
  ipsrc_ = 0u;
}
::google::protobuf::uint32 Microflow::ipsrc() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipSrc)
  return ipsrc_;
}
void Microflow::set_ipsrc(::google::protobuf::uint32 value) {
  
  ipsrc_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipSrc)
}

// uint32 ipDst = 2;
void Microflow::clear_ipdst() {
  ipdst_ = 0u;
}
::google::protobuf::uint32 Microflow::ipdst() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipDst)
  return ipdst_;
}
void Microflow::set_ipdst(::google::protobuf::uint32 value) {
  
  ipdst_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipDst)
}

// repeated .netsensor.Stat stats = 3;
int Microflow::stats_size() const {
  return stats_.size();
}
void Microflow::clear_stats() {
  stats_.Clear();
}
const ::netsensor::Stat& Microflow::stats(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.stats)
  return stats_.Get(index);
}
::netsensor::Stat* Microflow::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Microflow.stats)
  return stats_.Mutable(index);
}
::netsensor::Stat* Microflow::add_stats() {
  // @@protoc_insertion_point(field_add:netsensor.Microflow.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Stat >*
Microflow::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Microflow.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >&
Microflow::stats() const {
  // @@protoc_insertion_point(field_list:netsensor.Microflow.stats)
  return stats_;
}

// uint32 latency = 4;
void Microflow::clear_latency() {
  latency_ = 0u;
}
::google::protobuf::uint32 Microflow::latency() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.latency)
  return latency_;
}
void Microflow::set_latency(::google::protobuf::uint32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.latency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kStatTypeFieldNumber;
const int Stat::kProtocolFieldNumber;
const int Stat::kSrcPortFieldNumber;
const int Stat::kDstPortFieldNumber;
const int Stat::kAveragesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Stat)
}
Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      averages_(from.averages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  ::memcpy(&stattype_, &from.stattype_,
    reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&stattype_) + sizeof(dstport_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Stat)
}

void Stat::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stattype_, 0, reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&stattype_) + sizeof(dstport_));
  _cached_size_ = 0;
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:netsensor.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stat& Stat::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Stat)
  averages_.Clear();
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stattype_, 0, reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&stattype_) + sizeof(dstport_));
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netsensor.StatType statType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stattype(static_cast< ::netsensor::StatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.Stat.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 srcPort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dstPort = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Average averages = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_averages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stattype(), output);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcport(), output);
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstport(), output);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0, n = this->averages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->averages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Stat)
}

::google::protobuf::uint8* Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stattype(), target);
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Stat.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcport(), target);
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstport(), target);
  }

  // repeated .netsensor.Average averages = 5;
  for (unsigned int i = 0, n = this->averages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->averages(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Stat)
  return target;
}

size_t Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Stat)
  size_t total_size = 0;

  // repeated .netsensor.Average averages = 5;
  {
    unsigned int count = this->averages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->averages(i));
    }
  }

  // string protocol = 2;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // .netsensor.StatType statType = 1;
  if (this->stattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stattype());
  }

  // uint32 srcPort = 3;
  if (this->srcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcport());
  }

  // uint32 dstPort = 4;
  if (this->dstport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Stat)
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  averages_.MergeFrom(from.averages_);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.stattype() != 0) {
    set_stattype(from.stattype());
  }
  if (from.srcport() != 0) {
    set_srcport(from.srcport());
  }
  if (from.dstport() != 0) {
    set_dstport(from.dstport());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  averages_.InternalSwap(&other->averages_);
  protocol_.Swap(&other->protocol_);
  std::swap(stattype_, other->stattype_);
  std::swap(srcport_, other->srcport_);
  std::swap(dstport_, other->dstport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// .netsensor.StatType statType = 1;
void Stat::clear_stattype() {
  stattype_ = 0;
}
::netsensor::StatType Stat::stattype() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.statType)
  return static_cast< ::netsensor::StatType >(stattype_);
}
void Stat::set_stattype(::netsensor::StatType value) {
  
  stattype_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.statType)
}

// string protocol = 2;
void Stat::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Stat::protocol() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.protocol)
  return protocol_.GetNoArena();
}
void Stat::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.Stat.protocol)
}
#if LANG_CXX11
void Stat::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.Stat.protocol)
}
#endif
void Stat::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.Stat.protocol)
}
void Stat::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.Stat.protocol)
}
::std::string* Stat::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.Stat.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stat::release_protocol() {
  // @@protoc_insertion_point(field_release:netsensor.Stat.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stat::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:netsensor.Stat.protocol)
}

// uint32 srcPort = 3;
void Stat::clear_srcport() {
  srcport_ = 0u;
}
::google::protobuf::uint32 Stat::srcport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.srcPort)
  return srcport_;
}
void Stat::set_srcport(::google::protobuf::uint32 value) {
  
  srcport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.srcPort)
}

// uint32 dstPort = 4;
void Stat::clear_dstport() {
  dstport_ = 0u;
}
::google::protobuf::uint32 Stat::dstport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.dstPort)
  return dstport_;
}
void Stat::set_dstport(::google::protobuf::uint32 value) {
  
  dstport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.dstPort)
}

// repeated .netsensor.Average averages = 5;
int Stat::averages_size() const {
  return averages_.size();
}
void Stat::clear_averages() {
  averages_.Clear();
}
const ::netsensor::Average& Stat::averages(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.averages)
  return averages_.Get(index);
}
::netsensor::Average* Stat::mutable_averages(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Stat.averages)
  return averages_.Mutable(index);
}
::netsensor::Average* Stat::add_averages() {
  // @@protoc_insertion_point(field_add:netsensor.Stat.averages)
  return averages_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Average >*
Stat::mutable_averages() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Stat.averages)
  return &averages_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Average >&
Stat::averages() const {
  // @@protoc_insertion_point(field_list:netsensor.Stat.averages)
  return averages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Average::kResolutionFieldNumber;
const int Average::kPrefixFieldNumber;
const int Average::kSentFieldNumber;
const int Average::kReceivedFieldNumber;
const int Average::kObservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Average::Average()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Average)
}
Average::Average(const Average& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resolution_, &from.resolution_,
    reinterpret_cast<char*>(&observed_) -
    reinterpret_cast<char*>(&resolution_) + sizeof(observed_));
  // @@protoc_insertion_point(copy_constructor:netsensor.Average)
}

void Average::SharedCtor() {
  ::memset(&resolution_, 0, reinterpret_cast<char*>(&observed_) -
    reinterpret_cast<char*>(&resolution_) + sizeof(observed_));
  _cached_size_ = 0;
}

Average::~Average() {
  // @@protoc_insertion_point(destructor:netsensor.Average)
  SharedDtor();
}

void Average::SharedDtor() {
}

void Average::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Average::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Average& Average::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Average* Average::New(::google::protobuf::Arena* arena) const {
  Average* n = new Average;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Average::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Average)
  ::memset(&resolution_, 0, reinterpret_cast<char*>(&observed_) -
    reinterpret_cast<char*>(&resolution_) + sizeof(observed_));
}

bool Average::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Average)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .netsensor.Prefix prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_prefix(static_cast< ::netsensor::Prefix >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 received = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 observed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &observed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Average)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Average)
  return false;
#undef DO_
}

void Average::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Average)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resolution(), output);
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->prefix(), output);
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sent(), output);
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->received(), output);
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->observed(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Average)
}

::google::protobuf::uint8* Average::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Average)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resolution(), target);
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->prefix(), target);
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sent(), target);
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->received(), target);
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->observed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Average)
  return target;
}

size_t Average::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Average)
  size_t total_size = 0;

  // uint32 resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resolution());
  }

  // .netsensor.Prefix prefix = 2;
  if (this->prefix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->prefix());
  }

  // uint32 sent = 3;
  if (this->sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent());
  }

  // uint32 received = 4;
  if (this->received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received());
  }

  // uint32 observed = 5;
  if (this->observed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->observed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Average::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Average)
  GOOGLE_DCHECK_NE(&from, this);
  const Average* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Average>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Average)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Average)
    MergeFrom(*source);
  }
}

void Average::MergeFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Average)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.prefix() != 0) {
    set_prefix(from.prefix());
  }
  if (from.sent() != 0) {
    set_sent(from.sent());
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.observed() != 0) {
    set_observed(from.observed());
  }
}

void Average::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Average::CopyFrom(const Average& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Average)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Average::IsInitialized() const {
  return true;
}

void Average::Swap(Average* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Average::InternalSwap(Average* other) {
  std::swap(resolution_, other->resolution_);
  std::swap(prefix_, other->prefix_);
  std::swap(sent_, other->sent_);
  std::swap(received_, other->received_);
  std::swap(observed_, other->observed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Average::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Average

// uint32 resolution = 1;
void Average::clear_resolution() {
  resolution_ = 0u;
}
::google::protobuf::uint32 Average::resolution() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.resolution)
  return resolution_;
}
void Average::set_resolution(::google::protobuf::uint32 value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.resolution)
}

// .netsensor.Prefix prefix = 2;
void Average::clear_prefix() {
  prefix_ = 0;
}
::netsensor::Prefix Average::prefix() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.prefix)
  return static_cast< ::netsensor::Prefix >(prefix_);
}
void Average::set_prefix(::netsensor::Prefix value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.prefix)
}

// uint32 sent = 3;
void Average::clear_sent() {
  sent_ = 0u;
}
::google::protobuf::uint32 Average::sent() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.sent)
  return sent_;
}
void Average::set_sent(::google::protobuf::uint32 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.sent)
}

// uint32 received = 4;
void Average::clear_received() {
  received_ = 0u;
}
::google::protobuf::uint32 Average::received() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.received)
  return received_;
}
void Average::set_received(::google::protobuf::uint32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.received)
}

// uint32 observed = 5;
void Average::clear_observed() {
  observed_ = 0u;
}
::google::protobuf::uint32 Average::observed() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.observed)
  return observed_;
}
void Average::set_observed(::google::protobuf::uint32 value) {
  
  observed_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.observed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
