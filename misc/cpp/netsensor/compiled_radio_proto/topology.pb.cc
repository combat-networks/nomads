// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netsensor {
class TopologyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Topology> {
} _Topology_default_instance_;
class HostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Host> {
} _Host_default_instance_;
class NetworkInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfo> {
} _NetworkInfo_default_instance_;

namespace protobuf_topology_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, networkinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, internals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, localgws_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, mac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, networkname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, networknetmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, interfaceip_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Topology)},
  { 8, -1, sizeof(Host)},
  { 15, -1, sizeof(NetworkInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Topology_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Host_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "topology.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Topology_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Host_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NetworkInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Topology_default_instance_.DefaultConstruct();
  _Host_default_instance_.DefaultConstruct();
  _NetworkInfo_default_instance_.DefaultConstruct();
  _Topology_default_instance_.get_mutable()->networkinfo_ = const_cast< ::netsensor::NetworkInfo*>(
      ::netsensor::NetworkInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016topology.proto\022\tnetsensor\"~\n\010Topology\022"
      "+\n\013networkInfo\030\001 \001(\0132\026.netsensor.Network"
      "Info\022\"\n\tinternals\030\002 \003(\0132\017.netsensor.Host"
      "\022!\n\010localGws\030\003 \003(\0132\017.netsensor.Host\"\037\n\004H"
      "ost\022\n\n\002ip\030\001 \001(\r\022\013\n\003mac\030\002 \001(\t\"O\n\013NetworkI"
      "nfo\022\023\n\013networkName\030\001 \001(\t\022\026\n\016networkNetma"
      "sk\030\002 \001(\t\022\023\n\013interfaceIp\030\003 \001(\rB\?\n\036us.ihmc"
      ".ddam.sensors.netsensorB\rTopologyProtoP\001"
      "Z\tnetsensor\240\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topology.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_topology_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topology::kNetworkInfoFieldNumber;
const int Topology::kInternalsFieldNumber;
const int Topology::kLocalGwsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topology::Topology()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_topology_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Topology)
}
Topology::Topology(const Topology& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      internals_(from.internals_),
      localgws_(from.localgws_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_networkinfo()) {
    networkinfo_ = new ::netsensor::NetworkInfo(*from.networkinfo_);
  } else {
    networkinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:netsensor.Topology)
}

void Topology::SharedCtor() {
  networkinfo_ = NULL;
  _cached_size_ = 0;
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:netsensor.Topology)
  SharedDtor();
}

void Topology::SharedDtor() {
  if (this != internal_default_instance()) {
    delete networkinfo_;
  }
}

void Topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Topology& Topology::default_instance() {
  protobuf_topology_2eproto::InitDefaults();
  return *internal_default_instance();
}

Topology* Topology::New(::google::protobuf::Arena* arena) const {
  Topology* n = new Topology;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Topology)
  internals_.Clear();
  localgws_.Clear();
  if (GetArenaNoVirtual() == NULL && networkinfo_ != NULL) {
    delete networkinfo_;
  }
  networkinfo_ = NULL;
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Topology)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netsensor.NetworkInfo networkInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networkinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Host internals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Host localGws = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_localgws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Topology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Topology)
  return false;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->networkinfo_, output);
  }

  // repeated .netsensor.Host internals = 2;
  for (unsigned int i = 0, n = this->internals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->internals(i), output);
  }

  // repeated .netsensor.Host localGws = 3;
  for (unsigned int i = 0, n = this->localgws_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->localgws(i), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Topology)
}

::google::protobuf::uint8* Topology::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->networkinfo_, deterministic, target);
  }

  // repeated .netsensor.Host internals = 2;
  for (unsigned int i = 0, n = this->internals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->internals(i), deterministic, target);
  }

  // repeated .netsensor.Host localGws = 3;
  for (unsigned int i = 0, n = this->localgws_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->localgws(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Topology)
  size_t total_size = 0;

  // repeated .netsensor.Host internals = 2;
  {
    unsigned int count = this->internals_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internals(i));
    }
  }

  // repeated .netsensor.Host localGws = 3;
  {
    unsigned int count = this->localgws_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localgws(i));
    }
  }

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->networkinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  const Topology* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Topology>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Topology)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internals_.MergeFrom(from.internals_);
  localgws_.MergeFrom(from.localgws_);
  if (from.has_networkinfo()) {
    mutable_networkinfo()->::netsensor::NetworkInfo::MergeFrom(from.networkinfo());
  }
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  return true;
}

void Topology::Swap(Topology* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Topology::InternalSwap(Topology* other) {
  internals_.InternalSwap(&other->internals_);
  localgws_.InternalSwap(&other->localgws_);
  std::swap(networkinfo_, other->networkinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Topology

// .netsensor.NetworkInfo networkInfo = 1;
bool Topology::has_networkinfo() const {
  return this != internal_default_instance() && networkinfo_ != NULL;
}
void Topology::clear_networkinfo() {
  if (GetArenaNoVirtual() == NULL && networkinfo_ != NULL) delete networkinfo_;
  networkinfo_ = NULL;
}
const ::netsensor::NetworkInfo& Topology::networkinfo() const {
  // @@protoc_insertion_point(field_get:netsensor.Topology.networkInfo)
  return networkinfo_ != NULL ? *networkinfo_
                         : *::netsensor::NetworkInfo::internal_default_instance();
}
::netsensor::NetworkInfo* Topology::mutable_networkinfo() {
  
  if (networkinfo_ == NULL) {
    networkinfo_ = new ::netsensor::NetworkInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.Topology.networkInfo)
  return networkinfo_;
}
::netsensor::NetworkInfo* Topology::release_networkinfo() {
  // @@protoc_insertion_point(field_release:netsensor.Topology.networkInfo)
  
  ::netsensor::NetworkInfo* temp = networkinfo_;
  networkinfo_ = NULL;
  return temp;
}
void Topology::set_allocated_networkinfo(::netsensor::NetworkInfo* networkinfo) {
  delete networkinfo_;
  networkinfo_ = networkinfo;
  if (networkinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.Topology.networkInfo)
}

// repeated .netsensor.Host internals = 2;
int Topology::internals_size() const {
  return internals_.size();
}
void Topology::clear_internals() {
  internals_.Clear();
}
const ::netsensor::Host& Topology::internals(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Topology.internals)
  return internals_.Get(index);
}
::netsensor::Host* Topology::mutable_internals(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Topology.internals)
  return internals_.Mutable(index);
}
::netsensor::Host* Topology::add_internals() {
  // @@protoc_insertion_point(field_add:netsensor.Topology.internals)
  return internals_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Host >*
Topology::mutable_internals() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Topology.internals)
  return &internals_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Host >&
Topology::internals() const {
  // @@protoc_insertion_point(field_list:netsensor.Topology.internals)
  return internals_;
}

// repeated .netsensor.Host localGws = 3;
int Topology::localgws_size() const {
  return localgws_.size();
}
void Topology::clear_localgws() {
  localgws_.Clear();
}
const ::netsensor::Host& Topology::localgws(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Topology.localGws)
  return localgws_.Get(index);
}
::netsensor::Host* Topology::mutable_localgws(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Topology.localGws)
  return localgws_.Mutable(index);
}
::netsensor::Host* Topology::add_localgws() {
  // @@protoc_insertion_point(field_add:netsensor.Topology.localGws)
  return localgws_.Add();
}
::google::protobuf::RepeatedPtrField< ::netsensor::Host >*
Topology::mutable_localgws() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Topology.localGws)
  return &localgws_;
}
const ::google::protobuf::RepeatedPtrField< ::netsensor::Host >&
Topology::localgws() const {
  // @@protoc_insertion_point(field_list:netsensor.Topology.localGws)
  return localgws_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Host::kIpFieldNumber;
const int Host::kMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Host::Host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_topology_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Host)
}
Host::Host(const Host& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ip_ = from.ip_;
  // @@protoc_insertion_point(copy_constructor:netsensor.Host)
}

void Host::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  _cached_size_ = 0;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:netsensor.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Host& Host::default_instance() {
  protobuf_topology_2eproto::InitDefaults();
  return *internal_default_instance();
}

Host* Host::New(::google::protobuf::Arena* arena) const {
  Host* n = new Host;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Host)
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Host)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.Host.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Host)
  return false;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // string mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Host.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.Host)
}

::google::protobuf::uint8* Host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // string mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Host.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Host)
  size_t total_size = 0;

  // string mac = 2;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // uint32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::Swap(Host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Host::InternalSwap(Host* other) {
  mac_.Swap(&other->mac_);
  std::swap(ip_, other->ip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Host

// uint32 ip = 1;
void Host::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Host::ip() const {
  // @@protoc_insertion_point(field_get:netsensor.Host.ip)
  return ip_;
}
void Host::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Host.ip)
}

// string mac = 2;
void Host::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Host::mac() const {
  // @@protoc_insertion_point(field_get:netsensor.Host.mac)
  return mac_.GetNoArena();
}
void Host::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.Host.mac)
}
#if LANG_CXX11
void Host::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.Host.mac)
}
#endif
void Host::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.Host.mac)
}
void Host::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.Host.mac)
}
::std::string* Host::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.Host.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Host::release_mac() {
  // @@protoc_insertion_point(field_release:netsensor.Host.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:netsensor.Host.mac)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInfo::kNetworkNameFieldNumber;
const int NetworkInfo::kNetworkNetmaskFieldNumber;
const int NetworkInfo::kInterfaceIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInfo::NetworkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_topology_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.networkname().size() > 0) {
    networkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networkname_);
  }
  networknetmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.networknetmask().size() > 0) {
    networknetmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networknetmask_);
  }
  interfaceip_ = from.interfaceip_;
  // @@protoc_insertion_point(copy_constructor:netsensor.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  networkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceip_ = 0u;
  _cached_size_ = 0;
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:netsensor.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  networkname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkInfo::descriptor() {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkInfo& NetworkInfo::default_instance() {
  protobuf_topology_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkInfo* NetworkInfo::New(::google::protobuf::Arena* arena) const {
  NetworkInfo* n = new NetworkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.NetworkInfo)
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceip_ = 0u;
}

bool NetworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.NetworkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string networkName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networkname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networkname().data(), this->networkname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.NetworkInfo.networkName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string networkNetmask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networknetmask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networknetmask().data(), this->networknetmask().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.NetworkInfo.networkNetmask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interfaceIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interfaceip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.NetworkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.NetworkInfo)
  return false;
#undef DO_
}

void NetworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string networkName = 1;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), this->networkname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->networkname(), output);
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networknetmask().data(), this->networknetmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkNetmask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->networknetmask(), output);
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->interfaceip(), output);
  }

  // @@protoc_insertion_point(serialize_end:netsensor.NetworkInfo)
}

::google::protobuf::uint8* NetworkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string networkName = 1;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), this->networkname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->networkname(), target);
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networknetmask().data(), this->networknetmask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkNetmask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->networknetmask(), target);
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->interfaceip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netsensor.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.NetworkInfo)
  size_t total_size = 0;

  // string networkName = 1;
  if (this->networkname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networkname());
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networknetmask());
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interfaceip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.NetworkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkname().size() > 0) {

    networkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networkname_);
  }
  if (from.networknetmask().size() > 0) {

    networknetmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networknetmask_);
  }
  if (from.interfaceip() != 0) {
    set_interfaceip(from.interfaceip());
  }
}

void NetworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::Swap(NetworkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInfo::InternalSwap(NetworkInfo* other) {
  networkname_.Swap(&other->networkname_);
  networknetmask_.Swap(&other->networknetmask_);
  std::swap(interfaceip_, other->interfaceip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkInfo::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInfo

// string networkName = 1;
void NetworkInfo::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkInfo::networkname() const {
  // @@protoc_insertion_point(field_get:netsensor.NetworkInfo.networkName)
  return networkname_.GetNoArena();
}
void NetworkInfo::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.NetworkInfo.networkName)
}
#if LANG_CXX11
void NetworkInfo::set_networkname(::std::string&& value) {
  
  networkname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.NetworkInfo.networkName)
}
#endif
void NetworkInfo::set_networkname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.NetworkInfo.networkName)
}
void NetworkInfo::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.NetworkInfo.networkName)
}
::std::string* NetworkInfo::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.NetworkInfo.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInfo::release_networkname() {
  // @@protoc_insertion_point(field_release:netsensor.NetworkInfo.networkName)
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInfo::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetworkInfo.networkName)
}

// string networkNetmask = 2;
void NetworkInfo::clear_networknetmask() {
  networknetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkInfo::networknetmask() const {
  // @@protoc_insertion_point(field_get:netsensor.NetworkInfo.networkNetmask)
  return networknetmask_.GetNoArena();
}
void NetworkInfo::set_networknetmask(const ::std::string& value) {
  
  networknetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.NetworkInfo.networkNetmask)
}
#if LANG_CXX11
void NetworkInfo::set_networknetmask(::std::string&& value) {
  
  networknetmask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.NetworkInfo.networkNetmask)
}
#endif
void NetworkInfo::set_networknetmask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networknetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.NetworkInfo.networkNetmask)
}
void NetworkInfo::set_networknetmask(const char* value, size_t size) {
  
  networknetmask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.NetworkInfo.networkNetmask)
}
::std::string* NetworkInfo::mutable_networknetmask() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.NetworkInfo.networkNetmask)
  return networknetmask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkInfo::release_networknetmask() {
  // @@protoc_insertion_point(field_release:netsensor.NetworkInfo.networkNetmask)
  
  return networknetmask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkInfo::set_allocated_networknetmask(::std::string* networknetmask) {
  if (networknetmask != NULL) {
    
  } else {
    
  }
  networknetmask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networknetmask);
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetworkInfo.networkNetmask)
}

// uint32 interfaceIp = 3;
void NetworkInfo::clear_interfaceip() {
  interfaceip_ = 0u;
}
::google::protobuf::uint32 NetworkInfo::interfaceip() const {
  // @@protoc_insertion_point(field_get:netsensor.NetworkInfo.interfaceIp)
  return interfaceip_;
}
void NetworkInfo::set_interfaceip(::google::protobuf::uint32 value) {
  
  interfaceip_ = value;
  // @@protoc_insertion_point(field_set:netsensor.NetworkInfo.interfaceIp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)
