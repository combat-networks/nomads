// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef PROTOBUF_traffic_2eproto__INCLUDED
#define PROTOBUF_traffic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prefix.pb.h"
#include "datatype.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace netsensor {
class Average;
class AverageDefaultTypeInternal;
extern AverageDefaultTypeInternal _Average_default_instance_;
class Microflow;
class MicroflowDefaultTypeInternal;
extern MicroflowDefaultTypeInternal _Microflow_default_instance_;
class Stat;
class StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
class TrafficByInterface;
class TrafficByInterfaceDefaultTypeInternal;
extern TrafficByInterfaceDefaultTypeInternal _TrafficByInterface_default_instance_;
}  // namespace netsensor

namespace netsensor {

namespace protobuf_traffic_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_traffic_2eproto

// ===================================================================

class TrafficByInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netsensor.TrafficByInterface) */ {
 public:
  TrafficByInterface();
  virtual ~TrafficByInterface();

  TrafficByInterface(const TrafficByInterface& from);

  inline TrafficByInterface& operator=(const TrafficByInterface& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficByInterface& default_instance();

  static inline const TrafficByInterface* internal_default_instance() {
    return reinterpret_cast<const TrafficByInterface*>(
               &_TrafficByInterface_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrafficByInterface* other);

  // implements Message ----------------------------------------------

  inline TrafficByInterface* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficByInterface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficByInterface& from);
  void MergeFrom(const TrafficByInterface& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficByInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .netsensor.Microflow microflows = 2;
  int microflows_size() const;
  void clear_microflows();
  static const int kMicroflowsFieldNumber = 2;
  const ::netsensor::Microflow& microflows(int index) const;
  ::netsensor::Microflow* mutable_microflows(int index);
  ::netsensor::Microflow* add_microflows();
  ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >*
      mutable_microflows();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >&
      microflows() const;

  // string monitoringInterface = 1;
  void clear_monitoringinterface();
  static const int kMonitoringInterfaceFieldNumber = 1;
  const ::std::string& monitoringinterface() const;
  void set_monitoringinterface(const ::std::string& value);
  #if LANG_CXX11
  void set_monitoringinterface(::std::string&& value);
  #endif
  void set_monitoringinterface(const char* value);
  void set_monitoringinterface(const char* value, size_t size);
  ::std::string* mutable_monitoringinterface();
  ::std::string* release_monitoringinterface();
  void set_allocated_monitoringinterface(::std::string* monitoringinterface);

  // @@protoc_insertion_point(class_scope:netsensor.TrafficByInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow > microflows_;
  ::google::protobuf::internal::ArenaStringPtr monitoringinterface_;
  mutable int _cached_size_;
  friend struct protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Microflow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netsensor.Microflow) */ {
 public:
  Microflow();
  virtual ~Microflow();

  Microflow(const Microflow& from);

  inline Microflow& operator=(const Microflow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Microflow& default_instance();

  static inline const Microflow* internal_default_instance() {
    return reinterpret_cast<const Microflow*>(
               &_Microflow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Microflow* other);

  // implements Message ----------------------------------------------

  inline Microflow* New() const PROTOBUF_FINAL { return New(NULL); }

  Microflow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Microflow& from);
  void MergeFrom(const Microflow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Microflow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .netsensor.Stat stats = 3;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  const ::netsensor::Stat& stats(int index) const;
  ::netsensor::Stat* mutable_stats(int index);
  ::netsensor::Stat* add_stats();
  ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >*
      mutable_stats();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >&
      stats() const;

  // uint32 ipSrc = 1;
  void clear_ipsrc();
  static const int kIpSrcFieldNumber = 1;
  ::google::protobuf::uint32 ipsrc() const;
  void set_ipsrc(::google::protobuf::uint32 value);

  // uint32 ipDst = 2;
  void clear_ipdst();
  static const int kIpDstFieldNumber = 2;
  ::google::protobuf::uint32 ipdst() const;
  void set_ipdst(::google::protobuf::uint32 value);

  // uint32 latency = 4;
  void clear_latency();
  static const int kLatencyFieldNumber = 4;
  ::google::protobuf::uint32 latency() const;
  void set_latency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netsensor.Microflow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::Stat > stats_;
  ::google::protobuf::uint32 ipsrc_;
  ::google::protobuf::uint32 ipdst_;
  ::google::protobuf::uint32 latency_;
  mutable int _cached_size_;
  friend struct protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netsensor.Stat) */ {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Stat* other);

  // implements Message ----------------------------------------------

  inline Stat* New() const PROTOBUF_FINAL { return New(NULL); }

  Stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .netsensor.Average averages = 5;
  int averages_size() const;
  void clear_averages();
  static const int kAveragesFieldNumber = 5;
  const ::netsensor::Average& averages(int index) const;
  ::netsensor::Average* mutable_averages(int index);
  ::netsensor::Average* add_averages();
  ::google::protobuf::RepeatedPtrField< ::netsensor::Average >*
      mutable_averages();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::Average >&
      averages() const;

  // string protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // .netsensor.StatType statType = 1;
  void clear_stattype();
  static const int kStatTypeFieldNumber = 1;
  ::netsensor::StatType stattype() const;
  void set_stattype(::netsensor::StatType value);

  // uint32 srcPort = 3;
  void clear_srcport();
  static const int kSrcPortFieldNumber = 3;
  ::google::protobuf::uint32 srcport() const;
  void set_srcport(::google::protobuf::uint32 value);

  // uint32 dstPort = 4;
  void clear_dstport();
  static const int kDstPortFieldNumber = 4;
  ::google::protobuf::uint32 dstport() const;
  void set_dstport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netsensor.Stat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::Average > averages_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  int stattype_;
  ::google::protobuf::uint32 srcport_;
  ::google::protobuf::uint32 dstport_;
  mutable int _cached_size_;
  friend struct protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Average : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netsensor.Average) */ {
 public:
  Average();
  virtual ~Average();

  Average(const Average& from);

  inline Average& operator=(const Average& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Average& default_instance();

  static inline const Average* internal_default_instance() {
    return reinterpret_cast<const Average*>(
               &_Average_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Average* other);

  // implements Message ----------------------------------------------

  inline Average* New() const PROTOBUF_FINAL { return New(NULL); }

  Average* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Average& from);
  void MergeFrom(const Average& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Average* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 resolution = 1;
  void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  ::google::protobuf::uint32 resolution() const;
  void set_resolution(::google::protobuf::uint32 value);

  // .netsensor.Prefix prefix = 2;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  ::netsensor::Prefix prefix() const;
  void set_prefix(::netsensor::Prefix value);

  // uint32 sent = 3;
  void clear_sent();
  static const int kSentFieldNumber = 3;
  ::google::protobuf::uint32 sent() const;
  void set_sent(::google::protobuf::uint32 value);

  // uint32 received = 4;
  void clear_received();
  static const int kReceivedFieldNumber = 4;
  ::google::protobuf::uint32 received() const;
  void set_received(::google::protobuf::uint32 value);

  // uint32 observed = 5;
  void clear_observed();
  static const int kObservedFieldNumber = 5;
  ::google::protobuf::uint32 observed() const;
  void set_observed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:netsensor.Average)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 resolution_;
  int prefix_;
  ::google::protobuf::uint32 sent_;
  ::google::protobuf::uint32 received_;
  ::google::protobuf::uint32 observed_;
  mutable int _cached_size_;
  friend struct protobuf_traffic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficByInterface

// string monitoringInterface = 1;
inline void TrafficByInterface::clear_monitoringinterface() {
  monitoringinterface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficByInterface::monitoringinterface() const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.GetNoArena();
}
inline void TrafficByInterface::set_monitoringinterface(const ::std::string& value) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.TrafficByInterface.monitoringInterface)
}
#if LANG_CXX11
inline void TrafficByInterface::set_monitoringinterface(::std::string&& value) {
  
  monitoringinterface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.TrafficByInterface.monitoringInterface)
}
#endif
inline void TrafficByInterface::set_monitoringinterface(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.TrafficByInterface.monitoringInterface)
}
inline void TrafficByInterface::set_monitoringinterface(const char* value, size_t size) {
  
  monitoringinterface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.TrafficByInterface.monitoringInterface)
}
inline ::std::string* TrafficByInterface::mutable_monitoringinterface() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.monitoringInterface)
  return monitoringinterface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficByInterface::release_monitoringinterface() {
  // @@protoc_insertion_point(field_release:netsensor.TrafficByInterface.monitoringInterface)
  
  return monitoringinterface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficByInterface::set_allocated_monitoringinterface(::std::string* monitoringinterface) {
  if (monitoringinterface != NULL) {
    
  } else {
    
  }
  monitoringinterface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoringinterface);
  // @@protoc_insertion_point(field_set_allocated:netsensor.TrafficByInterface.monitoringInterface)
}

// repeated .netsensor.Microflow microflows = 2;
inline int TrafficByInterface::microflows_size() const {
  return microflows_.size();
}
inline void TrafficByInterface::clear_microflows() {
  microflows_.Clear();
}
inline const ::netsensor::Microflow& TrafficByInterface::microflows(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.TrafficByInterface.microflows)
  return microflows_.Get(index);
}
inline ::netsensor::Microflow* TrafficByInterface::mutable_microflows(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.TrafficByInterface.microflows)
  return microflows_.Mutable(index);
}
inline ::netsensor::Microflow* TrafficByInterface::add_microflows() {
  // @@protoc_insertion_point(field_add:netsensor.TrafficByInterface.microflows)
  return microflows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >*
TrafficByInterface::mutable_microflows() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.TrafficByInterface.microflows)
  return &microflows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::Microflow >&
TrafficByInterface::microflows() const {
  // @@protoc_insertion_point(field_list:netsensor.TrafficByInterface.microflows)
  return microflows_;
}

// -------------------------------------------------------------------

// Microflow

// uint32 ipSrc = 1;
inline void Microflow::clear_ipsrc() {
  ipsrc_ = 0u;
}
inline ::google::protobuf::uint32 Microflow::ipsrc() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipSrc)
  return ipsrc_;
}
inline void Microflow::set_ipsrc(::google::protobuf::uint32 value) {
  
  ipsrc_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipSrc)
}

// uint32 ipDst = 2;
inline void Microflow::clear_ipdst() {
  ipdst_ = 0u;
}
inline ::google::protobuf::uint32 Microflow::ipdst() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.ipDst)
  return ipdst_;
}
inline void Microflow::set_ipdst(::google::protobuf::uint32 value) {
  
  ipdst_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.ipDst)
}

// repeated .netsensor.Stat stats = 3;
inline int Microflow::stats_size() const {
  return stats_.size();
}
inline void Microflow::clear_stats() {
  stats_.Clear();
}
inline const ::netsensor::Stat& Microflow::stats(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.stats)
  return stats_.Get(index);
}
inline ::netsensor::Stat* Microflow::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Microflow.stats)
  return stats_.Mutable(index);
}
inline ::netsensor::Stat* Microflow::add_stats() {
  // @@protoc_insertion_point(field_add:netsensor.Microflow.stats)
  return stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >*
Microflow::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Microflow.stats)
  return &stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::Stat >&
Microflow::stats() const {
  // @@protoc_insertion_point(field_list:netsensor.Microflow.stats)
  return stats_;
}

// uint32 latency = 4;
inline void Microflow::clear_latency() {
  latency_ = 0u;
}
inline ::google::protobuf::uint32 Microflow::latency() const {
  // @@protoc_insertion_point(field_get:netsensor.Microflow.latency)
  return latency_;
}
inline void Microflow::set_latency(::google::protobuf::uint32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Microflow.latency)
}

// -------------------------------------------------------------------

// Stat

// .netsensor.StatType statType = 1;
inline void Stat::clear_stattype() {
  stattype_ = 0;
}
inline ::netsensor::StatType Stat::stattype() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.statType)
  return static_cast< ::netsensor::StatType >(stattype_);
}
inline void Stat::set_stattype(::netsensor::StatType value) {
  
  stattype_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.statType)
}

// string protocol = 2;
inline void Stat::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Stat::protocol() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.protocol)
  return protocol_.GetNoArena();
}
inline void Stat::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netsensor.Stat.protocol)
}
#if LANG_CXX11
inline void Stat::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netsensor.Stat.protocol)
}
#endif
inline void Stat::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netsensor.Stat.protocol)
}
inline void Stat::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netsensor.Stat.protocol)
}
inline ::std::string* Stat::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:netsensor.Stat.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stat::release_protocol() {
  // @@protoc_insertion_point(field_release:netsensor.Stat.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stat::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:netsensor.Stat.protocol)
}

// uint32 srcPort = 3;
inline void Stat::clear_srcport() {
  srcport_ = 0u;
}
inline ::google::protobuf::uint32 Stat::srcport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.srcPort)
  return srcport_;
}
inline void Stat::set_srcport(::google::protobuf::uint32 value) {
  
  srcport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.srcPort)
}

// uint32 dstPort = 4;
inline void Stat::clear_dstport() {
  dstport_ = 0u;
}
inline ::google::protobuf::uint32 Stat::dstport() const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.dstPort)
  return dstport_;
}
inline void Stat::set_dstport(::google::protobuf::uint32 value) {
  
  dstport_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Stat.dstPort)
}

// repeated .netsensor.Average averages = 5;
inline int Stat::averages_size() const {
  return averages_.size();
}
inline void Stat::clear_averages() {
  averages_.Clear();
}
inline const ::netsensor::Average& Stat::averages(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.Stat.averages)
  return averages_.Get(index);
}
inline ::netsensor::Average* Stat::mutable_averages(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.Stat.averages)
  return averages_.Mutable(index);
}
inline ::netsensor::Average* Stat::add_averages() {
  // @@protoc_insertion_point(field_add:netsensor.Stat.averages)
  return averages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::Average >*
Stat::mutable_averages() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.Stat.averages)
  return &averages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::Average >&
Stat::averages() const {
  // @@protoc_insertion_point(field_list:netsensor.Stat.averages)
  return averages_;
}

// -------------------------------------------------------------------

// Average

// uint32 resolution = 1;
inline void Average::clear_resolution() {
  resolution_ = 0u;
}
inline ::google::protobuf::uint32 Average::resolution() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.resolution)
  return resolution_;
}
inline void Average::set_resolution(::google::protobuf::uint32 value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.resolution)
}

// .netsensor.Prefix prefix = 2;
inline void Average::clear_prefix() {
  prefix_ = 0;
}
inline ::netsensor::Prefix Average::prefix() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.prefix)
  return static_cast< ::netsensor::Prefix >(prefix_);
}
inline void Average::set_prefix(::netsensor::Prefix value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.prefix)
}

// uint32 sent = 3;
inline void Average::clear_sent() {
  sent_ = 0u;
}
inline ::google::protobuf::uint32 Average::sent() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.sent)
  return sent_;
}
inline void Average::set_sent(::google::protobuf::uint32 value) {
  
  sent_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.sent)
}

// uint32 received = 4;
inline void Average::clear_received() {
  received_ = 0u;
}
inline ::google::protobuf::uint32 Average::received() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.received)
  return received_;
}
inline void Average::set_received(::google::protobuf::uint32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.received)
}

// uint32 observed = 5;
inline void Average::clear_observed() {
  observed_ = 0u;
}
inline ::google::protobuf::uint32 Average::observed() const {
  // @@protoc_insertion_point(field_get:netsensor.Average.observed)
  return observed_;
}
inline void Average::set_observed(::google::protobuf::uint32 value) {
  
  observed_ = value;
  // @@protoc_insertion_point(field_set:netsensor.Average.observed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace netsensor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_2eproto__INCLUDED
