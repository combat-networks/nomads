// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: container.proto

#ifndef PROTOBUF_container_2eproto__INCLUDED
#define PROTOBUF_container_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "traffic.pb.h"
#include "topology.pb.h"
#include "netproxyinfo.pb.h"
#include "datatype.pb.h"
#include "icmpinfo.pb.h"
// @@protoc_insertion_point(includes)

namespace netsensor {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_container_2eproto();
void protobuf_InitDefaults_container_2eproto();
void protobuf_AssignDesc_container_2eproto();
void protobuf_ShutdownFile_container_2eproto();

class NetSensorContainer;

// ===================================================================

class NetSensorContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:netsensor.NetSensorContainer) */ {
 public:
  NetSensorContainer();
  virtual ~NetSensorContainer();

  NetSensorContainer(const NetSensorContainer& from);

  inline NetSensorContainer& operator=(const NetSensorContainer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetSensorContainer& default_instance();

  static const NetSensorContainer* internal_default_instance();

  void Swap(NetSensorContainer* other);

  // implements Message ----------------------------------------------

  inline NetSensorContainer* New() const { return New(NULL); }

  NetSensorContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetSensorContainer& from);
  void MergeFrom(const NetSensorContainer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetSensorContainer* other);
  void UnsafeMergeFrom(const NetSensorContainer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .netsensor.DataType dataType = 1;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  ::netsensor::DataType datatype() const;
  void set_datatype(::netsensor::DataType value);

  // repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
  int trafficbyinterfaces_size() const;
  void clear_trafficbyinterfaces();
  static const int kTrafficByInterfacesFieldNumber = 2;
  const ::netsensor::TrafficByInterface& trafficbyinterfaces(int index) const;
  ::netsensor::TrafficByInterface* mutable_trafficbyinterfaces(int index);
  ::netsensor::TrafficByInterface* add_trafficbyinterfaces();
  ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >*
      mutable_trafficbyinterfaces();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >&
      trafficbyinterfaces() const;

  // repeated .netsensor.Topology topologies = 3;
  int topologies_size() const;
  void clear_topologies();
  static const int kTopologiesFieldNumber = 3;
  const ::netsensor::Topology& topologies(int index) const;
  ::netsensor::Topology* mutable_topologies(int index);
  ::netsensor::Topology* add_topologies();
  ::google::protobuf::RepeatedPtrField< ::netsensor::Topology >*
      mutable_topologies();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::Topology >&
      topologies() const;

  // optional .netsensor.NetProxyInfo netProxyInfo = 4;
  bool has_netproxyinfo() const;
  void clear_netproxyinfo();
  static const int kNetProxyInfoFieldNumber = 4;
  const ::netsensor::NetProxyInfo& netproxyinfo() const;
  ::netsensor::NetProxyInfo* mutable_netproxyinfo();
  ::netsensor::NetProxyInfo* release_netproxyinfo();
  void set_allocated_netproxyinfo(::netsensor::NetProxyInfo* netproxyinfo);

  // repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
  int icmpinfo_size() const;
  void clear_icmpinfo();
  static const int kIcmpInfoFieldNumber = 5;
  const ::netsensor::ICMPPacketsByInterface& icmpinfo(int index) const;
  ::netsensor::ICMPPacketsByInterface* mutable_icmpinfo(int index);
  ::netsensor::ICMPPacketsByInterface* add_icmpinfo();
  ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >*
      mutable_icmpinfo();
  const ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >&
      icmpinfo() const;

  // optional .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:netsensor.NetSensorContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface > trafficbyinterfaces_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::Topology > topologies_;
  ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface > icmpinfo_;
  ::netsensor::NetProxyInfo* netproxyinfo_;
  ::google::protobuf::Timestamp* timestamp_;
  int datatype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_container_2eproto_impl();
  friend void  protobuf_AddDesc_container_2eproto_impl();
  friend void protobuf_AssignDesc_container_2eproto();
  friend void protobuf_ShutdownFile_container_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NetSensorContainer> NetSensorContainer_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetSensorContainer

// optional .netsensor.DataType dataType = 1;
inline void NetSensorContainer::clear_datatype() {
  datatype_ = 0;
}
inline ::netsensor::DataType NetSensorContainer::datatype() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.dataType)
  return static_cast< ::netsensor::DataType >(datatype_);
}
inline void NetSensorContainer::set_datatype(::netsensor::DataType value) {

  datatype_ = value;
  // @@protoc_insertion_point(field_set:netsensor.NetSensorContainer.dataType)
}

// repeated .netsensor.TrafficByInterface trafficByInterfaces = 2;
inline int NetSensorContainer::trafficbyinterfaces_size() const {
  return trafficbyinterfaces_.size();
}
inline void NetSensorContainer::clear_trafficbyinterfaces() {
  trafficbyinterfaces_.Clear();
}
inline const ::netsensor::TrafficByInterface& NetSensorContainer::trafficbyinterfaces(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Get(index);
}
inline ::netsensor::TrafficByInterface* NetSensorContainer::mutable_trafficbyinterfaces(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Mutable(index);
}
inline ::netsensor::TrafficByInterface* NetSensorContainer::add_trafficbyinterfaces() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >*
NetSensorContainer::mutable_trafficbyinterfaces() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.trafficByInterfaces)
  return &trafficbyinterfaces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::TrafficByInterface >&
NetSensorContainer::trafficbyinterfaces() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.trafficByInterfaces)
  return trafficbyinterfaces_;
}

// repeated .netsensor.Topology topologies = 3;
inline int NetSensorContainer::topologies_size() const {
  return topologies_.size();
}
inline void NetSensorContainer::clear_topologies() {
  topologies_.Clear();
}
inline const ::netsensor::Topology& NetSensorContainer::topologies(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.topologies)
  return topologies_.Get(index);
}
inline ::netsensor::Topology* NetSensorContainer::mutable_topologies(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.topologies)
  return topologies_.Mutable(index);
}
inline ::netsensor::Topology* NetSensorContainer::add_topologies() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.topologies)
  return topologies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::Topology >*
NetSensorContainer::mutable_topologies() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.topologies)
  return &topologies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::Topology >&
NetSensorContainer::topologies() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.topologies)
  return topologies_;
}

// optional .netsensor.NetProxyInfo netProxyInfo = 4;
inline bool NetSensorContainer::has_netproxyinfo() const {
  return this != internal_default_instance() && netproxyinfo_ != NULL;
}
inline void NetSensorContainer::clear_netproxyinfo() {
  if (GetArenaNoVirtual() == NULL && netproxyinfo_ != NULL) delete netproxyinfo_;
  netproxyinfo_ = NULL;
}
inline const ::netsensor::NetProxyInfo& NetSensorContainer::netproxyinfo() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.netProxyInfo)
  return netproxyinfo_ != NULL ? *netproxyinfo_
                         : *::netsensor::NetProxyInfo::internal_default_instance();
}
inline ::netsensor::NetProxyInfo* NetSensorContainer::mutable_netproxyinfo() {

  if (netproxyinfo_ == NULL) {
    netproxyinfo_ = new ::netsensor::NetProxyInfo;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.netProxyInfo)
  return netproxyinfo_;
}
inline ::netsensor::NetProxyInfo* NetSensorContainer::release_netproxyinfo() {
  // @@protoc_insertion_point(field_release:netsensor.NetSensorContainer.netProxyInfo)

  ::netsensor::NetProxyInfo* temp = netproxyinfo_;
  netproxyinfo_ = NULL;
  return temp;
}
inline void NetSensorContainer::set_allocated_netproxyinfo(::netsensor::NetProxyInfo* netproxyinfo) {
  delete netproxyinfo_;
  netproxyinfo_ = netproxyinfo;
  if (netproxyinfo) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetSensorContainer.netProxyInfo)
}

// repeated .netsensor.ICMPPacketsByInterface icmpInfo = 5;
inline int NetSensorContainer::icmpinfo_size() const {
  return icmpinfo_.size();
}
inline void NetSensorContainer::clear_icmpinfo() {
  icmpinfo_.Clear();
}
inline const ::netsensor::ICMPPacketsByInterface& NetSensorContainer::icmpinfo(int index) const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Get(index);
}
inline ::netsensor::ICMPPacketsByInterface* NetSensorContainer::mutable_icmpinfo(int index) {
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Mutable(index);
}
inline ::netsensor::ICMPPacketsByInterface* NetSensorContainer::add_icmpinfo() {
  // @@protoc_insertion_point(field_add:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >*
NetSensorContainer::mutable_icmpinfo() {
  // @@protoc_insertion_point(field_mutable_list:netsensor.NetSensorContainer.icmpInfo)
  return &icmpinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::netsensor::ICMPPacketsByInterface >&
NetSensorContainer::icmpinfo() const {
  // @@protoc_insertion_point(field_list:netsensor.NetSensorContainer.icmpInfo)
  return icmpinfo_;
}

// optional .google.protobuf.Timestamp timestamp = 6;
inline bool NetSensorContainer::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void NetSensorContainer::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& NetSensorContainer::timestamp() const {
  // @@protoc_insertion_point(field_get:netsensor.NetSensorContainer.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* NetSensorContainer::mutable_timestamp() {

  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:netsensor.NetSensorContainer.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* NetSensorContainer::release_timestamp() {
  // @@protoc_insertion_point(field_release:netsensor.NetSensorContainer.timestamp)

  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void NetSensorContainer::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:netsensor.NetSensorContainer.timestamp)
}

inline const NetSensorContainer* NetSensorContainer::internal_default_instance() {
  return &NetSensorContainer_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netsensor

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_container_2eproto__INCLUDED
