// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measure.proto

#ifndef PROTOBUF_measure_2eproto__INCLUDED
#define PROTOBUF_measure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "subject.pb.h"
// @@protoc_insertion_point(includes)

namespace measure {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_measure_2eproto();
void protobuf_InitDefaults_measure_2eproto();
void protobuf_AssignDesc_measure_2eproto();
void protobuf_ShutdownFile_measure_2eproto();

class Measure;

// ===================================================================

class Measure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:measure.Measure) */ {
 public:
  Measure();
  virtual ~Measure();

  Measure(const Measure& from);

  inline Measure& operator=(const Measure& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Measure& default_instance();

  static const Measure* internal_default_instance();

  void Swap(Measure* other);

  // implements Message ----------------------------------------------

  inline Measure* New() const { return New(NULL); }

  Measure* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Measure& from);
  void MergeFrom(const Measure& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Measure* other);
  void UnsafeMergeFrom(const Measure& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .measure.Subject subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  ::measure::Subject subject() const;
  void set_subject(::measure::Subject value);

  // map<string, string> strings = 2;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      strings() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_strings();

  // map<string, int64> integers = 3;
  int integers_size() const;
  void clear_integers();
  static const int kIntegersFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      integers() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_integers();

  // map<string, double> doubles = 4;
  int doubles_size() const;
  void clear_doubles();
  static const int kDoublesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, double >&
      doubles() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_doubles();

  // optional .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:measure.Measure)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Measure_StringsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > strings_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      Measure_IntegersEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > integers_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Measure_DoublesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > doubles_;
  ::google::protobuf::Timestamp* timestamp_;
  int subject_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_measure_2eproto_impl();
  friend void  protobuf_AddDesc_measure_2eproto_impl();
  friend void protobuf_AssignDesc_measure_2eproto();
  friend void protobuf_ShutdownFile_measure_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Measure> Measure_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Measure

// optional .measure.Subject subject = 1;
inline void Measure::clear_subject() {
  subject_ = 0;
}
inline ::measure::Subject Measure::subject() const {
  // @@protoc_insertion_point(field_get:measure.Measure.subject)
  return static_cast< ::measure::Subject >(subject_);
}
inline void Measure::set_subject(::measure::Subject value) {
  
  subject_ = value;
  // @@protoc_insertion_point(field_set:measure.Measure.subject)
}

// map<string, string> strings = 2;
inline int Measure::strings_size() const {
  return strings_.size();
}
inline void Measure::clear_strings() {
  strings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Measure::strings() const {
  // @@protoc_insertion_point(field_map:measure.Measure.strings)
  return strings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Measure::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.strings)
  return strings_.MutableMap();
}

// map<string, int64> integers = 3;
inline int Measure::integers_size() const {
  return integers_.size();
}
inline void Measure::clear_integers() {
  integers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
Measure::integers() const {
  // @@protoc_insertion_point(field_map:measure.Measure.integers)
  return integers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
Measure::mutable_integers() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.integers)
  return integers_.MutableMap();
}

// map<string, double> doubles = 4;
inline int Measure::doubles_size() const {
  return doubles_.size();
}
inline void Measure::clear_doubles() {
  doubles_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
Measure::doubles() const {
  // @@protoc_insertion_point(field_map:measure.Measure.doubles)
  return doubles_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
Measure::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.doubles)
  return doubles_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 5;
inline bool Measure::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline void Measure::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Measure::timestamp() const {
  // @@protoc_insertion_point(field_get:measure.Measure.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Measure::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:measure.Measure.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Measure::release_timestamp() {
  // @@protoc_insertion_point(field_release:measure.Measure.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Measure::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:measure.Measure.timestamp)
}

inline const Measure* Measure::internal_default_instance() {
  return &Measure_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace measure

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_measure_2eproto__INCLUDED
