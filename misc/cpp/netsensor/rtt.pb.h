// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtt.proto

#ifndef PROTOBUF_INCLUDED_rtt_2eproto
#define PROTOBUF_INCLUDED_rtt_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtt_2eproto 

namespace protobuf_rtt_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rtt_2eproto
namespace rtt {
}  // namespace rtt
namespace rtt {

enum Str {
  sensor_ip = 0,
  src_ip = 1,
  dest_ip = 2,
  protocol = 3,
  src_port = 4,
  dest_port = 5,
  Str_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Str_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Str_IsValid(int value);
const Str Str_MIN = sensor_ip;
const Str Str_MAX = dest_port;
const int Str_ARRAYSIZE = Str_MAX + 1;

const ::google::protobuf::EnumDescriptor* Str_descriptor();
inline const ::std::string& Str_Name(Str value) {
  return ::google::protobuf::internal::NameOfEnum(
    Str_descriptor(), value);
}
inline bool Str_Parse(
    const ::std::string& name, Str* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Str>(
    Str_descriptor(), name, value);
}
enum Int {
  min_rtt = 0,
  max_rtt = 1,
  resolution = 2,
  Int_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Int_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Int_IsValid(int value);
const Int Int_MIN = min_rtt;
const Int Int_MAX = resolution;
const int Int_ARRAYSIZE = Int_MAX + 1;

const ::google::protobuf::EnumDescriptor* Int_descriptor();
inline const ::std::string& Int_Name(Int value) {
  return ::google::protobuf::internal::NameOfEnum(
    Int_descriptor(), value);
}
inline bool Int_Parse(
    const ::std::string& name, Int* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Int>(
    Int_descriptor(), name, value);
}
enum Double {
  avg_rtt = 0,
  Double_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Double_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Double_IsValid(int value);
const Double Double_MIN = avg_rtt;
const Double Double_MAX = avg_rtt;
const int Double_ARRAYSIZE = Double_MAX + 1;

const ::google::protobuf::EnumDescriptor* Double_descriptor();
inline const ::std::string& Double_Name(Double value) {
  return ::google::protobuf::internal::NameOfEnum(
    Double_descriptor(), value);
}
inline bool Double_Parse(
    const ::std::string& name, Double* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Double>(
    Double_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rtt::Str> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rtt::Str>() {
  return ::rtt::Str_descriptor();
}
template <> struct is_proto_enum< ::rtt::Int> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rtt::Int>() {
  return ::rtt::Int_descriptor();
}
template <> struct is_proto_enum< ::rtt::Double> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rtt::Double>() {
  return ::rtt::Double_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtt_2eproto
