// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#include "topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_topology_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_topology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Host;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_topology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetworkInfo;
}  // namespace protobuf_topology_2eproto
namespace netsensor {
class TopologyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Topology>
      _instance;
} _Topology_default_instance_;
class HostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Host>
      _instance;
} _Host_default_instance_;
class NetworkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetworkInfo>
      _instance;
} _NetworkInfo_default_instance_;
}  // namespace netsensor
namespace protobuf_topology_2eproto {
static void InitDefaultsTopology() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_Topology_default_instance_;
    new (ptr) ::netsensor::Topology();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::Topology::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Topology =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTopology}, {
      &protobuf_topology_2eproto::scc_info_NetworkInfo.base,
      &protobuf_topology_2eproto::scc_info_Host.base,}};

static void InitDefaultsHost() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_Host_default_instance_;
    new (ptr) ::netsensor::Host();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::Host::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Host =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHost}, {}};

static void InitDefaultsNetworkInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::netsensor::_NetworkInfo_default_instance_;
    new (ptr) ::netsensor::NetworkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::netsensor::NetworkInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetworkInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetworkInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Topology.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Host.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NetworkInfo.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Topology, networkinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Topology, internals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Topology, localgws_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Host, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::Host, mac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetworkInfo, networkname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetworkInfo, networknetmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::netsensor::NetworkInfo, interfaceip_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::netsensor::Topology)},
  { 8, -1, sizeof(::netsensor::Host)},
  { 15, -1, sizeof(::netsensor::NetworkInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_Topology_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_Host_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::netsensor::_NetworkInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "topology.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016topology.proto\022\tnetsensor\"~\n\010Topology\022"
      "+\n\013networkInfo\030\001 \001(\0132\026.netsensor.Network"
      "Info\022\"\n\tinternals\030\002 \003(\0132\017.netsensor.Host"
      "\022!\n\010localGws\030\003 \003(\0132\017.netsensor.Host\"\037\n\004H"
      "ost\022\n\n\002ip\030\001 \001(\r\022\013\n\003mac\030\002 \001(\t\"O\n\013NetworkI"
      "nfo\022\023\n\013networkName\030\001 \001(\t\022\026\n\016networkNetma"
      "sk\030\002 \001(\t\022\023\n\013interfaceIp\030\003 \001(\rB\?\n\036us.ihmc"
      ".ddam.sensors.netsensorB\rTopologyProtoP\001"
      "Z\tnetsensor\240\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topology.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_topology_2eproto
namespace netsensor {

// ===================================================================

void Topology::InitAsDefaultInstance() {
  ::netsensor::_Topology_default_instance_._instance.get_mutable()->networkinfo_ = const_cast< ::netsensor::NetworkInfo*>(
      ::netsensor::NetworkInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topology::kNetworkInfoFieldNumber;
const int Topology::kInternalsFieldNumber;
const int Topology::kLocalGwsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topology::Topology()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_topology_2eproto::scc_info_Topology.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Topology)
}
Topology::Topology(const Topology& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      internals_(from.internals_),
      localgws_(from.localgws_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_networkinfo()) {
    networkinfo_ = new ::netsensor::NetworkInfo(*from.networkinfo_);
  } else {
    networkinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:netsensor.Topology)
}

void Topology::SharedCtor() {
  networkinfo_ = NULL;
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:netsensor.Topology)
  SharedDtor();
}

void Topology::SharedDtor() {
  if (this != internal_default_instance()) delete networkinfo_;
}

void Topology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  ::protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Topology& Topology::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_topology_2eproto::scc_info_Topology.base);
  return *internal_default_instance();
}


void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internals_.Clear();
  localgws_.Clear();
  if (GetArenaNoVirtual() == NULL && networkinfo_ != NULL) {
    delete networkinfo_;
  }
  networkinfo_ = NULL;
  _internal_metadata_.Clear();
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Topology)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .netsensor.NetworkInfo networkInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_networkinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Host internals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_internals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .netsensor.Host localGws = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_localgws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Topology)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Topology)
  return false;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_networkinfo(), output);
  }

  // repeated .netsensor.Host internals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->internals(static_cast<int>(i)),
      output);
  }

  // repeated .netsensor.Host localGws = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->localgws_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->localgws(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.Topology)
}

::google::protobuf::uint8* Topology::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Topology)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_networkinfo(), deterministic, target);
  }

  // repeated .netsensor.Host internals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->internals(static_cast<int>(i)), deterministic, target);
  }

  // repeated .netsensor.Host localGws = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->localgws_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->localgws(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Topology)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .netsensor.Host internals = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->internals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->internals(static_cast<int>(i)));
    }
  }

  // repeated .netsensor.Host localGws = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->localgws_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->localgws(static_cast<int>(i)));
    }
  }

  // .netsensor.NetworkInfo networkInfo = 1;
  if (this->has_networkinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *networkinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  const Topology* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Topology>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Topology)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internals_.MergeFrom(from.internals_);
  localgws_.MergeFrom(from.localgws_);
  if (from.has_networkinfo()) {
    mutable_networkinfo()->::netsensor::NetworkInfo::MergeFrom(from.networkinfo());
  }
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  return true;
}

void Topology::Swap(Topology* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Topology::InternalSwap(Topology* other) {
  using std::swap;
  CastToBase(&internals_)->InternalSwap(CastToBase(&other->internals_));
  CastToBase(&localgws_)->InternalSwap(CastToBase(&other->localgws_));
  swap(networkinfo_, other->networkinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Host::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Host::kIpFieldNumber;
const int Host::kMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Host::Host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_topology_2eproto::scc_info_Host.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.Host)
}
Host::Host(const Host& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ip_ = from.ip_;
  // @@protoc_insertion_point(copy_constructor:netsensor.Host)
}

void Host::SharedCtor() {
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:netsensor.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Host::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  ::protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Host& Host::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_topology_2eproto::scc_info_Host.base);
  return *internal_default_instance();
}


void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  _internal_metadata_.Clear();
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.Host)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), static_cast<int>(this->mac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.Host.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.Host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.Host)
  return false;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // string mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Host.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.Host)
}

::google::protobuf::uint8* Host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // string mac = 2;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.Host.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.Host)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mac = 2;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // uint32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.Host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::Swap(Host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Host::InternalSwap(Host* other) {
  using std::swap;
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_, other->ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NetworkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInfo::kNetworkNameFieldNumber;
const int NetworkInfo::kNetworkNetmaskFieldNumber;
const int NetworkInfo::kInterfaceIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInfo::NetworkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_topology_2eproto::scc_info_NetworkInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:netsensor.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.networkname().size() > 0) {
    networkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networkname_);
  }
  networknetmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.networknetmask().size() > 0) {
    networknetmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networknetmask_);
  }
  interfaceip_ = from.interfaceip_;
  // @@protoc_insertion_point(copy_constructor:netsensor.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  networkname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceip_ = 0u;
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:netsensor.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  networkname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NetworkInfo::descriptor() {
  ::protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkInfo& NetworkInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_topology_2eproto::scc_info_NetworkInfo.base);
  return *internal_default_instance();
}


void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:netsensor.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networknetmask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interfaceip_ = 0u;
  _internal_metadata_.Clear();
}

bool NetworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netsensor.NetworkInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string networkName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networkname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networkname().data(), static_cast<int>(this->networkname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.NetworkInfo.networkName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string networkNetmask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networknetmask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->networknetmask().data(), static_cast<int>(this->networknetmask().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netsensor.NetworkInfo.networkNetmask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interfaceIp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interfaceip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netsensor.NetworkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netsensor.NetworkInfo)
  return false;
#undef DO_
}

void NetworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netsensor.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string networkName = 1;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), static_cast<int>(this->networkname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->networkname(), output);
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networknetmask().data(), static_cast<int>(this->networknetmask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkNetmask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->networknetmask(), output);
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->interfaceip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:netsensor.NetworkInfo)
}

::google::protobuf::uint8* NetworkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netsensor.NetworkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string networkName = 1;
  if (this->networkname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networkname().data(), static_cast<int>(this->networkname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->networkname(), target);
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->networknetmask().data(), static_cast<int>(this->networknetmask().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netsensor.NetworkInfo.networkNetmask");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->networknetmask(), target);
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->interfaceip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:netsensor.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netsensor.NetworkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string networkName = 1;
  if (this->networkname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networkname());
  }

  // string networkNetmask = 2;
  if (this->networknetmask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->networknetmask());
  }

  // uint32 interfaceIp = 3;
  if (this->interfaceip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interfaceip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netsensor.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netsensor.NetworkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netsensor.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netsensor.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkname().size() > 0) {

    networkname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networkname_);
  }
  if (from.networknetmask().size() > 0) {

    networknetmask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.networknetmask_);
  }
  if (from.interfaceip() != 0) {
    set_interfaceip(from.interfaceip());
  }
}

void NetworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netsensor.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netsensor.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::Swap(NetworkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  networkname_.Swap(&other->networkname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  networknetmask_.Swap(&other->networknetmask_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interfaceip_, other->interfaceip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NetworkInfo::GetMetadata() const {
  protobuf_topology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace netsensor
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::Topology* Arena::CreateMaybeMessage< ::netsensor::Topology >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::Topology >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::Host* Arena::CreateMaybeMessage< ::netsensor::Host >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::Host >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::netsensor::NetworkInfo* Arena::CreateMaybeMessage< ::netsensor::NetworkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::netsensor::NetworkInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
