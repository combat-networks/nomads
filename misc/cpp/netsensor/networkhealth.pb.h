// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkhealth.proto

#ifndef PROTOBUF_networkhealth_2eproto__INCLUDED
#define PROTOBUF_networkhealth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_networkhealth_2eproto();
void protobuf_AssignDesc_networkhealth_2eproto();
void protobuf_ShutdownFile_networkhealth_2eproto();

class NetworkHealth;

// ===================================================================

class NetworkHealth : public ::google::protobuf::Message {
 public:
  NetworkHealth();
  virtual ~NetworkHealth();

  NetworkHealth(const NetworkHealth& from);

  inline NetworkHealth& operator=(const NetworkHealth& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkHealth& default_instance();

  void Swap(NetworkHealth* other);

  // implements Message ----------------------------------------------

  inline NetworkHealth* New() const { return New(NULL); }

  NetworkHealth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkHealth& from);
  void MergeFrom(const NetworkHealth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkHealth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string subnet = 1;
  void clear_subnet();
  static const int kSubnetFieldNumber = 1;
  const ::std::string& subnet() const;
  void set_subnet(const ::std::string& value);
  void set_subnet(const char* value);
  void set_subnet(const char* value, size_t size);
  ::std::string* mutable_subnet();
  ::std::string* release_subnet();
  void set_allocated_subnet(::std::string* subnet);

  // repeated string ipList = 2;
  int iplist_size() const;
  void clear_iplist();
  static const int kIpListFieldNumber = 2;
  const ::std::string& iplist(int index) const;
  ::std::string* mutable_iplist(int index);
  void set_iplist(int index, const ::std::string& value);
  void set_iplist(int index, const char* value);
  void set_iplist(int index, const char* value, size_t size);
  ::std::string* add_iplist();
  void add_iplist(const ::std::string& value);
  void add_iplist(const char* value);
  void add_iplist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& iplist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_iplist();

  // optional string networkName = 3;
  void clear_networkname();
  static const int kNetworkNameFieldNumber = 3;
  const ::std::string& networkname() const;
  void set_networkname(const ::std::string& value);
  void set_networkname(const char* value);
  void set_networkname(const char* value, size_t size);
  ::std::string* mutable_networkname();
  ::std::string* release_networkname();
  void set_allocated_networkname(::std::string* networkname);

  // optional string collector = 4;
  void clear_collector();
  static const int kCollectorFieldNumber = 4;
  const ::std::string& collector() const;
  void set_collector(const ::std::string& value);
  void set_collector(const char* value);
  void set_collector(const char* value, size_t size);
  ::std::string* mutable_collector();
  ::std::string* release_collector();
  void set_allocated_collector(::std::string* collector);

  // optional string version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional uint32 interconnectedP = 6;
  void clear_interconnectedp();
  static const int kInterconnectedPFieldNumber = 6;
  ::google::protobuf::uint32 interconnectedp() const;
  void set_interconnectedp(::google::protobuf::uint32 value);

  // optional uint32 backhaulP = 7;
  void clear_backhaulp();
  static const int kBackhaulPFieldNumber = 7;
  ::google::protobuf::uint32 backhaulp() const;
  void set_backhaulp(::google::protobuf::uint32 value);

  // optional uint32 delay = 8;
  void clear_delay();
  static const int kDelayFieldNumber = 8;
  ::google::protobuf::uint32 delay() const;
  void set_delay(::google::protobuf::uint32 value);

  // optional uint32 saturation = 9;
  void clear_saturation();
  static const int kSaturationFieldNumber = 9;
  ::google::protobuf::uint32 saturation() const;
  void set_saturation(::google::protobuf::uint32 value);

  // optional uint32 totalBandwidthMeasured = 10;
  void clear_totalbandwidthmeasured();
  static const int kTotalBandwidthMeasuredFieldNumber = 10;
  ::google::protobuf::uint32 totalbandwidthmeasured() const;
  void set_totalbandwidthmeasured(::google::protobuf::uint32 value);

  // optional uint32 totalBandwidthEstimated = 11;
  void clear_totalbandwidthestimated();
  static const int kTotalBandwidthEstimatedFieldNumber = 11;
  ::google::protobuf::uint32 totalbandwidthestimated() const;
  void set_totalbandwidthestimated(::google::protobuf::uint32 value);

  // optional uint32 withinBandwidthMeasured = 12;
  void clear_withinbandwidthmeasured();
  static const int kWithinBandwidthMeasuredFieldNumber = 12;
  ::google::protobuf::uint32 withinbandwidthmeasured() const;
  void set_withinbandwidthmeasured(::google::protobuf::uint32 value);

  // optional uint32 withinBandwidthEstimated = 13;
  void clear_withinbandwidthestimated();
  static const int kWithinBandwidthEstimatedFieldNumber = 13;
  ::google::protobuf::uint32 withinbandwidthestimated() const;
  void set_withinbandwidthestimated(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp creationTime = 14;
  bool has_creationtime() const;
  void clear_creationtime();
  static const int kCreationTimeFieldNumber = 14;
  const ::google::protobuf::Timestamp& creationtime() const;
  ::google::protobuf::Timestamp* mutable_creationtime();
  ::google::protobuf::Timestamp* release_creationtime();
  void set_allocated_creationtime(::google::protobuf::Timestamp* creationtime);

  // @@protoc_insertion_point(class_scope:ddam.NetworkHealth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr subnet_;
  ::google::protobuf::RepeatedPtrField< ::std::string> iplist_;
  ::google::protobuf::internal::ArenaStringPtr networkname_;
  ::google::protobuf::internal::ArenaStringPtr collector_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 interconnectedp_;
  ::google::protobuf::uint32 backhaulp_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 saturation_;
  ::google::protobuf::uint32 totalbandwidthmeasured_;
  ::google::protobuf::uint32 totalbandwidthestimated_;
  ::google::protobuf::uint32 withinbandwidthmeasured_;
  ::google::protobuf::uint32 withinbandwidthestimated_;
  ::google::protobuf::Timestamp* creationtime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_networkhealth_2eproto();
  friend void protobuf_AssignDesc_networkhealth_2eproto();
  friend void protobuf_ShutdownFile_networkhealth_2eproto();

  void InitAsDefaultInstance();
  static NetworkHealth* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkHealth

// optional string subnet = 1;
inline void NetworkHealth::clear_subnet() {
  subnet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkHealth::subnet() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.subnet)
  return subnet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_subnet(const ::std::string& value) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.subnet)
}
inline void NetworkHealth::set_subnet(const char* value) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.subnet)
}
inline void NetworkHealth::set_subnet(const char* value, size_t size) {
  
  subnet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.subnet)
}
inline ::std::string* NetworkHealth::mutable_subnet() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.subnet)
  return subnet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkHealth::release_subnet() {
  
  return subnet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_allocated_subnet(::std::string* subnet) {
  if (subnet != NULL) {
    
  } else {
    
  }
  subnet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnet);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.subnet)
}

// repeated string ipList = 2;
inline int NetworkHealth::iplist_size() const {
  return iplist_.size();
}
inline void NetworkHealth::clear_iplist() {
  iplist_.Clear();
}
inline const ::std::string& NetworkHealth::iplist(int index) const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.ipList)
  return iplist_.Get(index);
}
inline ::std::string* NetworkHealth::mutable_iplist(int index) {
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.ipList)
  return iplist_.Mutable(index);
}
inline void NetworkHealth::set_iplist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.ipList)
  iplist_.Mutable(index)->assign(value);
}
inline void NetworkHealth::set_iplist(int index, const char* value) {
  iplist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.ipList)
}
inline void NetworkHealth::set_iplist(int index, const char* value, size_t size) {
  iplist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.ipList)
}
inline ::std::string* NetworkHealth::add_iplist() {
  return iplist_.Add();
}
inline void NetworkHealth::add_iplist(const ::std::string& value) {
  iplist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ddam.NetworkHealth.ipList)
}
inline void NetworkHealth::add_iplist(const char* value) {
  iplist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ddam.NetworkHealth.ipList)
}
inline void NetworkHealth::add_iplist(const char* value, size_t size) {
  iplist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ddam.NetworkHealth.ipList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkHealth::iplist() const {
  // @@protoc_insertion_point(field_list:ddam.NetworkHealth.ipList)
  return iplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkHealth::mutable_iplist() {
  // @@protoc_insertion_point(field_mutable_list:ddam.NetworkHealth.ipList)
  return &iplist_;
}

// optional string networkName = 3;
inline void NetworkHealth::clear_networkname() {
  networkname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkHealth::networkname() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.networkName)
  return networkname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_networkname(const ::std::string& value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.networkName)
}
inline void NetworkHealth::set_networkname(const char* value) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.networkName)
}
inline void NetworkHealth::set_networkname(const char* value, size_t size) {
  
  networkname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.networkName)
}
inline ::std::string* NetworkHealth::mutable_networkname() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.networkName)
  return networkname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkHealth::release_networkname() {
  
  return networkname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_allocated_networkname(::std::string* networkname) {
  if (networkname != NULL) {
    
  } else {
    
  }
  networkname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkname);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.networkName)
}

// optional string collector = 4;
inline void NetworkHealth::clear_collector() {
  collector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkHealth::collector() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.collector)
  return collector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_collector(const ::std::string& value) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.collector)
}
inline void NetworkHealth::set_collector(const char* value) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.collector)
}
inline void NetworkHealth::set_collector(const char* value, size_t size) {
  
  collector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.collector)
}
inline ::std::string* NetworkHealth::mutable_collector() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.collector)
  return collector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkHealth::release_collector() {
  
  return collector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_allocated_collector(::std::string* collector) {
  if (collector != NULL) {
    
  } else {
    
  }
  collector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collector);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.collector)
}

// optional string version = 5;
inline void NetworkHealth::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkHealth::version() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.version)
}
inline void NetworkHealth::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.NetworkHealth.version)
}
inline void NetworkHealth::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.NetworkHealth.version)
}
inline ::std::string* NetworkHealth::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkHealth::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkHealth::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.version)
}

// optional uint32 interconnectedP = 6;
inline void NetworkHealth::clear_interconnectedp() {
  interconnectedp_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::interconnectedp() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.interconnectedP)
  return interconnectedp_;
}
inline void NetworkHealth::set_interconnectedp(::google::protobuf::uint32 value) {
  
  interconnectedp_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.interconnectedP)
}

// optional uint32 backhaulP = 7;
inline void NetworkHealth::clear_backhaulp() {
  backhaulp_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::backhaulp() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.backhaulP)
  return backhaulp_;
}
inline void NetworkHealth::set_backhaulp(::google::protobuf::uint32 value) {
  
  backhaulp_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.backhaulP)
}

// optional uint32 delay = 8;
inline void NetworkHealth::clear_delay() {
  delay_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::delay() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.delay)
  return delay_;
}
inline void NetworkHealth::set_delay(::google::protobuf::uint32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.delay)
}

// optional uint32 saturation = 9;
inline void NetworkHealth::clear_saturation() {
  saturation_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::saturation() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.saturation)
  return saturation_;
}
inline void NetworkHealth::set_saturation(::google::protobuf::uint32 value) {
  
  saturation_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.saturation)
}

// optional uint32 totalBandwidthMeasured = 10;
inline void NetworkHealth::clear_totalbandwidthmeasured() {
  totalbandwidthmeasured_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::totalbandwidthmeasured() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.totalBandwidthMeasured)
  return totalbandwidthmeasured_;
}
inline void NetworkHealth::set_totalbandwidthmeasured(::google::protobuf::uint32 value) {
  
  totalbandwidthmeasured_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.totalBandwidthMeasured)
}

// optional uint32 totalBandwidthEstimated = 11;
inline void NetworkHealth::clear_totalbandwidthestimated() {
  totalbandwidthestimated_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::totalbandwidthestimated() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.totalBandwidthEstimated)
  return totalbandwidthestimated_;
}
inline void NetworkHealth::set_totalbandwidthestimated(::google::protobuf::uint32 value) {
  
  totalbandwidthestimated_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.totalBandwidthEstimated)
}

// optional uint32 withinBandwidthMeasured = 12;
inline void NetworkHealth::clear_withinbandwidthmeasured() {
  withinbandwidthmeasured_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::withinbandwidthmeasured() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.withinBandwidthMeasured)
  return withinbandwidthmeasured_;
}
inline void NetworkHealth::set_withinbandwidthmeasured(::google::protobuf::uint32 value) {
  
  withinbandwidthmeasured_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.withinBandwidthMeasured)
}

// optional uint32 withinBandwidthEstimated = 13;
inline void NetworkHealth::clear_withinbandwidthestimated() {
  withinbandwidthestimated_ = 0u;
}
inline ::google::protobuf::uint32 NetworkHealth::withinbandwidthestimated() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.withinBandwidthEstimated)
  return withinbandwidthestimated_;
}
inline void NetworkHealth::set_withinbandwidthestimated(::google::protobuf::uint32 value) {
  
  withinbandwidthestimated_ = value;
  // @@protoc_insertion_point(field_set:ddam.NetworkHealth.withinBandwidthEstimated)
}

// optional .google.protobuf.Timestamp creationTime = 14;
inline bool NetworkHealth::has_creationtime() const {
  return !_is_default_instance_ && creationtime_ != NULL;
}
inline void NetworkHealth::clear_creationtime() {
  if (GetArenaNoVirtual() == NULL && creationtime_ != NULL) delete creationtime_;
  creationtime_ = NULL;
}
inline const ::google::protobuf::Timestamp& NetworkHealth::creationtime() const {
  // @@protoc_insertion_point(field_get:ddam.NetworkHealth.creationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
inline ::google::protobuf::Timestamp* NetworkHealth::mutable_creationtime() {
  
  if (creationtime_ == NULL) {
    creationtime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.NetworkHealth.creationTime)
  return creationtime_;
}
inline ::google::protobuf::Timestamp* NetworkHealth::release_creationtime() {
  
  ::google::protobuf::Timestamp* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
inline void NetworkHealth::set_allocated_creationtime(::google::protobuf::Timestamp* creationtime) {
  delete creationtime_;
  if (creationtime != NULL && creationtime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_creationtime = new ::google::protobuf::Timestamp;
    new_creationtime->CopyFrom(*creationtime);
    creationtime = new_creationtime;
  }
  creationtime_ = creationtime;
  if (creationtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.NetworkHealth.creationTime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networkhealth_2eproto__INCLUDED
