##################### Dissemination Service Properties #########################
#
################################################################################
#                           NODE CONFIGURATION                                 #
################################################################################
#
# The ID that uniquevely identify the peer
#aci.disService.nodeUUID=
#
# It is possible to have DisService automatically set the node ID.
# Possible values for this property are
# - UUID: a random-generated-16-byte-long UUID
# - hostname: th hostname of the machine DisService is running on.
aci.disService.nodeUUID.auto.mode=hostname
#
# The port used to connect to disservice through disservice proxy
aci.disService.port=8501
#
# Storage capability of the node (expressed in KB)
aci.disService.nodeConfiguration.memorySpace=30000
#
# Connectivity History parameters configuration:
# 1) Window Size in milliseconds. 
#    Note: if the value is lower than DEFAULT_PEER_DEATH_TIME then the
#    system sets the window size to DEFAULT_PEER_DEATH_TIME + windowSize
#
aci.disService.nodeConfiguration.connectivityHistory.windowSize=40000
#
# Specifies if the received messages are filtered before
# send them to the application  or not.
# (NOTE: if false the messages that are pushed are also received)
# - 1 (true)
# - 0 (false)
aci.disService.clientIdFiltering=0
#
# Specifies the storage mode to use
# 1) Mode IN MEMORY  => use code '0' 
# 2) Mode PERSISTENT => use code '1'
# 3) Mode DUMMY => use code '2'
aci.disService.storageMode=0
#ftp
# If the storage mode used is PERSISTENT, then it is possible to specify the
# file where the db will be stored. By default this is set to db.sqlite and it
# is placed in the current directory
aci.disService.storageFile=db.sqlite
#
# Set to 1 to enable the transaction timer and use transactions to speed up
# SQLite database access. Only has an affect if the storage mode is PERSISTENT
#aci.disService.storage.useTransactionTimer=1
#
# If the storage mode used is DUMMY, then it is possible to specify the length
# of the window (in milliseconds)
#aci.disService.storage.dummy.winSize=
#
# Specifies with network interfaces are used by DisService.
#aci.disService.netIFs=10.101.0.35
#
# Specifies whether the message pushed are sent out on the network right away,
# or whether the push call should only cache them in DisService
# - PUSH_ENABLED: pushed messages are cached and transmitted
# - PUSH_DISABLED: pushed messages are only cached
aci.disService.transmission=PUSH_ENABLED
#
# Specifies the interval of time from the last time the message/fragment has
# been broadcasted (by whatever neighbors) in which  a request for the same
# message/fragment must not be served
# (NOTE: the request is dropped, not queued)
# Setting the following property to 0 will disable this feature.
aci.disService.transmission.ignoreReqTime=9000
#
# Maximum Bandwidth in Kb/s (Rate Limit Cap)
aci.disService.nodeConfiguration.bandwidth=1024
################################################################################
#                          LINK CAPACITY ESTIMATION                            #
################################################################################
#this is the starting value for the network capacity. if the estimation is
#disabled, this will be considered the network capacity.
aci.disService.nodeConfiguration.estimatedLinkCapacity=1024
#Specifies if disService will try to estimate the link capacity at runtime
#or will use a fixed value from the config file
aci.disService.nodeConfiguration.estimateCapacity=false
#the 2 following factors determine how the RateEstimator changes its estimate
#of the fixed drop. their values range from 0 to 100
#lower decreaseFactor values make the fixed drop estimate decrease quicker
aci.disService.nodeConfiguration.estimateCapacity.decreaseFactor=98
#higher updatefactor values make the fixedDrop estimate change quicker
aci.disService.nodeConfiguration.estimateCapacity.updateFactor=30
################################################################################
#                          BANDWIDTH SHARING                                   #
################################################################################
#Specifies if disService will try to adjust its rate limit at runtime
#to share the link with other nodes
aci.disService.nodeConfiguration.bandwidthSharing.enabled=true
#Specifies the priority the node has when deciding how to share the bandwidth
# 0 is the highest, 7 is the lowest
aci.disService.nodeConfiguration.bandwidthSharing.nodeImportance=0
#Specifies the rule to use to determine bandwidth sharing
# 0  -> Equal Sharing:
#       the capacity of each node is equal to
#       total capacity / (number of neighbours + 1)
# 1  -> Higher Priority Dominates:
#       the nodes with higher priority share equally
#       between them the link capacity, the others can send msgs at min speed)
# 2  -> Proportional Sharing:
#       the weight a node has in sharing the bandwidth is
#       (8 - nodeImportance), so more important nodes get a bit more bandwidth
# 3  -> Proportional Sharing With Queue Length:
#        the weight a node has in sharing
#       (8 - nodeImportance) x (queueLengthFactor)^3, so more important nodes
#		get a bit more bandwidth, and nodes with data to send get a lot more
#		bandwidth. queueLengthFactor is higher when the queue is fuller
# 4  -> Bandwidth Capped HPD :
#       like number 1, but if the sum of the rate caps of all the most important
#       nodes is lower than the link capacity, the remaining capacity is split
#		equally between the other nodes
# 5  -> Bandwidth Capped PSQL :
#       like number 3, but if a node rate cap is lower than its bandwidth share
#       the remaining bandwidth is split between the other nodes
#255 -> No Sharing:
#       the node rate limit is the link capacity
aci.disService.nodeConfiguration.bandwidthSharing.sharingRule=5
################################################################################
#                          MESSAGE REASSEMBLER                                 #
################################################################################
# Specifies the timeout after which a message fragment request is sent (the time
# must be defined in milliseconds)
#
aci.disService.reassembler.request.time=3000
#
# Enable/disable the exponential back-off time for the time missing fragment
# requests are sent. If enabled, the missing fragment request time is decreased
# exponentially as long as new data are received or a new peer enters the
# communication range
aci.disService.reassembler.ExpBackoff.enabled=false
#
# Set a limit to the number of times, or to the time since the message arrived,
# that a message can be requested.
# Setting these properties to -1 means no limit.
# If both limit are set, the discrete limit will be both matched, by starting
# with the discrete limit.
aci.disService.reassembler.missingFragReq.limit.discrete=-1
aci.disService.reassembler.missingFragReq.limit.time=-1
#
#Specifies the probability to ask a missing fragment
aci.disService.reassembler.request.probability.default=50
#
aci.disService.transmissionService.listener.trafficHistory.enable=true
################################################################################
#                               WORLD STATE                                    #
################################################################################
# Specifies if the keep alive message is sent or not
# Currently these advertisements modes are supported:
# - 1 (true)
# - 0 (false)(Be Careful)
aci.disService.worldstate.keepAlive.enabled=true
#
# The maximum interval the node has not been transmitting after which a keep
# alive message is sent.
aci.disService.worldstate.keepAlive.interval=2000
#
# The iterval without receiving any message from a peer after which the peer is
# considered out of range
aci.disService.worldstate.deadPeer.interval=10000
#
# Enables the Subscription State Exchange
#aci.disService.worldstate.subscriptionexchange.enabled=false
#
# Sets the Subscription State Exchange Period (a Subscription State Message is
# sent every
#aci.disService.worldstate.subscriptionexchange.period=3
#
################################################################################
#                   DATA CACHE REPLICATION CONTROLLER                          #
################################################################################
# Currently these advertisements modes are supported:
# - PULL: PullReplicationController is loaded. PullReplicationController waits
#         for a query from the new node and will replicate all the messages in
#         its data cache that match the query.
# - PUSH: PushReplicationController is loaded. PushReplication selects the
#         messages to transmit and will replicate them.
#         PushReplicationController may potentially replicate the same messages
#         to different nodes.
# - PUSH_CONVOY: PushToConvoyReplicationController is loaded.
#                PushToConvoyReplicationController pushes different message to
#                different nodes.
# - PULL4PHASES
# - DS_PRO
# - DEFAULT: DefaultDataCacheReplicationController will be loaded. This
#            controller does not take any action.
aci.disService.replication.mode=DEFAULT
#
# Specifies whether the replicated messages need acknowledgment or not
# Currently these advertisements modes are supported:
# - 1 - The replicated messages need to be acknowledged
# - 0 - The replicated messages DO NOT need to be acknowledged
aci.disService.replication.ack=0
#
# Specifies the interval of time aafter which an unacknowledged message is
# retransmitted
aci.disService.replication.ack.timeout=5000
#
################################################################################
#                           FORWARDING CONTROLLER                              #
################################################################################
# Specifies wich type of forwarding controller will be used
# - 0 (forwarding based on the world state information)
# - 1 (probabilistic forwarding)
# - 2 (stateful forwarding) The probability with which a message is forwarded
#     depends on the number of neighbors its connected to.
# NOTE: if the ForwardingController has to be disabled, chose probabilistic
#       forwarding (1) and set aci.disService.forwarding.probability to 0
aci.disService.forwarding.mode=1
#
# If the probabilistic forwarding is selected, this parametes specifies the
# forwarding probability with which a message is forwarded
# forwarding is true. Value from 0 - 100. (Default probability=50)
aci.disService.forwarding.probability=0
#
#########################################################
# ANTIENTROPY                                           #
#########################################################
# Specify whether the value of probability a missing fragment
# request is responded is
# - fixed (value set to 0) or 
# - function of the number of neighbors (value set to 1)
aci.disService.fragReqReply.mode=0
aci.disService.fragReqReply.probability=100
#
# Specifies if the DataCacheQuery message is sent or not
# Currently these advertisements modes are supported:
# - 1 (true)
# - 0 (false)(Receiver)
aci.disService.antientropy.queryDataCache=1
#
# Specifies the behaviour when the DataCacheQuery is received.
# Currently these advertisements modes are supported:
# - 2 (reply with the MsgId that match the query) 
# - 1 (reply with the data that match the query)
# - 0 (do not reply to the queryDataCacheMsg)(Pusher)
aci.disService.antientropy.replyQueryDataCache=1
#
################################################################################
#                       LARGE OBJECT DISSEMINATION                             #
################################################################################
aci.disService.chunkReplicationPolicy.chunkSize=16000
#
# CHUNK REPLICATION POLICY
#
# Specifies in which target the chunk should be replicated.
# Target Replication Policy must be declared here. If no policy have been declared, the default policy
# is selected. The default policy is RandomizedTargetReplicationPolicy
#
# The following policy have been implemented :
#
#	1) RandomizedTargetReplicationPolicy <=> ID = 0
#	2) ClassifiedTargetReplicationPolicy <=> ID = 1
#	3) FirstClassTargetReplicationPolicy <=> ID = 2
#
aci.disService.targetReplicationPolicy.policyID=0
#
# CHUNK REPLICATION CLASS POLICY
#
# Specifies the bandwidth threshold in Kb/s for which the chunk replication is
# activated
aci.disService.targetReplicationPolicy.bandwidthThreshold=100
#
# Specifies the minimum amount of free memory in KB. Nodes that have reach this
# minimum value can NOT accept a chunk
aci.disService.targetReplicationPolicy.memoryThreshold=10240
#
# Specifies the number of classes in which the neighbors has to be placed in the
# chunk replication procedure
aci.disService.targetReplicationPolicy.numOfClasses=3
#
# Specifies the importance of the memory parameter in the node selection procedure
# during the chunk replication.
aci.disService.targetReplicationPolicy.memoryFactor=3
#
# Specifies the importance of the bandwidth parameter in the node selection
# procedure during the chunk replication.
aci.disService.targetReplicationPolicy.bandwidthFactor=4
#
# Specifies the importance of the activesNeighbors parameter in the node
# selection procedure during the chunk replication.
aci.disService.targetReplicationPolicy.activesNeighborsFactor=2
#
# Specifies the importance of the NodesInConnectivityHistory in the node
# selection procedure during the chunk replication
aci.disService.targetReplicationPolicy.nodesInConnectivityHistoryFactor=1
#
################################################################################
#                       DISSEMINATION SERVICE PROXY                            #
################################################################################
aci.disservice.proxy.port=56487
#
################################################################################
#                            MESSAGE PROPAGATION                               #
################################################################################
#
# If target filtering is enabled, messages with target ID set to a different
# peer node ID will be dropped (they will not be cached, nor DisService will
# try to reassemble them)
#
aci.disService.propagation.targetFiltering=false
# Currently these advertisements modes are supported:
# - NMS_BROADCAST
# - NMS_MULTICAST
# - XLAYER_BROADCAST
# - XLAYER_MULTICAST
#aci.disService.propagationMode=UDP_MULTICAST
#
# NETWORK MESSAGE SERVICE
aci.disService.networkMessageService.port=6617
#
# Make sure to match the correct variable wit the
# aci.disService.propagationMode set above
#
#aci.disService.networkMessageService.mcastAddr=204.0.0.1
#aci.disService.networkMessageService.mcastTTL=5
#aci.disService.networkMessageService.bcastAddr=255.255.255.255
aci.disService.networkMessageService.delivery.async=true
aci.disService.networkMessageService.transmission.async=true
#
# Which version of NetworkMessage will be used. currently
# two versions are supported:
# 1 is the basic one
# 2 adds the outgoing queue length of the sending interface
# as a field in the header of the message
aci.disService.networkMessageService.networkMessageVersion=2
#
# XLAYER
#aci.disservice.xlayerProxy.port=
#aci.disservice.xlayerProxy.ip=
#
################################################################################
#                            DATA REQUEST HANDLER                              #
################################################################################
#
aci.disService.dataRequestHandler.enable=true
#how much time the data request handler thread sleeps before checking if there
#are messages that need to be served
aci.disService.dataRequestHandler.sleepTime=100
#
#the random waiting time for each data request message is calculated with the
#following formula: random wait= baseTime +- rand(baseTime X offsetRange / 100)
aci.disService.dataRequestHandler.baseTime=1000
aci.disService.dataRequestHandler.offsetRange=50
#
################################################################################
#                                     LOGGER                                   #
################################################################################
util.logger.enabled=true
util.logger.out.screen.enabled=true
util.logger.out.file.enabled=true
util.logger.out.file.path=disseminationservice.log
# Se the level of the detail of the logger. The property expects integer values
# within [1, 8]
# 1 - Severe Error Message (Requiring termination)
# 2 - Mild Error Message
# 3 - Warning
# 4 - Info
# 5 - Net (Lower) Detail Debug Message (Lower than Low Detail - introduced to reduce the number of messages logged over the network)
# 6 - Low Detail Debug Message
# 7 - Medium Detail Debug Message
# 8 - High Detail Debug Message
util.logger.detail=4
aci.disService.transmissionLogFile=transmissionLogFile.log
