# The name of the node, as a string
aci.dspro.nodename=
#
# Set to "true" if the disservice adaptor should be enabled, "false" otherwise
aci.dspro.adaptor.disservice.enable=
#
# Set to "true" if the mockets adaptor should be enabled, "false" otherwise
aci.dspro.adaptor.mockets.enable=
#
# Set it to DATA_REPLICATOR if metadata and data messages should both be pre-staged,
# or to METADATA_REPLICATOR if only the metadata messages should be pre-staged
aci.dspro.replication.manager.mode=
#
# Set it to "true" if the matchmaking process should be logged, "false" otherwise
aci.dspro.instrument=
#
# Mockets
#
# Set to the IP address(es) (in dotted decimal form) that the mockets adaptor should
# use to accept mockets connection.
# It is possible to set multiple interfaces by separatoing them by a semicolumn (";")
# character
aci.dspro.mockets.netIFs=
#
# The port that ServerMockets will be listening to
aci.dspro.adaptor.mockets.port=
# Set to the IP address(es) (in dotted decimal form) of the peer(s) that the mockets
# adaptor should try to connect to
# It is possible to set multiple interfaces by separatoing them by a semicolumn (";")
# character
aci.dspro.adaptor.mockets.peer.addr=
#
# Data Cache
#
# Specifies the storage mode to use
# 1) Mode IN MEMORY  => use code '0' 
# 2) Mode PERSISTENT => use code '1'
# 3) Mode DUMMY => use code '2'
aci.disService.storageMode=0
#
# If the storage mode used is PERSISTENT, then it is possible to specify the
# file where the db will be stored. By default this is set to db.sqlite and it
# is placed in the current directory
aci.disService.storageFile=disService.db
#
# Controller
#
#
# Set it to "true" if the node should perform the pre-staging, set it to "false"
# otherwise
aci.dspro.dsprorepctrl.prestaging.enabled=
# Set it to "true" if the node should forward other peers' node context, set it
# to "false" otherwise
aci.dspro.dsprorepctrl.contextForwarding.enabled=
#
#
# Metadata Ranker
#
# The matchmaking mechanisms evaluates 6 ranks, depending on 6 policies.
# The final rank of a message is computed as a weighted average of these
# scores.
# The following properties let the user set the weight to each of the
# computed scores, depending on his of her preferences.
aci.dspro.metadataRanker.coordRankWeight=
aci.dspro.metadataRanker.timeRankWeight=
aci.dspro.metadataRanker.expirationRankWeight=
aci.dspro.metadataRanker.impRankWeight=
aci.dspro.metadataRanker.predRankWeight=
aci.dspro.metadataRanker.targetRankWeight=
aci.dspro.metadataRanker.infoContentRankWeight=
aci.dspro.metadataRanker.srcRelRankWeight=
#
# If set on "true" only the messages that match the next
# segment will be considered for prestaging.
aci.dspro.metadataRanker.timeRank.considerFutureSegments=
# If set to "true", when the targert is specified in the metadata,
# only the target node will possibly be matched the message. If set
# on "false". other nodes can be matched messages targeted to other
# (but they will probably be assigned a lower rank).
aci.dspro.metadataRanker.targetStrict=
#
# Information Push
#
# It's a float within [0.0, 10.0]. Messages with rank less than this
# threshold will not be pre-staged.
aci.dspro.informationPush.rankThreshold=
#
# If set on "true", messages are pre-staged sorted by expected time of use
aci.dspro.informationPush.enforceTiming=
# If set on "true" only messages that were generated locally will be
# considered for pre-staging, anf therefore matched
aci.dspro.informationPush.limitPrestagingToLocalData=
#
# Information Pull
#
# NOTE: these functionalities are currently disabled
aci.dspro.informationPull.rankThreshold=
aci.dspro.informationPull.enforceTiming=
#
# Scheduler
#
# The maximum number of messages that can be pre-staged in
# a session
aci.dspro.scheduler.preStagingSession.messages.threashold=
# The total number of messages that can be enqueued for pre-staging.
aci.dspro.scheduler.preStagingSession.messages.queue.outgoing.threashold=
# If set on "true" the prestaging will run in its own thread.
aci.dspro.scheduler.thread.run=
#
# It can be set to PREV_PUSH_MSG_INFO_DISABLED, SESSION_AWARE, SESSIONLESS.
# If set on PREV_PUSH_MSG_INFO_DISABLED the id of the id of the previous message
# that was pre-staged by the node on the target, will not be added to the metadata
# being pre-staged. If set on SESSION_AWARE, the id of the previous message
# that was pre-staged by the node on the target will be set, however, each time
# that the node context of the target node changes, the value will be reset.
# If set on SESSIONLESS, the id of the previous message that was pre-staged by the
# node on the target will be set, and never resets.
# If enabled, this property allows for reliability: if a message (or several mesages)
# being pre-staged get lost, the receiver will be able to find out about them by looking
# at the value set in the previous message property in the metadata. If the corresponding
# message has not yet been received, the receiver can explicetely request it.
aci.dspro.scheduler.metadata.mutator.prevMsg=
# This property can be set to REPLACE_ALL, or REPLACE_NONE, or REPLACE_LOW_INDEXES.
aci.dspro.scheduler.queue.replacement=
#
# It can be set to DISABLED, SESSION_AWARE, SESSIONLESS. Analogous to
# aci.dspro.scheduler.metadata.mutator.prevMsg
aci.dspro.scheduler.metadata.mutator=
#
# LocalNodeContext
#
aci.dspro.localNodeContext.pszTeamID=
aci.dspro.localNodeContext.pszMissionID=
aci.dspro.localNodeContext.pszRole=
#
# Determines the size of the area around the path
# for which the user is interested in receiving information.
# It is expressed in meters.
aci.dspro.localNodeContext.usefulDistance=
# It is possible to specify a custom value of useful distance for a certain MIME type.
aci.dspro.localNodeContext.usefulDistanceByType=
#
# Node Path
#
# The id of the path to be set as current path
aci.dspro.nodePath.current=
# If set on "true" , the firt waypoint of the current path wil be set as current position
aci.dspro.nodePath.setFirstWaypoint=
aci.dspro.nodePath.pszPathID=
aci.dspro.nodePath.pathType=
aci.dspro.nodePath.probability=
#
# Waypoint
#
# It is possible to set more waypoints, by replacing the 0, with the proper waypoint index
aci.dspro.nodePath.waypoint.0.type=
aci.dspro.nodePath.waypoint.0.latitude=
aci.dspro.nodePath.waypoint.0.longitude=
aci.dspro.nodePath.waypoint.0.altitude=
aci.dspro.nodePath.waypoint.0.location=
aci.dspro.nodePath.waypoint.0.note=
aci.dspro.nodePath.waypoint.0.timeStamp=
