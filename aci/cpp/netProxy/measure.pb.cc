// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "measure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace measure {

namespace {

const ::google::protobuf::Descriptor* Measure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Measure_StringsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Measure_IntegersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Measure_DoublesEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_measure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_measure_2eproto() {
  protobuf_AddDesc_measure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "measure.proto");
  GOOGLE_CHECK(file != NULL);
  Measure_descriptor_ = file->message_type(0);
  static const int Measure_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, strings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, integers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, doubles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, timestamp_),
  };
  Measure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Measure_descriptor_,
      Measure::internal_default_instance(),
      Measure_offsets_,
      -1,
      -1,
      -1,
      sizeof(Measure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, _internal_metadata_));
  Measure_StringsEntry_descriptor_ = Measure_descriptor_->nested_type(0);
  Measure_IntegersEntry_descriptor_ = Measure_descriptor_->nested_type(1);
  Measure_DoublesEntry_descriptor_ = Measure_descriptor_->nested_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_measure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Measure_descriptor_, Measure::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Measure_StringsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Measure_StringsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Measure_IntegersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                Measure_IntegersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Measure_DoublesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Measure_DoublesEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_measure_2eproto() {
  Measure_default_instance_.Shutdown();
  delete Measure_reflection_;
}

void protobuf_InitDefaults_measure_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_InitDefaults_google_2fprotobuf_2ftimestamp_2eproto();
  ::measure::protobuf_InitDefaults_subject_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Measure_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  Measure_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_measure_2eproto_once_);
void protobuf_InitDefaults_measure_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_measure_2eproto_once_,
                 &protobuf_InitDefaults_measure_2eproto_impl);
}
void protobuf_AddDesc_measure_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_measure_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmeasure.proto\022\007measure\032\037google/protobu"
    "f/timestamp.proto\032\rsubject.proto\"\376\002\n\007Mea"
    "sure\022!\n\007subject\030\001 \001(\0162\020.measure.Subject\022"
    ".\n\007strings\030\002 \003(\0132\035.measure.Measure.Strin"
    "gsEntry\0220\n\010integers\030\003 \003(\0132\036.measure.Meas"
    "ure.IntegersEntry\022.\n\007doubles\030\004 \003(\0132\035.mea"
    "sure.Measure.DoublesEntry\022-\n\ttimestamp\030\005"
    " \001(\0132\032.google.protobuf.Timestamp\032.\n\014Stri"
    "ngsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
    "\032/\n\rIntegersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\003:\0028\001\032.\n\014DoublesEntry\022\013\n\003key\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\001:\0028\001B2\n\024us.ihmc.sensei.prot"
    "oB\014MeasureProtoP\001Z\007measure\240\001\001b\006proto3", 517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "measure.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::measure::protobuf_AddDesc_subject_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_measure_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_measure_2eproto_once_);
void protobuf_AddDesc_measure_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_measure_2eproto_once_,
                 &protobuf_AddDesc_measure_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_measure_2eproto {
  StaticDescriptorInitializer_measure_2eproto() {
    protobuf_AddDesc_measure_2eproto();
  }
} static_descriptor_initializer_measure_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measure::kSubjectFieldNumber;
const int Measure::kStringsFieldNumber;
const int Measure::kIntegersFieldNumber;
const int Measure::kDoublesFieldNumber;
const int Measure::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measure::Measure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_measure_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:measure.Measure)
}

void Measure::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

Measure::Measure(const Measure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:measure.Measure)
}

void Measure::SharedCtor() {
  strings_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  strings_.SetEntryDescriptor(
      &::measure::Measure_StringsEntry_descriptor_);
  integers_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  integers_.SetEntryDescriptor(
      &::measure::Measure_IntegersEntry_descriptor_);
  doubles_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  doubles_.SetEntryDescriptor(
      &::measure::Measure_DoublesEntry_descriptor_);
  timestamp_ = NULL;
  subject_ = 0;
  _cached_size_ = 0;
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:measure.Measure)
  SharedDtor();
}

void Measure::SharedDtor() {
  if (this != &Measure_default_instance_.get()) {
    delete timestamp_;
  }
}

void Measure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measure_descriptor_;
}

const Measure& Measure::default_instance() {
  protobuf_InitDefaults_measure_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Measure> Measure_default_instance_;

Measure* Measure::New(::google::protobuf::Arena* arena) const {
  Measure* n = new Measure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:measure.Measure)
  subject_ = 0;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  strings_.Clear();
  integers_.Clear();
  doubles_.Clear();
}

bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:measure.Measure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .measure.Subject subject = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subject(static_cast< ::measure::Subject >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strings;
        break;
      }

      // map<string, string> strings = 2;
      case 2: {
        if (tag == 18) {
         parse_strings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_strings:
          Measure_StringsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&strings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.StringsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.StringsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_strings;
        if (input->ExpectTag(26)) goto parse_loop_integers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, int64> integers = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_integers:
          Measure_IntegersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&integers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.IntegersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_integers;
        if (input->ExpectTag(34)) goto parse_loop_doubles;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, double> doubles = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_doubles:
          Measure_DoublesEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&doubles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.DoublesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_doubles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:measure.Measure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:measure.Measure)
  return false;
#undef DO_
}

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:measure.Measure)
  // optional .measure.Subject subject = 1;
  if (this->subject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subject(), output);
  }

  // map<string, string> strings = 2;
  if (!this->strings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->strings().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_StringsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strings_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_StringsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it) {
        entry.reset(strings_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> integers = 3;
  if (!this->integers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.IntegersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->integers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->integers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_IntegersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_IntegersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it) {
        entry.reset(integers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> doubles = 4;
  if (!this->doubles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.DoublesEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->doubles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->doubles().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_DoublesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doubles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_DoublesEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it) {
        entry.reset(doubles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:measure.Measure)
}

::google::protobuf::uint8* Measure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:measure.Measure)
  // optional .measure.Subject subject = 1;
  if (this->subject() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subject(), target);
  }

  // map<string, string> strings = 2;
  if (!this->strings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.value");
      }
    };

    if (deterministic &&
        this->strings().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_StringsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strings_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_StringsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it) {
        entry.reset(strings_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> integers = 3;
  if (!this->integers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.IntegersEntry.key");
      }
    };

    if (deterministic &&
        this->integers().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->integers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_IntegersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integers_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_IntegersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it) {
        entry.reset(integers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> doubles = 4;
  if (!this->doubles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.DoublesEntry.key");
      }
    };

    if (deterministic &&
        this->doubles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->doubles().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Measure_DoublesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doubles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Measure_DoublesEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it) {
        entry.reset(doubles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:measure.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:measure.Measure)
  size_t total_size = 0;

  // optional .measure.Subject subject = 1;
  if (this->subject() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subject());
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // map<string, string> strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  {
    ::google::protobuf::scoped_ptr<Measure_StringsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->strings().begin();
        it != this->strings().end(); ++it) {
      entry.reset(strings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int64> integers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->integers_size());
  {
    ::google::protobuf::scoped_ptr<Measure_IntegersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->integers().begin();
        it != this->integers().end(); ++it) {
      entry.reset(integers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> doubles = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->doubles_size());
  {
    ::google::protobuf::scoped_ptr<Measure_DoublesEntry> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->doubles().begin();
        it != this->doubles().end(); ++it) {
      entry.reset(doubles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:measure.Measure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Measure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:measure.Measure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:measure.Measure)
    UnsafeMergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:measure.Measure)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Measure::UnsafeMergeFrom(const Measure& from) {
  GOOGLE_DCHECK(&from != this);
  strings_.MergeFrom(from.strings_);
  integers_.MergeFrom(from.integers_);
  doubles_.MergeFrom(from.doubles_);
  if (from.subject() != 0) {
    set_subject(from.subject());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:measure.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:measure.Measure)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Measure::IsInitialized() const {

  return true;
}

void Measure::Swap(Measure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measure::InternalSwap(Measure* other) {
  std::swap(subject_, other->subject_);
  strings_.Swap(&other->strings_);
  integers_.Swap(&other->integers_);
  doubles_.Swap(&other->doubles_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measure_descriptor_;
  metadata.reflection = Measure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measure

// optional .measure.Subject subject = 1;
void Measure::clear_subject() {
  subject_ = 0;
}
::measure::Subject Measure::subject() const {
  // @@protoc_insertion_point(field_get:measure.Measure.subject)
  return static_cast< ::measure::Subject >(subject_);
}
void Measure::set_subject(::measure::Subject value) {
  
  subject_ = value;
  // @@protoc_insertion_point(field_set:measure.Measure.subject)
}

// map<string, string> strings = 2;
int Measure::strings_size() const {
  return strings_.size();
}
void Measure::clear_strings() {
  strings_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Measure::strings() const {
  // @@protoc_insertion_point(field_map:measure.Measure.strings)
  return strings_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Measure::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.strings)
  return strings_.MutableMap();
}

// map<string, int64> integers = 3;
int Measure::integers_size() const {
  return integers_.size();
}
void Measure::clear_integers() {
  integers_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
Measure::integers() const {
  // @@protoc_insertion_point(field_map:measure.Measure.integers)
  return integers_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
Measure::mutable_integers() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.integers)
  return integers_.MutableMap();
}

// map<string, double> doubles = 4;
int Measure::doubles_size() const {
  return doubles_.size();
}
void Measure::clear_doubles() {
  doubles_.Clear();
}
 const ::google::protobuf::Map< ::std::string, double >&
Measure::doubles() const {
  // @@protoc_insertion_point(field_map:measure.Measure.doubles)
  return doubles_.GetMap();
}
 ::google::protobuf::Map< ::std::string, double >*
Measure::mutable_doubles() {
  // @@protoc_insertion_point(field_mutable_map:measure.Measure.doubles)
  return doubles_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 5;
bool Measure::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void Measure::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Measure::timestamp() const {
  // @@protoc_insertion_point(field_get:measure.Measure.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Measure::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:measure.Measure.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Measure::release_timestamp() {
  // @@protoc_insertion_point(field_release:measure.Measure.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Measure::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:measure.Measure.timestamp)
}

inline const Measure* Measure::internal_default_instance() {
  return &Measure_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace measure

// @@protoc_insertion_point(global_scope)
