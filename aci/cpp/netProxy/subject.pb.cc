// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace measure {

namespace {

const ::google::protobuf::EnumDescriptor* Subject_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_subject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_subject_2eproto() {
  protobuf_AddDesc_subject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subject.proto");
  GOOGLE_CHECK(file != NULL);
  Subject_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_subject_2eproto() {
}

void protobuf_InitDefaults_subject_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_subject_2eproto_once_);
void protobuf_InitDefaults_subject_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_subject_2eproto_once_,
                 &protobuf_InitDefaults_subject_2eproto_impl);
}
void protobuf_AddDesc_subject_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_subject_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsubject.proto\022\007measure*\352\003\n\007Subject\022\010\n\004"
    "host\020\000\022\013\n\007network\020\001\022\013\n\007traffic\020\002\022\007\n\003cpu\020"
    "\003\022\n\n\006memory\020\004\022\006\n\002os\020\005\022\022\n\016network_health\020"
    "\006\022\016\n\ndisservice\020\007\022\013\n\007mockets\020\010\022\024\n\020link_d"
    "escription\020\t\022\025\n\021netviewer_request\020\n\022\017\n\013g"
    "eolocation\020\013\022\013\n\007battery\020\014\022\t\n\005group\020\r\022\024\n\020"
    "group_connection\020\016\022\020\n\014group_member\020\017\022\013\n\007"
    "process\020\020\022\021\n\rmember_sensor\020\021\022\021\n\rtopology"
    "_node\020\022\022\021\n\rtopology_edge\020\023\022\022\n\016federation"
    "_log\020\024\022\024\n\020netproxy_process\020\025\022\031\n\025netproxy"
    "_addr_mapping\020\026\022\032\n\026netproxy_proto_mappin"
    "g\020\027\022\026\n\022netproxy_link_desc\020\030\022\031\n\025netproxy_"
    "link_traffic\020\031\022\025\n\021network_interface\020\032B-\n"
    "\017us.ihmc.measureB\014SubjectProtoP\001Z\007measur"
    "e\240\001\001b\006proto3", 572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subject.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subject_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_subject_2eproto_once_);
void protobuf_AddDesc_subject_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_subject_2eproto_once_,
                 &protobuf_AddDesc_subject_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subject_2eproto {
  StaticDescriptorInitializer_subject_2eproto() {
    protobuf_AddDesc_subject_2eproto();
  }
} static_descriptor_initializer_subject_2eproto_;
const ::google::protobuf::EnumDescriptor* Subject_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subject_descriptor_;
}
bool Subject_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace measure

// @@protoc_insertion_point(global_scope)
