// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subjects/disservice/disservice.proto

#include "subjects/disservice/disservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace disservice {
}  // namespace disservice
namespace protobuf_subjects_2fdisservice_2fdisservice_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "subjects/disservice/disservice.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$subjects/disservice/disservice.proto\022\n"
      "disservice*I\n\003Str\022\r\n\tsensor_ip\020\000\022\013\n\007peer"
      "_id\020\001\022\022\n\016remote_peer_id\020\002\022\022\n\016remote_peer"
      "_ip\020\003*\340\010\n\003Int\022\031\n\025data_message_received\020\000"
      "\022\027\n\023data_bytes_received\020\001\022\033\n\027data_fragme"
      "nts_received\020\002\022 \n\034data_fragment_bytes_re"
      "ceived\020\003\022*\n&missing_fragment_request_mes"
      "sages_sent\020\004\022\'\n#missing_fragment_request"
      "_bytes_sent\020\005\022.\n*missing_fragment_reques"
      "t_messages_received\020\006\022+\n\'missing_fragmen"
      "t_request_bytes_received\020\007\022\"\n\036data_cache"
      "_query_messages_sent\020\010\022\037\n\033data_cache_que"
      "ry_bytes_sent\020\t\022&\n\"data_cache_query_mess"
      "ages_received\020\n\022#\n\037data_cache_query_byte"
      "s_received\020\013\022\036\n\032targeted_duplicate_traff"
      "ic\020\014\022 \n\034topology_state_messages_sent\020\r\022\035"
      "\n\031topology_state_bytes_sent\020\016\022$\n topolog"
      "y_state_messages_received\020\017\022!\n\035topology_"
      "state_bytes_received\020\020\022\034\n\030keep_alive_mes"
      "sages_sent\020\021\022 \n\034keep_alive_messages_rece"
      "ived\020\022\022\027\n\023query_messages_sent\020\023\022\033\n\027query"
      "_messages_received\020\024\022\034\n\030query_hits_messa"
      "ges_sent\020\025\022 \n\034query_hits_messages_receiv"
      "ed\020\026\022\032\n\026client_messages_pushed\020\027\022\027\n\023clie"
      "nt_bytes_pushed\020\030\022\"\n\036client_messages_mad"
      "e_available\020\031\022\037\n\033client_bytes_made_avail"
      "able\020\032\022\024\n\020fragments_pushed\020\033\022\031\n\025fragment"
      "_bytes_pushed\020\034\022\034\n\030on_demand_fragments_s"
      "ent\020\035\022!\n\035on_demand_fragment_bytes_sent\020\036"
      "\022\037\n\033overheard_duplicate_traffic\020\037\022\031\n\025nms"
      "_msg_count_unicast\020 \022\032\n\026nms_msg_count_ma"
      "nycast\020!B\"\n\005protoB\nDisServiceZ\ndisservic"
      "e\240\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subjects/disservice/disservice.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_subjects_2fdisservice_2fdisservice_2eproto
namespace disservice {
const ::google::protobuf::EnumDescriptor* Str_descriptor() {
  protobuf_subjects_2fdisservice_2fdisservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subjects_2fdisservice_2fdisservice_2eproto::file_level_enum_descriptors[0];
}
bool Str_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Int_descriptor() {
  protobuf_subjects_2fdisservice_2fdisservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_subjects_2fdisservice_2fdisservice_2eproto::file_level_enum_descriptors[1];
}
bool Int_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace disservice
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
