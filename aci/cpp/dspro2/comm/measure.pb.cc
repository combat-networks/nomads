// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measure.proto

#include "measure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_measure_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_measure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measure_DoublesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_measure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measure_IntegersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_measure_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measure_StringsEntry_DoNotUse;
}  // namespace protobuf_measure_2eproto
namespace measure {
class Measure_StringsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure_StringsEntry_DoNotUse>
      _instance;
} _Measure_StringsEntry_DoNotUse_default_instance_;
class Measure_IntegersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure_IntegersEntry_DoNotUse>
      _instance;
} _Measure_IntegersEntry_DoNotUse_default_instance_;
class Measure_DoublesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure_DoublesEntry_DoNotUse>
      _instance;
} _Measure_DoublesEntry_DoNotUse_default_instance_;
class MeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure>
      _instance;
} _Measure_default_instance_;
}  // namespace measure
namespace protobuf_measure_2eproto {
static void InitDefaultsMeasure_StringsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::measure::_Measure_StringsEntry_DoNotUse_default_instance_;
    new (ptr) ::measure::Measure_StringsEntry_DoNotUse();
  }
  ::measure::Measure_StringsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measure_StringsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasure_StringsEntry_DoNotUse}, {}};

static void InitDefaultsMeasure_IntegersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::measure::_Measure_IntegersEntry_DoNotUse_default_instance_;
    new (ptr) ::measure::Measure_IntegersEntry_DoNotUse();
  }
  ::measure::Measure_IntegersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measure_IntegersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasure_IntegersEntry_DoNotUse}, {}};

static void InitDefaultsMeasure_DoublesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::measure::_Measure_DoublesEntry_DoNotUse_default_instance_;
    new (ptr) ::measure::Measure_DoublesEntry_DoNotUse();
  }
  ::measure::Measure_DoublesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measure_DoublesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasure_DoublesEntry_DoNotUse}, {}};

static void InitDefaultsMeasure() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::measure::_Measure_default_instance_;
    new (ptr) ::measure::Measure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::measure::Measure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Measure =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsMeasure}, {
      &protobuf_measure_2eproto::scc_info_Measure_StringsEntry_DoNotUse.base,
      &protobuf_measure_2eproto::scc_info_Measure_IntegersEntry_DoNotUse.base,
      &protobuf_measure_2eproto::scc_info_Measure_DoublesEntry_DoNotUse.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Measure_StringsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measure_IntegersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measure_DoublesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measure.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_StringsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_StringsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_StringsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_StringsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_IntegersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_IntegersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_IntegersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_IntegersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_DoublesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_DoublesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_DoublesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure_DoublesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, strings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, integers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, doubles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::measure::Measure, requestid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::measure::Measure_StringsEntry_DoNotUse)},
  { 9, 16, sizeof(::measure::Measure_IntegersEntry_DoNotUse)},
  { 18, 25, sizeof(::measure::Measure_DoublesEntry_DoNotUse)},
  { 27, -1, sizeof(::measure::Measure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::measure::_Measure_StringsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::measure::_Measure_IntegersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::measure::_Measure_DoublesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::measure::_Measure_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "measure.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmeasure.proto\022\007measure\032\037google/protobu"
      "f/timestamp.proto\032\rsubject.proto\"\221\003\n\007Mea"
      "sure\022!\n\007subject\030\001 \001(\0162\020.measure.Subject\022"
      ".\n\007strings\030\002 \003(\0132\035.measure.Measure.Strin"
      "gsEntry\0220\n\010integers\030\003 \003(\0132\036.measure.Meas"
      "ure.IntegersEntry\022.\n\007doubles\030\004 \003(\0132\035.mea"
      "sure.Measure.DoublesEntry\022-\n\ttimestamp\030\005"
      " \001(\0132\032.google.protobuf.Timestamp\022\021\n\trequ"
      "estID\030\006 \001(\t\032.\n\014StringsEntry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\t:\0028\001\032/\n\rIntegersEntry\022\013\n\003"
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032.\n\014DoublesE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001B#\n\005"
      "protoB\014MeasureProtoP\001Z\007measure\240\001\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "measure.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_subject_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_measure_2eproto
namespace measure {

// ===================================================================

Measure_StringsEntry_DoNotUse::Measure_StringsEntry_DoNotUse() {}
Measure_StringsEntry_DoNotUse::Measure_StringsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Measure_StringsEntry_DoNotUse::MergeFrom(const Measure_StringsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Measure_StringsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_measure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_measure_2eproto::file_level_metadata[0];
}
void Measure_StringsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Measure_IntegersEntry_DoNotUse::Measure_IntegersEntry_DoNotUse() {}
Measure_IntegersEntry_DoNotUse::Measure_IntegersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Measure_IntegersEntry_DoNotUse::MergeFrom(const Measure_IntegersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Measure_IntegersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_measure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_measure_2eproto::file_level_metadata[1];
}
void Measure_IntegersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

Measure_DoublesEntry_DoNotUse::Measure_DoublesEntry_DoNotUse() {}
Measure_DoublesEntry_DoNotUse::Measure_DoublesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Measure_DoublesEntry_DoNotUse::MergeFrom(const Measure_DoublesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Measure_DoublesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_measure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_measure_2eproto::file_level_metadata[2];
}
void Measure_DoublesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Measure::InitAsDefaultInstance() {
  ::measure::_Measure_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Measure::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measure::kSubjectFieldNumber;
const int Measure::kStringsFieldNumber;
const int Measure::kIntegersFieldNumber;
const int Measure::kDoublesFieldNumber;
const int Measure::kTimestampFieldNumber;
const int Measure::kRequestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measure::Measure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_measure_2eproto::scc_info_Measure.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:measure.Measure)
}
Measure::Measure(const Measure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strings_.MergeFrom(from.strings_);
  integers_.MergeFrom(from.integers_);
  doubles_.MergeFrom(from.doubles_);
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.requestid().size() > 0) {
    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  subject_ = from.subject_;
  // @@protoc_insertion_point(copy_constructor:measure.Measure)
}

void Measure::SharedCtor() {
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(subject_));
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:measure.Measure)
  SharedDtor();
}

void Measure::SharedDtor() {
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Measure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Measure::descriptor() {
  ::protobuf_measure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_measure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measure& Measure::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_measure_2eproto::scc_info_Measure.base);
  return *internal_default_instance();
}


void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:measure.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  integers_.Clear();
  doubles_.Clear();
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  subject_ = 0;
  _internal_metadata_.Clear();
}

bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:measure.Measure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .measure.Subject subject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subject(static_cast< ::measure::Subject >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Measure_StringsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Measure_StringsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&strings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.StringsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.StringsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> integers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Measure_IntegersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Measure_IntegersEntry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&integers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.IntegersEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> doubles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Measure_DoublesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Measure_DoublesEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&doubles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.DoublesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string requestID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requestid().data(), static_cast<int>(this->requestid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "measure.Measure.requestID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:measure.Measure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:measure.Measure)
  return false;
#undef DO_
}

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:measure.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .measure.Subject subject = 1;
  if (this->subject() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subject(), output);
  }

  // map<string, string> strings = 2;
  if (!this->strings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->strings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->strings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_StringsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strings_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_StringsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it) {
        entry.reset(strings_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> integers = 3;
  if (!this->integers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.IntegersEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->integers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->integers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_IntegersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_IntegersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it) {
        entry.reset(integers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> doubles = 4;
  if (!this->doubles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.DoublesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->doubles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->doubles().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_DoublesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doubles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_DoublesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it) {
        entry.reset(doubles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timestamp(), output);
  }

  // string requestID = 6;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestid().data(), static_cast<int>(this->requestid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "measure.Measure.requestID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->requestid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:measure.Measure)
}

::google::protobuf::uint8* Measure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:measure.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .measure.Subject subject = 1;
  if (this->subject() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subject(), target);
  }

  // map<string, string> strings = 2;
  if (!this->strings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.StringsEntry.value");
      }
    };

    if (deterministic &&
        this->strings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->strings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_StringsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strings_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_StringsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->strings().begin();
          it != this->strings().end(); ++it) {
        entry.reset(strings_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> integers = 3;
  if (!this->integers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.IntegersEntry.key");
      }
    };

    if (deterministic &&
        this->integers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->integers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_IntegersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(integers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_IntegersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->integers().begin();
          it != this->integers().end(); ++it) {
        entry.reset(integers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> doubles = 4;
  if (!this->doubles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "measure.Measure.DoublesEntry.key");
      }
    };

    if (deterministic &&
        this->doubles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->doubles().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Measure_DoublesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(doubles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Measure_DoublesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->doubles().begin();
          it != this->doubles().end(); ++it) {
        entry.reset(doubles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timestamp(), deterministic, target);
  }

  // string requestID = 6;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requestid().data(), static_cast<int>(this->requestid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "measure.Measure.requestID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->requestid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:measure.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:measure.Measure)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  {
    ::std::unique_ptr<Measure_StringsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->strings().begin();
        it != this->strings().end(); ++it) {
      entry.reset(strings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int64> integers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->integers_size());
  {
    ::std::unique_ptr<Measure_IntegersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->integers().begin();
        it != this->integers().end(); ++it) {
      entry.reset(integers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> doubles = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->doubles_size());
  {
    ::std::unique_ptr<Measure_DoublesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->doubles().begin();
        it != this->doubles().end(); ++it) {
      entry.reset(doubles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string requestID = 6;
  if (this->requestid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .measure.Subject subject = 1;
  if (this->subject() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subject());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:measure.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const Measure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:measure.Measure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:measure.Measure)
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:measure.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
  integers_.MergeFrom(from.integers_);
  doubles_.MergeFrom(from.doubles_);
  if (from.requestid().size() > 0) {

    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.subject() != 0) {
    set_subject(from.subject());
  }
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:measure.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:measure.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {
  return true;
}

void Measure::Swap(Measure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measure::InternalSwap(Measure* other) {
  using std::swap;
  strings_.Swap(&other->strings_);
  integers_.Swap(&other->integers_);
  doubles_.Swap(&other->doubles_);
  requestid_.Swap(&other->requestid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(subject_, other->subject_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  protobuf_measure_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_measure_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace measure
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::measure::Measure_StringsEntry_DoNotUse* Arena::CreateMaybeMessage< ::measure::Measure_StringsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::measure::Measure_StringsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::measure::Measure_IntegersEntry_DoNotUse* Arena::CreateMaybeMessage< ::measure::Measure_IntegersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::measure::Measure_IntegersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::measure::Measure_DoublesEntry_DoNotUse* Arena::CreateMaybeMessage< ::measure::Measure_DoublesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::measure::Measure_DoublesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::measure::Measure* Arena::CreateMaybeMessage< ::measure::Measure >(Arena* arena) {
  return Arena::CreateInternal< ::measure::Measure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
