// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkhealth.proto

package us.ihmc.aci.ddam;

public interface NetworkHealthOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ddam.NetworkHealth)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional string subnet = 1;</code>
   *
   * <pre>
   *A subnet specified as such: x.x.x.x/x.  For this version if one wishes to report on more than one subnet produce separate reports
   * </pre>
   */
  java.lang.String getSubnet();
  /**
   * <code>optional string subnet = 1;</code>
   *
   * <pre>
   *A subnet specified as such: x.x.x.x/x.  For this version if one wishes to report on more than one subnet produce separate reports
   * </pre>
   */
  com.google.protobuf.ByteString
      getSubnetBytes();

  /**
   * <code>repeated string ipList = 2;</code>
   *
   * <pre>
   *A list of ip addresses to report on
   * </pre>
   */
  com.google.protobuf.ProtocolStringList
      getIpListList();
  /**
   * <code>repeated string ipList = 2;</code>
   *
   * <pre>
   *A list of ip addresses to report on
   * </pre>
   */
  int getIpListCount();
  /**
   * <code>repeated string ipList = 2;</code>
   *
   * <pre>
   *A list of ip addresses to report on
   * </pre>
   */
  java.lang.String getIpList(int index);
  /**
   * <code>repeated string ipList = 2;</code>
   *
   * <pre>
   *A list of ip addresses to report on
   * </pre>
   */
  com.google.protobuf.ByteString
      getIpListBytes(int index);

  /**
   * <code>optional string networkName = 3;</code>
   *
   * <pre>
   *A named network segment expressed as a string 
   * </pre>
   */
  java.lang.String getNetworkName();
  /**
   * <code>optional string networkName = 3;</code>
   *
   * <pre>
   *A named network segment expressed as a string 
   * </pre>
   */
  com.google.protobuf.ByteString
      getNetworkNameBytes();

  /**
   * <code>optional string collector = 4;</code>
   *
   * <pre>
   *Name of the software collecting and reporting network statistics
   * </pre>
   */
  java.lang.String getCollector();
  /**
   * <code>optional string collector = 4;</code>
   *
   * <pre>
   *Name of the software collecting and reporting network statistics
   * </pre>
   */
  com.google.protobuf.ByteString
      getCollectorBytes();

  /**
   * <code>optional string version = 5;</code>
   *
   * <pre>
   *Version of the collector reporting this network health summary
   * </pre>
   */
  java.lang.String getVersion();
  /**
   * <code>optional string version = 5;</code>
   *
   * <pre>
   *Version of the collector reporting this network health summary
   * </pre>
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <code>optional uint32 interconnectedP = 6;</code>
   *
   * <pre>
   *Probability that nodes in an identified network will have an connection with eachother
   * </pre>
   */
  int getInterconnectedP();

  /**
   * <code>optional uint32 backhaulP = 7;</code>
   *
   * <pre>
   *Probability that a backhaul connection is up
   * </pre>
   */
  int getBackhaulP();

  /**
   * <code>optional uint32 delay = 8;</code>
   *
   * <pre>
   *Observed summary latency over the identfied network segment expressed in ms
   * </pre>
   */
  int getDelay();

  /**
   * <code>optional uint32 saturation = 9;</code>
   *
   * <pre>
   *Estimated saturation of the link expressed as a percentage.  0 = 0% 100 = 100%"
   * </pre>
   */
  int getSaturation();

  /**
   * <code>optional uint32 totalBandwidthMeasured = 10;</code>
   *
   * <pre>
   *Bandwidth measured by "filling the pipe" with something like MGEN data to test bandwith to and from the identified network expressed in kbps"
   * </pre>
   */
  int getTotalBandwidthMeasured();

  /**
   * <code>optional uint32 totalBandwidthEstimated = 11;</code>
   *
   * <pre>
   *totalBandwithEstimated Bandwidth estimate to and from the identified network expressed in kbps
   * </pre>
   */
  int getTotalBandwidthEstimated();

  /**
   * <code>optional uint32 withinBandwidthMeasured = 12;</code>
   *
   * <pre>
   *Bandwidth measured by "filling the pipe" with something like MGEN data to test bandwith within the identified network in kbps
   * </pre>
   */
  int getWithinBandwidthMeasured();

  /**
   * <code>optional uint32 withinBandwidthEstimated = 13;</code>
   *
   * <pre>
   *Bandwidth estimate within the identified network in kbps
   * </pre>
   */
  int getWithinBandwidthEstimated();

  /**
   * <code>optional .google.protobuf.Timestamp creationTime = 14;</code>
   *
   * <pre>
   *Time the summary report was created
   * </pre>
   */
  boolean hasCreationTime();
  /**
   * <code>optional .google.protobuf.Timestamp creationTime = 14;</code>
   *
   * <pre>
   *Time the summary report was created
   * </pre>
   */
  com.google.protobuf.Timestamp getCreationTime();
  /**
   * <code>optional .google.protobuf.Timestamp creationTime = 14;</code>
   *
   * <pre>
   *Time the summary report was created
   * </pre>
   */
  com.google.protobuf.TimestampOrBuilder getCreationTimeOrBuilder();
}
