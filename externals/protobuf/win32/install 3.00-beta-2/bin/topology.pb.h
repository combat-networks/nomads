// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topology.proto

#ifndef PROTOBUF_topology_2eproto__INCLUDED
#define PROTOBUF_topology_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace ddam {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_topology_2eproto();
void protobuf_AssignDesc_topology_2eproto();
void protobuf_ShutdownFile_topology_2eproto();

class Topology;

// ===================================================================

class Topology : public ::google::protobuf::Message {
 public:
  Topology();
  virtual ~Topology();

  Topology(const Topology& from);

  inline Topology& operator=(const Topology& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topology& default_instance();

  void Swap(Topology* other);

  // implements Message ----------------------------------------------

  inline Topology* New() const { return New(NULL); }

  Topology* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topology& from);
  void MergeFrom(const Topology& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Topology* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> internals = 1;
  int internals_size() const;
  void clear_internals();
  static const int kInternalsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      internals() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_internals();

  // map<string, string> localGws = 2;
  int localgws_size() const;
  void clear_localgws();
  static const int kLocalGwsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      localgws() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_localgws();

  // map<string, string> remoteGws = 3;
  int remotegws_size() const;
  void clear_remotegws();
  static const int kRemoteGwsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      remotegws() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_remotegws();

  // map<string, string> externals = 4;
  int externals_size() const;
  void clear_externals();
  static const int kExternalsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      externals() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_externals();

  // optional .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* mutable_timestamp();
  ::google::protobuf::Timestamp* release_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:ddam.Topology)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Topology_InternalsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > internals_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Topology_LocalGwsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > localgws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Topology_RemoteGwsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > remotegws_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Topology_ExternalsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > externals_;
  ::google::protobuf::Timestamp* timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_topology_2eproto();
  friend void protobuf_AssignDesc_topology_2eproto();
  friend void protobuf_ShutdownFile_topology_2eproto();

  void InitAsDefaultInstance();
  static Topology* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Topology

// map<string, string> internals = 1;
inline int Topology::internals_size() const {
  return internals_.size();
}
inline void Topology::clear_internals() {
  internals_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topology::internals() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.internals)
  return internals_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topology::mutable_internals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.internals)
  return internals_.MutableMap();
}

// map<string, string> localGws = 2;
inline int Topology::localgws_size() const {
  return localgws_.size();
}
inline void Topology::clear_localgws() {
  localgws_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topology::localgws() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.localGws)
  return localgws_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topology::mutable_localgws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.localGws)
  return localgws_.MutableMap();
}

// map<string, string> remoteGws = 3;
inline int Topology::remotegws_size() const {
  return remotegws_.size();
}
inline void Topology::clear_remotegws() {
  remotegws_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topology::remotegws() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.remoteGws)
  return remotegws_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topology::mutable_remotegws() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.remoteGws)
  return remotegws_.MutableMap();
}

// map<string, string> externals = 4;
inline int Topology::externals_size() const {
  return externals_.size();
}
inline void Topology::clear_externals() {
  externals_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topology::externals() const {
  // @@protoc_insertion_point(field_map:ddam.Topology.externals)
  return externals_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topology::mutable_externals() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Topology.externals)
  return externals_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 5;
inline bool Topology::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
inline void Topology::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& Topology::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Topology.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::google::protobuf::Timestamp* Topology::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Topology.timestamp)
  return timestamp_;
}
inline ::google::protobuf::Timestamp* Topology::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Topology::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Topology.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_topology_2eproto__INCLUDED
