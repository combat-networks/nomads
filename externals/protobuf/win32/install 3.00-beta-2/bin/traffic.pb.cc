// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ddam {

namespace {

const ::google::protobuf::Descriptor* LinkStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Traffic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Traffic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Traffic_SourcesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Source_reflection_ = NULL;
const ::google::protobuf::Descriptor* Source_DestinationsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_ProtocolsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Protocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Protocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Protocol_PortsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_traffic_2eproto() {
  protobuf_AddDesc_traffic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "traffic.proto");
  GOOGLE_CHECK(file != NULL);
  LinkStatus_descriptor_ = file->message_type(0);
  static const int LinkStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, projection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, throughput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, packetloss_),
  };
  LinkStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinkStatus_descriptor_,
      LinkStatus::default_instance_,
      LinkStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(LinkStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkStatus, _is_default_instance_));
  Traffic_descriptor_ = file->message_type(1);
  static const int Traffic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, sources_),
  };
  Traffic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Traffic_descriptor_,
      Traffic::default_instance_,
      Traffic_offsets_,
      -1,
      -1,
      -1,
      sizeof(Traffic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _is_default_instance_));
  Traffic_SourcesEntry_descriptor_ = Traffic_descriptor_->nested_type(0);
  Source_descriptor_ = file->message_type(2);
  static const int Source_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, timestamp_),
  };
  Source_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Source_descriptor_,
      Source::default_instance_,
      Source_offsets_,
      -1,
      -1,
      -1,
      sizeof(Source),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _is_default_instance_));
  Source_DestinationsEntry_descriptor_ = Source_descriptor_->nested_type(0);
  Link_descriptor_ = file->message_type(3);
  static const int Link_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, linkstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, protocols_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      -1,
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _is_default_instance_));
  Link_ProtocolsEntry_descriptor_ = Link_descriptor_->nested_type(0);
  Protocol_descriptor_ = file->message_type(4);
  static const int Protocol_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, ports_),
  };
  Protocol_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Protocol_descriptor_,
      Protocol::default_instance_,
      Protocol_offsets_,
      -1,
      -1,
      -1,
      sizeof(Protocol),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, _is_default_instance_));
  Protocol_PortsEntry_descriptor_ = Protocol_descriptor_->nested_type(0);
  Stat_descriptor_ = file->message_type(5);
  static const int Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, m_),
  };
  Stat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_traffic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinkStatus_descriptor_, &LinkStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Traffic_descriptor_, &Traffic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Traffic_SourcesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::Source,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Traffic_SourcesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Source_descriptor_, &Source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Source_DestinationsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::Link,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Source_DestinationsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Link_ProtocolsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::ddam::Protocol,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Link_ProtocolsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Protocol_descriptor_, &Protocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Protocol_PortsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::ddam::Stat,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Protocol_PortsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stat_descriptor_, &Stat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_traffic_2eproto() {
  delete LinkStatus::default_instance_;
  delete LinkStatus_reflection_;
  delete Traffic::default_instance_;
  delete Traffic_reflection_;
  delete Source::default_instance_;
  delete Source_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete Protocol::default_instance_;
  delete Protocol_reflection_;
  delete Stat::default_instance_;
  delete Stat_reflection_;
}

void protobuf_AddDesc_traffic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtraffic.proto\022\004ddam\032\037google/protobuf/t"
    "imestamp.proto\"g\n\nLinkStatus\022\014\n\004type\030\001 \001"
    "(\t\022\022\n\nprojection\030\002 \001(\t\022\022\n\nthroughput\030\003 \001"
    "(\001\022\017\n\007latency\030\004 \001(\021\022\022\n\npacketLoss\030\005 \001(\021\""
    "t\n\007Traffic\022+\n\007sources\030\001 \003(\0132\032.ddam.Traff"
    "ic.SourcesEntry\032<\n\014SourcesEntry\022\013\n\003key\030\001"
    " \001(\t\022\033\n\005value\030\002 \001(\0132\014.ddam.Source:\0028\001\"\256\001"
    "\n\006Source\0224\n\014destinations\030\001 \003(\0132\036.ddam.So"
    "urce.DestinationsEntry\022-\n\ttimestamp\030\002 \001("
    "\0132\032.google.protobuf.Timestamp\032\?\n\021Destina"
    "tionsEntry\022\013\n\003key\030\001 \001(\t\022\031\n\005value\030\002 \001(\0132\n"
    ".ddam.Link:\0028\001\"\234\001\n\004Link\022$\n\nlinkStatus\030\001 "
    "\001(\0132\020.ddam.LinkStatus\022,\n\tprotocols\030\002 \003(\013"
    "2\031.ddam.Link.ProtocolsEntry\032@\n\016Protocols"
    "Entry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001(\0132\016.ddam"
    ".Protocol:\0028\001\"n\n\010Protocol\022(\n\005ports\030\001 \003(\013"
    "2\031.ddam.Protocol.PortsEntry\0328\n\nPortsEntr"
    "y\022\013\n\003key\030\001 \001(\r\022\031\n\005value\030\002 \001(\0132\n.ddam.Sta"
    "t:\0028\001\"\034\n\004Stat\022\t\n\001f\030\001 \001(\001\022\t\n\001m\030\002 \001(\001B%\n\020u"
    "s.ihmc.aci.ddamB\014TrafficProtoP\001\240\001\001b\006prot"
    "o3", 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  LinkStatus::default_instance_ = new LinkStatus();
  Traffic::default_instance_ = new Traffic();
  Source::default_instance_ = new Source();
  Link::default_instance_ = new Link();
  Protocol::default_instance_ = new Protocol();
  Stat::default_instance_ = new Stat();
  LinkStatus::default_instance_->InitAsDefaultInstance();
  Traffic::default_instance_->InitAsDefaultInstance();
  Source::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  Protocol::default_instance_->InitAsDefaultInstance();
  Stat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_traffic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_traffic_2eproto {
  StaticDescriptorInitializer_traffic_2eproto() {
    protobuf_AddDesc_traffic_2eproto();
  }
} static_descriptor_initializer_traffic_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkStatus::kTypeFieldNumber;
const int LinkStatus::kProjectionFieldNumber;
const int LinkStatus::kThroughputFieldNumber;
const int LinkStatus::kLatencyFieldNumber;
const int LinkStatus::kPacketLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkStatus::LinkStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.LinkStatus)
}

void LinkStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LinkStatus::LinkStatus(const LinkStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.LinkStatus)
}

void LinkStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  throughput_ = 0;
  latency_ = 0;
  packetloss_ = 0;
}

LinkStatus::~LinkStatus() {
  // @@protoc_insertion_point(destructor:ddam.LinkStatus)
  SharedDtor();
}

void LinkStatus::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LinkStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkStatus_descriptor_;
}

const LinkStatus& LinkStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

LinkStatus* LinkStatus::default_instance_ = NULL;

LinkStatus* LinkStatus::New(::google::protobuf::Arena* arena) const {
  LinkStatus* n = new LinkStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LinkStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(throughput_, packetloss_);
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LinkStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.LinkStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.LinkStatus.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_projection;
        break;
      }

      // optional string projection = 2;
      case 2: {
        if (tag == 18) {
         parse_projection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projection().data(), this->projection().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.LinkStatus.projection"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_throughput;
        break;
      }

      // optional double throughput = 3;
      case 3: {
        if (tag == 25) {
         parse_throughput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throughput_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latency;
        break;
      }

      // optional sint32 latency = 4;
      case 4: {
        if (tag == 32) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &latency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_packetLoss;
        break;
      }

      // optional sint32 packetLoss = 5;
      case 5: {
        if (tag == 40) {
         parse_packetLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &packetloss_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.LinkStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.LinkStatus)
  return false;
#undef DO_
}

void LinkStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.LinkStatus)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.LinkStatus.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string projection = 2;
  if (this->projection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.LinkStatus.projection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->projection(), output);
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->throughput(), output);
  }

  // optional sint32 latency = 4;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->latency(), output);
  }

  // optional sint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->packetloss(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.LinkStatus)
}

::google::protobuf::uint8* LinkStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.LinkStatus)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.LinkStatus.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string projection = 2;
  if (this->projection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection().data(), this->projection().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ddam.LinkStatus.projection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->projection(), target);
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->throughput(), target);
  }

  // optional sint32 latency = 4;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->latency(), target);
  }

  // optional sint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->packetloss(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.LinkStatus)
  return target;
}

int LinkStatus::ByteSize() const {
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string projection = 2;
  if (this->projection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->projection());
  }

  // optional double throughput = 3;
  if (this->throughput() != 0) {
    total_size += 1 + 8;
  }

  // optional sint32 latency = 4;
  if (this->latency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->latency());
  }

  // optional sint32 packetLoss = 5;
  if (this->packetloss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->packetloss());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LinkStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkStatus::MergeFrom(const LinkStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.projection().size() > 0) {

    projection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projection_);
  }
  if (from.throughput() != 0) {
    set_throughput(from.throughput());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
  if (from.packetloss() != 0) {
    set_packetloss(from.packetloss());
  }
}

void LinkStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkStatus::CopyFrom(const LinkStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkStatus::IsInitialized() const {

  return true;
}

void LinkStatus::Swap(LinkStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkStatus::InternalSwap(LinkStatus* other) {
  type_.Swap(&other->type_);
  projection_.Swap(&other->projection_);
  std::swap(throughput_, other->throughput_);
  std::swap(latency_, other->latency_);
  std::swap(packetloss_, other->packetloss_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkStatus_descriptor_;
  metadata.reflection = LinkStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkStatus

// optional string type = 1;
void LinkStatus::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LinkStatus::type() const {
  // @@protoc_insertion_point(field_get:ddam.LinkStatus.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkStatus::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.LinkStatus.type)
}
 void LinkStatus::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.LinkStatus.type)
}
 void LinkStatus::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.LinkStatus.type)
}
 ::std::string* LinkStatus::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ddam.LinkStatus.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LinkStatus::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkStatus::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ddam.LinkStatus.type)
}

// optional string projection = 2;
void LinkStatus::clear_projection() {
  projection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LinkStatus::projection() const {
  // @@protoc_insertion_point(field_get:ddam.LinkStatus.projection)
  return projection_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkStatus::set_projection(const ::std::string& value) {
  
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddam.LinkStatus.projection)
}
 void LinkStatus::set_projection(const char* value) {
  
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddam.LinkStatus.projection)
}
 void LinkStatus::set_projection(const char* value, size_t size) {
  
  projection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddam.LinkStatus.projection)
}
 ::std::string* LinkStatus::mutable_projection() {
  
  // @@protoc_insertion_point(field_mutable:ddam.LinkStatus.projection)
  return projection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LinkStatus::release_projection() {
  
  return projection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkStatus::set_allocated_projection(::std::string* projection) {
  if (projection != NULL) {
    
  } else {
    
  }
  projection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projection);
  // @@protoc_insertion_point(field_set_allocated:ddam.LinkStatus.projection)
}

// optional double throughput = 3;
void LinkStatus::clear_throughput() {
  throughput_ = 0;
}
 double LinkStatus::throughput() const {
  // @@protoc_insertion_point(field_get:ddam.LinkStatus.throughput)
  return throughput_;
}
 void LinkStatus::set_throughput(double value) {
  
  throughput_ = value;
  // @@protoc_insertion_point(field_set:ddam.LinkStatus.throughput)
}

// optional sint32 latency = 4;
void LinkStatus::clear_latency() {
  latency_ = 0;
}
 ::google::protobuf::int32 LinkStatus::latency() const {
  // @@protoc_insertion_point(field_get:ddam.LinkStatus.latency)
  return latency_;
}
 void LinkStatus::set_latency(::google::protobuf::int32 value) {
  
  latency_ = value;
  // @@protoc_insertion_point(field_set:ddam.LinkStatus.latency)
}

// optional sint32 packetLoss = 5;
void LinkStatus::clear_packetloss() {
  packetloss_ = 0;
}
 ::google::protobuf::int32 LinkStatus::packetloss() const {
  // @@protoc_insertion_point(field_get:ddam.LinkStatus.packetLoss)
  return packetloss_;
}
 void LinkStatus::set_packetloss(::google::protobuf::int32 value) {
  
  packetloss_ = value;
  // @@protoc_insertion_point(field_set:ddam.LinkStatus.packetLoss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Traffic::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Traffic::Traffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Traffic)
}

void Traffic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Traffic::Traffic(const Traffic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Traffic)
}

void Traffic::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  sources_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  sources_.SetEntryDescriptor(
      &::ddam::Traffic_SourcesEntry_descriptor_);
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:ddam.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Traffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Traffic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Traffic_descriptor_;
}

const Traffic& Traffic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Traffic* Traffic::default_instance_ = NULL;

Traffic* Traffic::New(::google::protobuf::Arena* arena) const {
  Traffic* n = new Traffic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Traffic::Clear() {
  sources_.Clear();
}

bool Traffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Traffic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ddam.Source> sources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry(sources_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_sources())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Traffic.SourcesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Traffic)
  return false;
#undef DO_
}

void Traffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Traffic)
  // map<string, .ddam.Source> sources = 1;
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Traffic.SourcesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Traffic)
}

::google::protobuf::uint8* Traffic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Traffic)
  // map<string, .ddam.Source> sources = 1;
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Traffic.SourcesEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Traffic)
  return target;
}

int Traffic::ByteSize() const {
  int total_size = 0;

  // map<string, .ddam.Source> sources = 1;
  total_size += 1 * this->sources_size();
  {
    ::google::protobuf::scoped_ptr<Traffic_SourcesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Source >::const_iterator
        it = this->sources().begin();
        it != this->sources().end(); ++it) {
      entry.reset(sources_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Traffic::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Traffic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Traffic>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sources_.MergeFrom(from.sources_);
}

void Traffic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {

  return true;
}

void Traffic::Swap(Traffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Traffic::InternalSwap(Traffic* other) {
  sources_.Swap(&other->sources_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Traffic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Traffic_descriptor_;
  metadata.reflection = Traffic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Traffic

// map<string, .ddam.Source> sources = 1;
int Traffic::sources_size() const {
  return sources_.size();
}
void Traffic::clear_sources() {
  sources_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::Source >&
Traffic::sources() const {
  // @@protoc_insertion_point(field_map:ddam.Traffic.sources)
  return sources_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::Source >*
Traffic::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Traffic.sources)
  return sources_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source::kDestinationsFieldNumber;
const int Source::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source::Source()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Source)
}

void Source::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  timestamp_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

Source::Source(const Source& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Source)
}

void Source::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  destinations_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  destinations_.SetEntryDescriptor(
      &::ddam::Source_DestinationsEntry_descriptor_);
  timestamp_ = NULL;
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:ddam.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Source_descriptor_;
}

const Source& Source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Source* Source::default_instance_ = NULL;

Source* Source::New(::google::protobuf::Arena* arena) const {
  Source* n = new Source;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Source::Clear() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  destinations_.Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ddam.Link> destinations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry(destinations_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_destinations())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Source.DestinationsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Source)
  // map<string, .ddam.Link> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Source.DestinationsEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Source)
}

::google::protobuf::uint8* Source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Source)
  // map<string, .ddam.Link> destinations = 1;
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Source.DestinationsEntry.key");
    }
  }

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Source)
  return target;
}

int Source::ByteSize() const {
  int total_size = 0;

  // optional .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // map<string, .ddam.Link> destinations = 1;
  total_size += 1 * this->destinations_size();
  {
    ::google::protobuf::scoped_ptr<Source_DestinationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Link >::const_iterator
        it = this->destinations().begin();
        it != this->destinations().end(); ++it) {
      entry.reset(destinations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Source* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Source>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {

  return true;
}

void Source::Swap(Source* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Source::InternalSwap(Source* other) {
  destinations_.Swap(&other->destinations_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Source_descriptor_;
  metadata.reflection = Source_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Source

// map<string, .ddam.Link> destinations = 1;
int Source::destinations_size() const {
  return destinations_.size();
}
void Source::clear_destinations() {
  destinations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::Link >&
Source::destinations() const {
  // @@protoc_insertion_point(field_map:ddam.Source.destinations)
  return destinations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::Link >*
Source::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Source.destinations)
  return destinations_.MutableMap();
}

// optional .google.protobuf.Timestamp timestamp = 2;
bool Source::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void Source::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Source::timestamp() const {
  // @@protoc_insertion_point(field_get:ddam.Source.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::google::protobuf::Timestamp* Source::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Source.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Source::release_timestamp() {
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Source::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Source.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kLinkStatusFieldNumber;
const int Link::kProtocolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Link)
}

void Link::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  linkstatus_ = const_cast< ::ddam::LinkStatus*>(&::ddam::LinkStatus::default_instance());
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Link)
}

void Link::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  linkstatus_ = NULL;
  protocols_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  protocols_.SetEntryDescriptor(
      &::ddam::Link_ProtocolsEntry_descriptor_);
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:ddam.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != default_instance_) {
    delete linkstatus_;
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
  if (GetArenaNoVirtual() == NULL && linkstatus_ != NULL) delete linkstatus_;
  linkstatus_ = NULL;
  protocols_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ddam.LinkStatus linkStatus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_protocols;
        break;
      }

      // map<string, .ddam.Protocol> protocols = 2;
      case 2: {
        if (tag == 18) {
         parse_protocols:
          DO_(input->IncrementRecursionDepth());
         parse_loop_protocols:
          ::google::protobuf::scoped_ptr<Link_ProtocolsEntry> entry(protocols_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_protocols())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ddam.Link.ProtocolsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_protocols;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Link)
  // optional .ddam.LinkStatus linkStatus = 1;
  if (this->has_linkstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linkstatus_, output);
  }

  // map<string, .ddam.Protocol> protocols = 2;
  {
    ::google::protobuf::scoped_ptr<Link_ProtocolsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Protocol >::const_iterator
        it = this->protocols().begin();
        it != this->protocols().end(); ++it) {
      entry.reset(protocols_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Link.ProtocolsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Link)
  // optional .ddam.LinkStatus linkStatus = 1;
  if (this->has_linkstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->linkstatus_, target);
  }

  // map<string, .ddam.Protocol> protocols = 2;
  {
    ::google::protobuf::scoped_ptr<Link_ProtocolsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Protocol >::const_iterator
        it = this->protocols().begin();
        it != this->protocols().end(); ++it) {
      entry.reset(protocols_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "ddam.Link.ProtocolsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  // optional .ddam.LinkStatus linkStatus = 1;
  if (this->has_linkstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linkstatus_);
  }

  // map<string, .ddam.Protocol> protocols = 2;
  total_size += 1 * this->protocols_size();
  {
    ::google::protobuf::scoped_ptr<Link_ProtocolsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ddam::Protocol >::const_iterator
        it = this->protocols().begin();
        it != this->protocols().end(); ++it) {
      entry.reset(protocols_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  protocols_.MergeFrom(from.protocols_);
  if (from.has_linkstatus()) {
    mutable_linkstatus()->::ddam::LinkStatus::MergeFrom(from.linkstatus());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  std::swap(linkstatus_, other->linkstatus_);
  protocols_.Swap(&other->protocols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional .ddam.LinkStatus linkStatus = 1;
bool Link::has_linkstatus() const {
  return !_is_default_instance_ && linkstatus_ != NULL;
}
void Link::clear_linkstatus() {
  if (GetArenaNoVirtual() == NULL && linkstatus_ != NULL) delete linkstatus_;
  linkstatus_ = NULL;
}
const ::ddam::LinkStatus& Link::linkstatus() const {
  // @@protoc_insertion_point(field_get:ddam.Link.linkStatus)
  return linkstatus_ != NULL ? *linkstatus_ : *default_instance_->linkstatus_;
}
::ddam::LinkStatus* Link::mutable_linkstatus() {
  
  if (linkstatus_ == NULL) {
    linkstatus_ = new ::ddam::LinkStatus;
  }
  // @@protoc_insertion_point(field_mutable:ddam.Link.linkStatus)
  return linkstatus_;
}
::ddam::LinkStatus* Link::release_linkstatus() {
  
  ::ddam::LinkStatus* temp = linkstatus_;
  linkstatus_ = NULL;
  return temp;
}
void Link::set_allocated_linkstatus(::ddam::LinkStatus* linkstatus) {
  delete linkstatus_;
  linkstatus_ = linkstatus;
  if (linkstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ddam.Link.linkStatus)
}

// map<string, .ddam.Protocol> protocols = 2;
int Link::protocols_size() const {
  return protocols_.size();
}
void Link::clear_protocols() {
  protocols_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ddam::Protocol >&
Link::protocols() const {
  // @@protoc_insertion_point(field_map:ddam.Link.protocols)
  return protocols_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ddam::Protocol >*
Link::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Link.protocols)
  return protocols_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Protocol::kPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Protocol::Protocol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Protocol)
}

void Protocol::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Protocol::Protocol(const Protocol& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Protocol)
}

void Protocol::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ports_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  ports_.SetEntryDescriptor(
      &::ddam::Protocol_PortsEntry_descriptor_);
}

Protocol::~Protocol() {
  // @@protoc_insertion_point(destructor:ddam.Protocol)
  SharedDtor();
}

void Protocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Protocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Protocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protocol_descriptor_;
}

const Protocol& Protocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Protocol* Protocol::default_instance_ = NULL;

Protocol* Protocol::New(::google::protobuf::Arena* arena) const {
  Protocol* n = new Protocol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Protocol::Clear() {
  ports_.Clear();
}

bool Protocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Protocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .ddam.Stat> ports = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ports:
          ::google::protobuf::scoped_ptr<Protocol_PortsEntry> entry(ports_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_ports())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_ports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Protocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Protocol)
  return false;
#undef DO_
}

void Protocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Protocol)
  // map<uint32, .ddam.Stat> ports = 1;
  {
    ::google::protobuf::scoped_ptr<Protocol_PortsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Stat >::const_iterator
        it = this->ports().begin();
        it != this->ports().end(); ++it) {
      entry.reset(ports_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
    }
  }

  // @@protoc_insertion_point(serialize_end:ddam.Protocol)
}

::google::protobuf::uint8* Protocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Protocol)
  // map<uint32, .ddam.Stat> ports = 1;
  {
    ::google::protobuf::scoped_ptr<Protocol_PortsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Stat >::const_iterator
        it = this->ports().begin();
        it != this->ports().end(); ++it) {
      entry.reset(ports_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Protocol)
  return target;
}

int Protocol::ByteSize() const {
  int total_size = 0;

  // map<uint32, .ddam.Stat> ports = 1;
  total_size += 1 * this->ports_size();
  {
    ::google::protobuf::scoped_ptr<Protocol_PortsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Stat >::const_iterator
        it = this->ports().begin();
        it != this->ports().end(); ++it) {
      entry.reset(ports_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Protocol::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Protocol* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Protocol>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Protocol::MergeFrom(const Protocol& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ports_.MergeFrom(from.ports_);
}

void Protocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Protocol::CopyFrom(const Protocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protocol::IsInitialized() const {

  return true;
}

void Protocol::Swap(Protocol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Protocol::InternalSwap(Protocol* other) {
  ports_.Swap(&other->ports_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Protocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Protocol_descriptor_;
  metadata.reflection = Protocol_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Protocol

// map<uint32, .ddam.Stat> ports = 1;
int Protocol::ports_size() const {
  return ports_.size();
}
void Protocol::clear_ports() {
  ports_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Stat >&
Protocol::ports() const {
  // @@protoc_insertion_point(field_map:ddam.Protocol.ports)
  return ports_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::ddam::Stat >*
Protocol::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_map:ddam.Protocol.ports)
  return ports_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stat::kFFieldNumber;
const int Stat::kMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stat::Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ddam.Stat)
}

void Stat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ddam.Stat)
}

void Stat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  f_ = 0;
  m_ = 0;
}

Stat::~Stat() {
  // @@protoc_insertion_point(destructor:ddam.Stat)
  SharedDtor();
}

void Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_traffic_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New(::google::protobuf::Arena* arena) const {
  Stat* n = new Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Stat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(f_, m_);

#undef ZR_HELPER_
#undef ZR_

}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ddam.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double f = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_m;
        break;
      }

      // optional double m = 2;
      case 2: {
        if (tag == 17) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ddam.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ddam.Stat)
  return false;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ddam.Stat)
  // optional double f = 1;
  if (this->f() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->f(), output);
  }

  // optional double m = 2;
  if (this->m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->m(), output);
  }

  // @@protoc_insertion_point(serialize_end:ddam.Stat)
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddam.Stat)
  // optional double f = 1;
  if (this->f() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->f(), target);
  }

  // optional double m = 2;
  if (this->m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->m(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ddam.Stat)
  return target;
}

int Stat::ByteSize() const {
  int total_size = 0;

  // optional double f = 1;
  if (this->f() != 0) {
    total_size += 1 + 8;
  }

  // optional double m = 2;
  if (this->m() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.f() != 0) {
    set_f(from.f());
  }
  if (from.m() != 0) {
    set_m(from.m());
  }
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {

  return true;
}

void Stat::Swap(Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stat::InternalSwap(Stat* other) {
  std::swap(f_, other->f_);
  std::swap(m_, other->m_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stat

// optional double f = 1;
void Stat::clear_f() {
  f_ = 0;
}
 double Stat::f() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.f)
  return f_;
}
 void Stat::set_f(double value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.f)
}

// optional double m = 2;
void Stat::clear_m() {
  m_ = 0;
}
 double Stat::m() const {
  // @@protoc_insertion_point(field_get:ddam.Stat.m)
  return m_;
}
 void Stat::set_m(double value) {
  
  m_ = value;
  // @@protoc_insertion_point(field_set:ddam.Stat.m)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddam

// @@protoc_insertion_point(global_scope)
